#!/usr/bin/env node
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var CmdParams = /** @class */ (function () {
    function CmdParams() {
        this.flags = {};
        this.params = {};
        this.values = [];
    }
    CmdParams.prototype.hasParam = function (name) {
        return (typeof (this.params[name]) != "undefined" && this.params.hasOwnProperty(name));
    };
    ;
    CmdParams.prototype.getParam = function (name) {
        return this.params[name];
    };
    ;
    CmdParams.prototype.collect = function () {
        var cnt = (process.argv.length - 2);
        var i = 0;
        while (cnt > 0) {
            var argStr = process.argv[2 + i];
            var firstC = argStr.charCodeAt(0);
            if (firstC == (45)) {
                var pS = argStr.substring(1, (argStr.length));
                var parts = pS.split("=");
                if ((parts.length) == 1) {
                    var flag = parts[0];
                    this.flags[flag] = true;
                }
                else {
                    var name_1 = parts[0];
                    parts.splice(0, 1).pop();
                    var value = parts.join("=");
                    this.params[name_1] = value;
                }
            }
            else {
                this.values.push(argStr);
            }
            cnt = cnt - 1;
            i = i + 1;
        }
        ;
    };
    ;
    CmdParams.prototype.toDictionary = function () {
        var res = {};
        try {
            var values_1 = {};
            var keyList = Object.keys(this.flags);
            for (var index = 0; index < keyList.length; index++) {
                var keyname = keyList[index];
                var item = (this.flags[keyname]);
                values_1[keyname] = item;
            }
            ;
            res["flags"] = values_1;
            var values_2 = {};
            var keyList_1 = Object.keys(this.params);
            for (var index_1 = 0; index_1 < keyList_1.length; index_1++) {
                var keyname_1 = keyList_1[index_1];
                var item_1 = (this.params[keyname_1]);
                values_2[keyname_1] = item_1;
            }
            ;
            res["params"] = values_2;
            var values_3 = [];
            for (var i = 0; i < this.values.length; i++) {
                var item_2 = this.values[i];
                values_3.push(item_2);
            }
            ;
            res["values"] = values_3;
        }
        catch (e) {
        }
        return res;
    };
    ;
    // typescript static 
    CmdParams.fromDictionary = function (dict) {
        return __awaiter(this, void 0, void 0, function () {
            var obj, values, theObjflags_1, obj_keys, values_1, theObjparams_1, obj_keys_1, values_2, arr, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        obj = new CmdParams();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 6, , 7]);
                        values = (dict["flags"] instanceof Object) ? dict["flags"] : undefined;
                        if (!(typeof (values) !== "undefined" && values != null)) return [3 /*break*/, 3];
                        theObjflags_1 = values;
                        obj_keys = Object.keys(theObjflags_1);
                        return [4 /*yield*/, operatorsOf.forEach_12(obj_keys, (function (item, index) {
                                var v = typeof (theObjflags_1[item]) === "undefined" ? undefined : (theObjflags_1[item]);
                                if ((typeof (v) !== "undefined" && v != null)) {
                                    obj.flags[item] = v;
                                }
                            }))];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        values_1 = (dict["params"] instanceof Object) ? dict["params"] : undefined;
                        if (!(typeof (values_1) !== "undefined" && values_1 != null)) return [3 /*break*/, 5];
                        theObjparams_1 = values_1;
                        obj_keys_1 = Object.keys(theObjparams_1);
                        return [4 /*yield*/, operatorsOf.forEach_12(obj_keys_1, (function (item, index) {
                                var v_1 = (typeof (theObjparams_1[item]) != "string") ? undefined : theObjparams_1[item];
                                if ((typeof (v_1) !== "undefined" && v_1 != null)) {
                                    obj.params[item] = v_1;
                                }
                            }))];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        values_2 = (dict["values"] instanceof Array) ? dict["values"] : undefined;
                        if ((typeof (values_2) !== "undefined" && values_2 != null)) {
                            arr = values_2;
                            operatorsOfJSONArrayObject_57.forEach_58(arr, (function (item, index) {
                                if (typeof (item) === 'string') /* union case for string */ {
                                    var oo = item;
                                    obj.values.push(oo);
                                }
                                ;
                            }));
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        e_1 = _a.sent();
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/, obj];
                }
            });
        });
    };
    ;
    return CmdParams;
}());
exports.CmdParams = CmdParams;
var test_cmdparams = /** @class */ (function () {
    function test_cmdparams() {
    }
    test_cmdparams.prototype.run = function () {
        var prms = new CmdParams();
        prms.collect();
        console.log("--- params ----");
        var pNames = Object.keys(prms.params);
        for (var i = 0; i < pNames.length; i++) {
            var v = pNames[i];
            console.log((v + " = ") + ((prms.params[v])));
        }
        ;
        console.log("--- flags ----");
        var flagNames = Object.keys(prms.flags);
        for (var i_1 = 0; i_1 < flagNames.length; i_1++) {
            var v_1 = flagNames[i_1];
            console.log(v_1);
        }
        ;
        console.log("--- values ----");
        for (var i_2 = 0; i_2 < prms.values.length; i_2++) {
            var v_2 = prms.values[i_2];
            console.log(v_2);
        }
        ;
    };
    ;
    return test_cmdparams;
}());
exports.test_cmdparams = test_cmdparams;
var InputFSFolder = /** @class */ (function () {
    function InputFSFolder() {
        this.name = "";
        this.data = "";
        this.is_folder = true;
        this.base64bin = false;
        this.folders = [];
        this.files = [];
    }
    InputFSFolder.prototype.forTree = function (cb) {
        cb(this);
        operatorsOf.forEach_2(this.folders, (function (item, index) {
            item.forTree(cb);
        }));
    };
    ;
    InputFSFolder.prototype.toDictionary = function () {
        var res = {};
        try {
            res["name"] = this.name;
            res["data"] = this.data;
            res["is_folder"] = this.is_folder;
            res["base64bin"] = this.base64bin;
            var values = [];
            for (var i = 0; i < this.folders.length; i++) {
                var item = this.folders[i];
                var obj = item.toDictionary();
                values.push(obj);
            }
            ;
            res["folders"] = values;
            var values_1 = [];
            for (var i_1 = 0; i_1 < this.files.length; i_1++) {
                var item_1 = this.files[i_1];
                var obj_1 = item_1.toDictionary();
                values_1.push(obj_1);
            }
            ;
            res["files"] = values_1;
        }
        catch (e) {
        }
        return res;
    };
    ;
    // typescript static 
    InputFSFolder.fromDictionary = function (dict) {
        return __awaiter(this, void 0, void 0, function () {
            var obj, v, v_1, v_2, v_3, values, arr, values_1, arr_1, e_2;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        obj = new InputFSFolder();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 6, , 7]);
                        v = (typeof (dict["name"]) != "string") ? undefined : dict["name"];
                        if ((typeof (v) !== "undefined" && v != null)) {
                            obj.name = v;
                        }
                        v_1 = (typeof (dict["data"]) != "string") ? undefined : dict["data"];
                        if ((typeof (v_1) !== "undefined" && v_1 != null)) {
                            obj.data = v_1;
                        }
                        v_2 = typeof (dict["is_folder"]) === "undefined" ? undefined : (dict["is_folder"]);
                        if ((typeof (v_2) !== "undefined" && v_2 != null)) {
                            obj.is_folder = v_2;
                        }
                        v_3 = typeof (dict["base64bin"]) === "undefined" ? undefined : (dict["base64bin"]);
                        if ((typeof (v_3) !== "undefined" && v_3 != null)) {
                            obj.base64bin = v_3;
                        }
                        values = (dict["folders"] instanceof Array) ? dict["folders"] : undefined;
                        if (!(typeof (values) !== "undefined" && values != null)) return [3 /*break*/, 3];
                        arr = values;
                        return [4 /*yield*/, operatorsOf_57.forEach_58(arr, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                var oo, newObj;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!(item instanceof Object)) return [3 /*break*/, 2];
                                            oo = item;
                                            return [4 /*yield*/, InputFSFolder.fromDictionary(oo)];
                                        case 1:
                                            newObj = _a.sent();
                                            obj.folders.push(newObj);
                                            _a.label = 2;
                                        case 2:
                                            ;
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        values_1 = (dict["files"] instanceof Array) ? dict["files"] : undefined;
                        if (!(typeof (values_1) !== "undefined" && values_1 != null)) return [3 /*break*/, 5];
                        arr_1 = values_1;
                        return [4 /*yield*/, operatorsOf_57.forEach_58(arr_1, (function (item, index) {
                                if (item instanceof Object) /* union case */ {
                                    var oo_1 = item;
                                    var newObj_1 = InputFSFile.fromDictionary(oo_1);
                                    obj.files.push(newObj_1);
                                }
                                ;
                            }))];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        e_2 = _a.sent();
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/, obj];
                }
            });
        });
    };
    ;
    return InputFSFolder;
}());
exports.InputFSFolder = InputFSFolder;
var InputFSFile = /** @class */ (function () {
    function InputFSFile() {
        this.name = "";
        this.data = "";
        this.is_folder = false;
        this.base64bin = false;
    }
    InputFSFile.prototype.toDictionary = function () {
        var res = {};
        try {
            res["name"] = this.name;
            res["data"] = this.data;
            res["is_folder"] = this.is_folder;
            res["base64bin"] = this.base64bin;
        }
        catch (e) {
        }
        return res;
    };
    ;
    // typescript static 
    InputFSFile.fromDictionary = function (dict) {
        var obj = new InputFSFile();
        try {
            var v = (typeof (dict["name"]) != "string") ? undefined : dict["name"];
            if ((typeof (v) !== "undefined" && v != null)) {
                obj.name = v;
            }
            var v_1 = (typeof (dict["data"]) != "string") ? undefined : dict["data"];
            if ((typeof (v_1) !== "undefined" && v_1 != null)) {
                obj.data = v_1;
            }
            var v_2 = typeof (dict["is_folder"]) === "undefined" ? undefined : (dict["is_folder"]);
            if ((typeof (v_2) !== "undefined" && v_2 != null)) {
                obj.is_folder = v_2;
            }
            var v_3 = typeof (dict["base64bin"]) === "undefined" ? undefined : (dict["base64bin"]);
            if ((typeof (v_3) !== "undefined" && v_3 != null)) {
                obj.base64bin = v_3;
            }
        }
        catch (e) {
        }
        return obj;
    };
    ;
    return InputFSFile;
}());
exports.InputFSFile = InputFSFile;
var InputEnv = /** @class */ (function () {
    function InputEnv() {
        this.use_real = false;
        this.envVars = {};
    }
    InputEnv.prototype.setEnv = function (name, value) {
        this.envVars[name] = value;
    };
    ;
    InputEnv.prototype.toDictionary = function () {
        var res = {};
        try {
            res["use_real"] = this.use_real;
            if ((typeof (this.filesystem) !== "undefined" && this.filesystem != null)) {
                res["filesystem"] = ((this.filesystem)).toDictionary();
            }
            var values = {};
            var keyList = Object.keys(this.envVars);
            for (var index = 0; index < keyList.length; index++) {
                var keyname = keyList[index];
                var item = (this.envVars[keyname]);
                values[keyname] = item;
            }
            ;
            res["envVars"] = values;
            if ((typeof (this.commandLine) !== "undefined" && this.commandLine != null)) {
                res["commandLine"] = ((this.commandLine)).toDictionary();
            }
        }
        catch (e) {
        }
        return res;
    };
    ;
    // typescript static 
    InputEnv.fromDictionary = function (dict) {
        return __awaiter(this, void 0, void 0, function () {
            var obj, v, theValue, newObj, values, theObjenvVars_1, obj_keys, theValue_1, newObj_1, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        obj = new InputEnv();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 8, , 9]);
                        v = typeof (dict["use_real"]) === "undefined" ? undefined : (dict["use_real"]);
                        if ((typeof (v) !== "undefined" && v != null)) {
                            obj.use_real = v;
                        }
                        theValue = (dict["filesystem"] instanceof Object) ? dict["filesystem"] : undefined;
                        if (!(typeof (theValue) !== "undefined" && theValue != null)) return [3 /*break*/, 3];
                        return [4 /*yield*/, InputFSFolder.fromDictionary((theValue))];
                    case 2:
                        newObj = _a.sent();
                        obj.filesystem = newObj;
                        _a.label = 3;
                    case 3:
                        values = (dict["envVars"] instanceof Object) ? dict["envVars"] : undefined;
                        if (!(typeof (values) !== "undefined" && values != null)) return [3 /*break*/, 5];
                        theObjenvVars_1 = values;
                        obj_keys = Object.keys(theObjenvVars_1);
                        return [4 /*yield*/, operatorsOf.forEach_12(obj_keys, (function (item, index) {
                                var v_1 = (typeof (theObjenvVars_1[item]) != "string") ? undefined : theObjenvVars_1[item];
                                if ((typeof (v_1) !== "undefined" && v_1 != null)) {
                                    obj.envVars[item] = v_1;
                                }
                            }))];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        theValue_1 = (dict["commandLine"] instanceof Object) ? dict["commandLine"] : undefined;
                        if (!(typeof (theValue_1) !== "undefined" && theValue_1 != null)) return [3 /*break*/, 7];
                        return [4 /*yield*/, CmdParams.fromDictionary((theValue_1))];
                    case 6:
                        newObj_1 = _a.sent();
                        obj.commandLine = newObj_1;
                        _a.label = 7;
                    case 7: return [3 /*break*/, 9];
                    case 8:
                        e_3 = _a.sent();
                        return [3 /*break*/, 9];
                    case 9: return [2 /*return*/, obj];
                }
            });
        });
    };
    ;
    return InputEnv;
}());
exports.InputEnv = InputEnv;
var test_input_filesystem = /** @class */ (function () {
    function test_input_filesystem() {
    }
    return test_input_filesystem;
}());
exports.test_input_filesystem = test_input_filesystem;
var RangerAppTodo = /** @class */ (function () {
    function RangerAppTodo() {
        this.description = "";
    }
    return RangerAppTodo;
}());
exports.RangerAppTodo = RangerAppTodo;
var RangerCompilerMessage = /** @class */ (function () {
    function RangerCompilerMessage() {
        this.error_level = 0; /** note: unused */
        this.code_line = 0; /** note: unused */
        this.fileName = ""; /** note: unused */
        this.description = "";
    }
    return RangerCompilerMessage;
}());
exports.RangerCompilerMessage = RangerCompilerMessage;
var RangerParamEventHandler = /** @class */ (function () {
    function RangerParamEventHandler() {
    }
    RangerParamEventHandler.prototype.callback = function (param) {
    };
    ;
    return RangerParamEventHandler;
}());
exports.RangerParamEventHandler = RangerParamEventHandler;
var RangerParamEventList = /** @class */ (function () {
    function RangerParamEventList() {
        this.list = [];
    }
    return RangerParamEventList;
}());
exports.RangerParamEventList = RangerParamEventList;
var RangerParamEventMap = /** @class */ (function () {
    function RangerParamEventMap() {
        this.events = {};
    }
    RangerParamEventMap.prototype.clearAllEvents = function () {
    };
    ;
    RangerParamEventMap.prototype.addEvent = function (name, e) {
        if (((typeof (this.events[name]) != "undefined" && this.events.hasOwnProperty(name))) == false) {
            this.events[name] = new RangerParamEventList();
        }
        var list = (this.events[name]);
        list.list.push(e);
    };
    ;
    RangerParamEventMap.prototype.fireEvent = function (name, from) {
        if ((typeof (this.events[name]) != "undefined" && this.events.hasOwnProperty(name))) {
            var list = (this.events[name]);
            for (var i = 0; i < list.list.length; i++) {
                var ev = list.list[i];
                ev.callback(from);
            }
            ;
        }
    };
    ;
    return RangerParamEventMap;
}());
exports.RangerParamEventMap = RangerParamEventMap;
var RangerAppArrayValue = /** @class */ (function () {
    function RangerAppArrayValue() {
        this.value_type = 0; /** note: unused */
        this.value_type_name = ""; /** note: unused */
        this.values = []; /** note: unused */
    }
    return RangerAppArrayValue;
}());
exports.RangerAppArrayValue = RangerAppArrayValue;
var RangerAppHashValue = /** @class */ (function () {
    function RangerAppHashValue() {
        this.value_type = 0; /** note: unused */
        this.key_type_name = ""; /** note: unused */
        this.value_type_name = ""; /** note: unused */
        this.s_values = {}; /** note: unused */
        this.i_values = {}; /** note: unused */
        this.b_values = {}; /** note: unused */
        this.d_values = {}; /** note: unused */
    }
    return RangerAppHashValue;
}());
exports.RangerAppHashValue = RangerAppHashValue;
var RangerAppValue = /** @class */ (function () {
    function RangerAppValue() {
        this.double_value = 0.0; /** note: unused */
        this.string_value = ""; /** note: unused */
        this.int_value = 0; /** note: unused */
        this.boolean_value = false; /** note: unused */
    }
    return RangerAppValue;
}());
exports.RangerAppValue = RangerAppValue;
var RangerRefForce = /** @class */ (function () {
    function RangerRefForce() {
        this.strength = 0;
        this.lifetime = 1;
    }
    return RangerRefForce;
}());
exports.RangerRefForce = RangerRefForce;
var RangerAppParamDesc = /** @class */ (function () {
    function RangerAppParamDesc() {
        this.name = "";
        this.compiledName = "";
        this.debugString = "";
        this.is_register = false;
        this.ref_cnt = 0;
        this.init_cnt = 0;
        this.set_cnt = 0;
        this.return_cnt = 0;
        this.prop_assign_cnt = 0; /** note: unused */
        this.value_type = 0;
        this.has_default = false; /** note: unused */
        this.isThis = false; /** note: unused */
        this.is_immutable = false;
        this.is_static = false; /** note: unused */
        this.ownerHistory = [];
        this.varType = 0;
        this.refType = 0;
        this.initRefType = 0;
        this.paramIndex = 0; /** note: unused */
        this.is_optional = false;
        this.is_mutating = false; /** note: unused */
        this.is_set = false; /** note: unused */
        this.is_class_variable = false;
        this.is_captured = false;
        this.params = []; /** note: unused */
        this.description = ""; /** note: unused */
        this.git_doc = "";
        this.has_events = false;
    }
    RangerAppParamDesc.prototype.addEvent = function (name, e) {
        if (this.has_events == false) {
            this.eMap = new RangerParamEventMap();
            this.has_events = true;
        }
        this.eMap.addEvent(name, e);
    };
    ;
    RangerAppParamDesc.prototype.changeStrength = function (newStrength, lifeTime, changer) {
        var entry = new RangerRefForce();
        entry.strength = newStrength;
        entry.lifetime = lifeTime;
        entry.changer = changer;
        this.ownerHistory.push(entry);
    };
    ;
    RangerAppParamDesc.prototype.isFunction = function () {
        return false;
    };
    ;
    RangerAppParamDesc.prototype.isProperty = function () {
        return true;
    };
    ;
    RangerAppParamDesc.prototype.isClass = function () {
        return false;
    };
    ;
    RangerAppParamDesc.prototype.isOperator = function () {
        return false;
    };
    ;
    RangerAppParamDesc.prototype.doesInherit = function () {
        return false;
    };
    ;
    RangerAppParamDesc.prototype.isAllocatedType = function () {
        if ((typeof (this.nameNode) !== "undefined" && this.nameNode != null)) {
            if (this.nameNode.eval_type != 0) {
                if (this.nameNode.eval_type == 6) {
                    return true;
                }
                if (this.nameNode.eval_type == 7) {
                    return true;
                }
                if ((((((this.nameNode.eval_type == 15) || (this.nameNode.eval_type == 14)) || (this.nameNode.eval_type == 4)) || (this.nameNode.eval_type == 2)) || (this.nameNode.eval_type == 5)) || (this.nameNode.eval_type == 3)) {
                    return false;
                }
                if (this.nameNode.eval_type == 13) {
                    return false;
                }
                return true;
            }
            if (this.nameNode.value_type == 11) {
                if (false == this.nameNode.isPrimitive()) {
                    return true;
                }
            }
            if (this.nameNode.value_type == 6) {
                return true;
            }
            if (this.nameNode.value_type == 7) {
                return true;
            }
        }
        return false;
    };
    ;
    RangerAppParamDesc.prototype.moveRefTo = function (nodeToMove, target, ctx) {
        var b_disable_errors = ctx.hasCompilerFlag("refcnt") == false;
        if (nodeToMove.ref_change_done) {
            return;
        }
        if (false == target.isAllocatedType()) {
            return;
        }
        if (false == this.isAllocatedType()) {
            return;
        }
        nodeToMove.ref_change_done = true;
        var other_s = target.getStrength();
        var my_s = this.getStrength();
        var my_lifetime = this.getLifetime();
        var other_lifetime = target.getLifetime();
        var a_lives = false;
        var b_lives = false;
        var tmp_var = this.nameNode.hasFlag("temp");
        if ((typeof (target.nameNode) !== "undefined" && target.nameNode != null)) {
            if (target.nameNode.hasFlag("lives")) {
                my_lifetime = 2;
                b_lives = true;
            }
        }
        if ((typeof (this.nameNode) !== "undefined" && this.nameNode != null)) {
            if (this.nameNode.hasFlag("lives")) {
                my_lifetime = 2;
                a_lives = true;
            }
        }
        if (other_s > 0) {
            if (my_s == 1) {
                var lt = my_lifetime;
                if (other_lifetime > my_lifetime) {
                    lt = other_lifetime;
                }
                this.changeStrength(0, lt, nodeToMove);
            }
            else {
                if (my_s == 0) {
                    if (tmp_var == false) {
                        if (false == b_disable_errors) {
                            ctx.addError(nodeToMove, "Can not move a weak reference to a strong target.");
                            console.log("can not move weak refs to strong target:");
                            this.debugRefChanges();
                        }
                    }
                }
                else {
                    if (false == b_disable_errors) {
                        ctx.addError(nodeToMove, "Can not move immutable reference to a strong target, evald type " + this.nameNode.eval_type_name);
                    }
                }
            }
        }
        else {
            if (a_lives || b_lives) {
            }
            else {
                if ((my_lifetime < other_lifetime) && (this.return_cnt == 0)) {
                    if (this.nameNode.hasFlag("returnvalue") == false) {
                        if (false == b_disable_errors) {
                            ctx.addError(nodeToMove, "Can not create a weak reference if target has longer lifetime than original, current lifetime == " + my_lifetime);
                        }
                    }
                }
            }
        }
    };
    ;
    RangerAppParamDesc.prototype.originalStrength = function () {
        var __len = this.ownerHistory.length;
        if (__len > 0) {
            var firstEntry = this.ownerHistory[0];
            return firstEntry.strength;
        }
        return 1;
    };
    ;
    RangerAppParamDesc.prototype.getLifetime = function () {
        var __len = this.ownerHistory.length;
        if (__len > 0) {
            var lastEntry = this.ownerHistory[(__len - 1)];
            return lastEntry.lifetime;
        }
        return 1;
    };
    ;
    RangerAppParamDesc.prototype.getStrength = function () {
        var __len = this.ownerHistory.length;
        if (__len > 0) {
            var lastEntry = this.ownerHistory[(__len - 1)];
            return lastEntry.strength;
        }
        return 1;
    };
    ;
    RangerAppParamDesc.prototype.debugRefChanges = function () {
        console.log(("variable " + this.name) + " ref history : ");
        for (var i = 0; i < this.ownerHistory.length; i++) {
            var h = this.ownerHistory[i];
            console.log(((" => change to " + h.strength) + " by ") + h.changer.getCode());
        }
        ;
    };
    ;
    RangerAppParamDesc.prototype.pointsToObject = function (ctx) {
        if ((typeof (this.nameNode) !== "undefined" && this.nameNode != null)) {
            var is_primitive = false;
            switch (this.nameNode.array_type) {
                case "string":
                    is_primitive = true;
                    break;
                case "int":
                    is_primitive = true;
                    break;
                case "boolean":
                    is_primitive = true;
                    break;
                case "double":
                    is_primitive = true;
                    break;
            }
            ;
            if (is_primitive) {
                return false;
            }
            if ((this.nameNode.value_type == 6) || (this.nameNode.value_type == 7)) {
                var is_object = true;
                switch (this.nameNode.array_type) {
                    case "string":
                        is_object = false;
                        break;
                    case "int":
                        is_object = false;
                        break;
                    case "boolean":
                        is_object = false;
                        break;
                    case "double":
                        is_object = false;
                        break;
                }
                ;
                return is_object;
            }
            if (this.nameNode.value_type == 11) {
                var is_object_1 = true;
                switch (this.nameNode.type_name) {
                    case "string":
                        is_object_1 = false;
                        break;
                    case "int":
                        is_object_1 = false;
                        break;
                    case "boolean":
                        is_object_1 = false;
                        break;
                    case "double":
                        is_object_1 = false;
                        break;
                }
                ;
                if (ctx.isEnumDefined(this.nameNode.type_name)) {
                    return false;
                }
                return is_object_1;
            }
        }
        return false;
    };
    ;
    RangerAppParamDesc.prototype.isObject = function () {
        if ((typeof (this.nameNode) !== "undefined" && this.nameNode != null)) {
            if (this.nameNode.value_type == 11) {
                if (false == this.nameNode.isPrimitive()) {
                    return true;
                }
            }
        }
        return false;
    };
    ;
    RangerAppParamDesc.prototype.isArray = function () {
        if ((typeof (this.nameNode) !== "undefined" && this.nameNode != null)) {
            if (this.nameNode.value_type == 6) {
                return true;
            }
        }
        return false;
    };
    ;
    RangerAppParamDesc.prototype.isHash = function () {
        if ((typeof (this.nameNode) !== "undefined" && this.nameNode != null)) {
            if (this.nameNode.value_type == 7) {
                return true;
            }
        }
        return false;
    };
    ;
    RangerAppParamDesc.prototype.isPrimitive = function () {
        if ((typeof (this.nameNode) !== "undefined" && this.nameNode != null)) {
            return this.nameNode.isPrimitive();
        }
        return false;
    };
    ;
    RangerAppParamDesc.prototype.getRefTypeName = function () {
        switch (this.refType) {
            case 0:
                return "NoType";
            case 1:
                return "Weak";
        }
        ;
        return "";
    };
    ;
    RangerAppParamDesc.prototype.getVarTypeName = function () {
        switch (this.refType) {
            case 0:
                return "NoType";
            case 1:
                return "This";
        }
        ;
        return "";
    };
    ;
    RangerAppParamDesc.prototype.getTypeName = function () {
        var s = this.nameNode.type_name;
        return s;
    };
    ;
    return RangerAppParamDesc;
}());
exports.RangerAppParamDesc = RangerAppParamDesc;
var RangerAppFunctionDesc = /** @class */ (function (_super) {
    __extends(RangerAppFunctionDesc, _super);
    function RangerAppFunctionDesc() {
        var _this = _super.call(this) || this;
        _this.name = "";
        _this.ref_cnt = 0;
        _this.params = [];
        _this.is_method = false; /** note: unused */
        _this.is_static = false;
        _this.is_lambda = false;
        _this.is_unsed = false;
        _this.is_called_from_main = false;
        _this.refType = 0;
        _this.call_graph_done = false; /** note: unused */
        _this.isCalling = [];
        _this.isCalledBy = [];
        _this.isUsingClasses = [];
        _this.isDirectlyUsingClasses = [];
        _this.myLambdas = [];
        return _this;
    }
    RangerAppFunctionDesc.prototype.addCallTo = function (m) {
        if ((m.isCalledBy.indexOf(this)) < 0) {
            m.isCalledBy.push(this);
            this.isCalling.push(m);
        }
    };
    ;
    RangerAppFunctionDesc.prototype.addIndirectClassUsage = function (m, ctx) {
        var _this = this;
        if ((this.isUsingClasses.indexOf(m)) < 0) {
            this.isUsingClasses.push(m);
            operatorsOf.forEach_11(m.variables, (function (item, index) {
                var nn = item.nameNode;
                if (ctx.isDefinedClass(nn.type_name)) {
                    var cc = ctx.findClass(nn.type_name);
                    _this.addIndirectClassUsage(cc, ctx);
                }
                if (ctx.isDefinedClass(nn.array_type)) {
                    var cc_1 = ctx.findClass(nn.array_type);
                    _this.addIndirectClassUsage(cc_1, ctx);
                }
            }));
        }
    };
    ;
    RangerAppFunctionDesc.prototype.addClassUsage = function (m, ctx) {
        var _this = this;
        if ((this.isUsingClasses.indexOf(m)) < 0) {
            this.isUsingClasses.push(m);
            this.isDirectlyUsingClasses.push(m);
            operatorsOf.forEach_11(m.variables, (function (item, index) {
                var nn = item.nameNode;
                if (ctx.isDefinedClass(nn.type_name)) {
                    var cc = ctx.findClass(nn.type_name);
                    _this.addIndirectClassUsage(cc, ctx);
                }
                if (ctx.isDefinedClass(nn.array_type)) {
                    var cc_1 = ctx.findClass(nn.array_type);
                    _this.addIndirectClassUsage(cc_1, ctx);
                }
            }));
        }
        else {
            if ((this.isDirectlyUsingClasses.indexOf(m)) < 0) {
                this.isDirectlyUsingClasses.push(m);
            }
        }
    };
    ;
    RangerAppFunctionDesc.prototype.forOtherVersions = function (ctx, cb) {
        return __awaiter(this, void 0, void 0, function () {
            var f, cc, root;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof (this.container_class) === "undefined") {
                            return [2 /*return*/];
                        }
                        f = this;
                        cc = f.container_class;
                        return [4 /*yield*/, operatorsOf.forEach_12(cc.extends_classes, (function (item, index) {
                                var otherClass = ctx.findClass(item);
                                if (otherClass.hasMethod(f.name)) {
                                    var m = otherClass.findMethod(f.name);
                                    cb(m);
                                }
                            }))];
                    case 1:
                        _a.sent();
                        root = ctx.getRoot();
                        return [4 /*yield*/, operatorsOf_13.forEach_14(root.definedClasses, (function (item, index) {
                                if ((item.extends_classes.indexOf(f.container_class.name)) >= 0) {
                                    if (item.hasMethod(f.name)) {
                                        var m_1 = item.findMethod(f.name);
                                        cb(m_1);
                                    }
                                }
                            }))];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerAppFunctionDesc.prototype.isFunction = function () {
        return true;
    };
    ;
    RangerAppFunctionDesc.prototype.isClass = function () {
        return false;
    };
    ;
    RangerAppFunctionDesc.prototype.isProperty = function () {
        return false;
    };
    ;
    return RangerAppFunctionDesc;
}(RangerAppParamDesc));
exports.RangerAppFunctionDesc = RangerAppFunctionDesc;
var RangerAppMethodVariants = /** @class */ (function () {
    function RangerAppMethodVariants() {
        this.name = ""; /** note: unused */
        this.variants = [];
    }
    return RangerAppMethodVariants;
}());
exports.RangerAppMethodVariants = RangerAppMethodVariants;
var RangerAppInterfaceImpl = /** @class */ (function () {
    function RangerAppInterfaceImpl() {
        this.name = ""; /** note: unused */
    }
    return RangerAppInterfaceImpl;
}());
exports.RangerAppInterfaceImpl = RangerAppInterfaceImpl;
var RangerTraitParams = /** @class */ (function () {
    function RangerTraitParams() {
        this.param_names = [];
        this.values = {};
    }
    return RangerTraitParams;
}());
exports.RangerTraitParams = RangerTraitParams;
var RangerAppClassDesc = /** @class */ (function (_super) {
    __extends(RangerAppClassDesc, _super);
    function RangerAppClassDesc() {
        var _this = _super.call(this) || this;
        _this.name = "";
        _this.is_system = false;
        _this.compiledName = "";
        _this.systemNames = {};
        _this.systemNodes = {};
        _this.is_interface = false;
        _this.is_system_union = false;
        _this.is_template = false;
        _this.is_serialized = false;
        _this.is_trait = false;
        _this.is_operator_class = false;
        _this.is_generic_instance = false;
        _this.is_union = false;
        _this.is_used_by_main = false;
        _this.is_not_used = false; /** note: unused */
        _this.variables = [];
        _this.capturedLocals = [];
        _this.methods = [];
        _this.defined_methods = {};
        _this.static_methods = [];
        _this.defined_static_methods = {};
        _this.defined_variants = [];
        _this.method_variants = {};
        _this.has_constructor = false;
        _this.has_destructor = false; /** note: unused */
        _this.extends_classes = [];
        _this.implements_interfaces = [];
        _this.consumes_traits = [];
        _this.trait_params = {};
        _this.is_union_of = [];
        _this.contr_writers = []; /** note: unused */
        _this.is_inherited = false;
        return _this;
    }
    RangerAppClassDesc.prototype.isClass = function () {
        return true;
    };
    ;
    RangerAppClassDesc.prototype.isProperty = function () {
        return false;
    };
    ;
    RangerAppClassDesc.prototype.doesInherit = function () {
        return this.is_inherited;
    };
    ;
    RangerAppClassDesc.prototype.isNormalClass = function () {
        var special = ((((this.is_operator_class || this.is_trait) || this.is_system) || this.is_generic_instance) || this.is_system_union) || this.is_union;
        return special == false;
    };
    ;
    RangerAppClassDesc.prototype.hasTrait = function (class_name, ctx) {
        var res;
        for (var i = 0; i < this.consumes_traits.length; i++) {
            var c_name = this.consumes_traits[i];
            var c = ctx.findClass(c_name);
            if (c_name == class_name) {
                res = c;
                return res;
            }
        }
        ;
        return res;
    };
    ;
    RangerAppClassDesc.prototype.isSameOrParentClass = function (class_name, ctx) {
        if (ctx.isPrimitiveType(class_name)) {
            if ((this.is_union_of.indexOf(class_name)) >= 0) {
                return true;
            }
            return false;
        }
        if (class_name == this.name) {
            return true;
        }
        if ((this.extends_classes.indexOf(class_name)) >= 0) {
            return true;
        }
        if ((this.consumes_traits.indexOf(class_name)) >= 0) {
            return true;
        }
        if ((this.implements_interfaces.indexOf(class_name)) >= 0) {
            return true;
        }
        if ((this.is_union_of.indexOf(class_name)) >= 0) {
            return true;
        }
        for (var i = 0; i < this.extends_classes.length; i++) {
            var c_name = this.extends_classes[i];
            var c = ctx.findClass(c_name);
            if (c.isSameOrParentClass(class_name, ctx)) {
                return true;
            }
        }
        ;
        for (var i_1 = 0; i_1 < this.consumes_traits.length; i_1++) {
            var c_name_1 = this.consumes_traits[i_1];
            var c_1 = ctx.findClass(c_name_1);
            if (c_1.isSameOrParentClass(class_name, ctx)) {
                return true;
            }
        }
        ;
        for (var i_2 = 0; i_2 < this.implements_interfaces.length; i_2++) {
            var i_name = this.implements_interfaces[i_2];
            var c_2 = ctx.findClass(i_name);
            if (c_2.isSameOrParentClass(class_name, ctx)) {
                return true;
            }
        }
        ;
        for (var i_3 = 0; i_3 < this.is_union_of.length; i_3++) {
            var i_name_1 = this.is_union_of[i_3];
            if (ctx.isDefinedClass(i_name_1)) {
                var c_3 = ctx.findClass(i_name_1);
                if (c_3.isSameOrParentClass(class_name, ctx)) {
                    return true;
                }
            }
            else {
            }
        }
        ;
        return false;
    };
    ;
    RangerAppClassDesc.prototype.hasOwnMethod = function (m_name) {
        if ((typeof (this.defined_methods[m_name]) != "undefined" && this.defined_methods.hasOwnProperty(m_name))) {
            return true;
        }
        return false;
    };
    ;
    RangerAppClassDesc.prototype.hasMethod = function (m_name) {
        if ((typeof (this.defined_methods[m_name]) != "undefined" && this.defined_methods.hasOwnProperty(m_name))) {
            return true;
        }
        for (var i = 0; i < this.extends_classes.length; i++) {
            var cname = this.extends_classes[i];
            var cDesc = this.ctx.findClass(cname);
            if (cDesc.hasMethod(m_name)) {
                return cDesc.hasMethod(m_name);
            }
        }
        ;
        return false;
    };
    ;
    RangerAppClassDesc.prototype.findMethod = function (f_name) {
        var res;
        var vNames = Object.keys(this.method_variants);
        for (var i = 0; i < vNames.length; i++) {
            var mname = vNames[i];
            if (mname == f_name) {
                var list = (this.method_variants[mname]);
                res = list.variants[0];
                return res;
            }
        }
        ;
        for (var i_1 = 0; i_1 < this.extends_classes.length; i_1++) {
            var cname = this.extends_classes[i_1];
            var cDesc = this.ctx.findClass(cname);
            if (cDesc.hasMethod(f_name)) {
                return cDesc.findMethod(f_name);
            }
        }
        ;
        return res;
    };
    ;
    RangerAppClassDesc.prototype.hasStaticMethod = function (m_name) {
        return (typeof (this.defined_static_methods[m_name]) != "undefined" && this.defined_static_methods.hasOwnProperty(m_name));
    };
    ;
    RangerAppClassDesc.prototype.findStaticMethod = function (f_name) {
        var e;
        for (var i = 0; i < this.static_methods.length; i++) {
            var m = this.static_methods[i];
            if (m.name == f_name) {
                e = m;
                return e;
            }
        }
        ;
        for (var i_1 = 0; i_1 < this.extends_classes.length; i_1++) {
            var cname = this.extends_classes[i_1];
            var cDesc = this.ctx.findClass(cname);
            if (cDesc.hasStaticMethod(f_name)) {
                return cDesc.findStaticMethod(f_name);
            }
        }
        ;
        return e;
    };
    ;
    RangerAppClassDesc.prototype.findVariable = function (f_name) {
        var e;
        for (var i = 0; i < this.variables.length; i++) {
            var m = this.variables[i];
            if (m.name == f_name) {
                e = m;
                return e;
            }
        }
        ;
        for (var i_1 = 0; i_1 < this.extends_classes.length; i_1++) {
            var cname = this.extends_classes[i_1];
            var cDesc = this.ctx.findClass(cname);
            return cDesc.findVariable(f_name);
        }
        ;
        return e;
    };
    ;
    RangerAppClassDesc.prototype.addParentClass = function (p_name) {
        this.extends_classes.push(p_name);
    };
    ;
    RangerAppClassDesc.prototype.createVariable = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var parser, s, vDef, p, currC, initNode, tDef, vAnn, tAnn, initNode_1, tDef_1, vAnn_1, tAnn_1, valueNode, fc, second, subCtx, e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 13, , 14]);
                        parser = ctx.getParser();
                        s = node.getVRefAt(1);
                        vDef = node.children[1];
                        p = new RangerAppParamDesc();
                        if (!vDef.has_type_annotation) return [3 /*break*/, 2];
                        return [4 /*yield*/, parser.CheckTypeAnnotationOf(vDef, ctx, wr)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (s != ctx.transformWord(s)) {
                        }
                        currC = this;
                        if (!currC.is_immutable) return [3 /*break*/, 8];
                        vDef.setFlag("weak");
                        if (!(vDef.value_type == 6)) return [3 /*break*/, 5];
                        initNode = node.newExpressionNode();
                        (initNode).push(node.newVRefNode("new"));
                        tDef = node.newVRefNode("Vector");
                        vAnn = node.newExpressionNode();
                        (vAnn).push(node.newVRefNode(vDef.array_type));
                        tDef.has_vref_annotation = true;
                        tDef.vref_annotation = vAnn;
                        (initNode).push(tDef);
                        node.children[2] = initNode;
                        vDef.value_type = 11;
                        vDef.type_name = "Vector";
                        tAnn = node.newExpressionNode();
                        (tAnn).push(node.newVRefNode(vDef.array_type));
                        vDef.has_type_annotation = true;
                        vDef.type_annotation = tAnn;
                        return [4 /*yield*/, parser.CheckTypeAnnotationOf(vDef, ctx, wr)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, parser.CheckVRefTypeAnnotationOf(tDef, ctx, wr)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        if (!(vDef.value_type == 7)) return [3 /*break*/, 8];
                        initNode_1 = node.newExpressionNode();
                        (initNode_1).push(node.newVRefNode("new"));
                        tDef_1 = node.newVRefNode("Map");
                        vAnn_1 = node.newExpressionNode();
                        (vAnn_1).push(node.newVRefNode(vDef.key_type));
                        (vAnn_1).push(node.newVRefNode(vDef.array_type));
                        tDef_1.has_vref_annotation = true;
                        tDef_1.vref_annotation = vAnn_1;
                        (initNode_1).push(tDef_1);
                        node.children[2] = initNode_1;
                        vDef.value_type = 11;
                        vDef.type_name = "Map";
                        tAnn_1 = node.newExpressionNode();
                        (tAnn_1).push(node.newVRefNode(vDef.key_type));
                        (tAnn_1).push(node.newVRefNode(vDef.array_type));
                        vDef.has_type_annotation = true;
                        vDef.type_annotation = tAnn_1;
                        return [4 /*yield*/, parser.CheckTypeAnnotationOf(vDef, ctx, wr)];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, parser.CheckVRefTypeAnnotationOf(tDef_1, ctx, wr)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        p.name = s;
                        p.value_type = vDef.value_type;
                        p.node = node;
                        p.is_class_variable = true;
                        p.varType = 8;
                        p.node = node;
                        p.nameNode = vDef;
                        vDef.hasParamDesc = true;
                        vDef.ownParamDesc = p;
                        vDef.paramDesc = p;
                        node.hasParamDesc = true;
                        node.paramDesc = p;
                        if (vDef.hasFlag("weak")) {
                            p.changeStrength(0, 2, p.nameNode);
                        }
                        else {
                            p.changeStrength(2, 2, p.nameNode);
                        }
                        if (!((node.children.length) > 2)) return [3 /*break*/, 11];
                        p.set_cnt = 1;
                        p.init_cnt = 1;
                        p.def_value = node.children[2];
                        p.is_optional = false;
                        if (p.def_value.value_type == 4) {
                            vDef.type_name = "string";
                        }
                        if (p.def_value.value_type == 3) {
                            vDef.type_name = "int";
                        }
                        if (p.def_value.value_type == 2) {
                            vDef.type_name = "double";
                        }
                        if (p.def_value.value_type == 5) {
                            vDef.type_name = "boolean";
                        }
                        valueNode = node.children[2];
                        if (!((valueNode.children.length) > 0)) return [3 /*break*/, 10];
                        fc = valueNode.getFirst();
                        if (!(fc.vref == "new")) return [3 /*break*/, 10];
                        second = valueNode.getSecond();
                        return [4 /*yield*/, parser.CheckVRefTypeAnnotationOf(second, ctx, wr)];
                    case 9:
                        _a.sent();
                        _a.label = 10;
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        p.is_optional = true;
                        if (false == ((vDef.value_type == 6) || (vDef.value_type == 7))) {
                            vDef.setFlag("optional");
                        }
                        _a.label = 12;
                    case 12:
                        currC.addVariable(p);
                        subCtx = currC.ctx;
                        subCtx.defineVariable(p.name, p);
                        p.is_class_variable = true;
                        return [3 /*break*/, 14];
                    case 13:
                        e_4 = _a.sent();
                        ctx.addError(node, "Could not add variable into class " + this.name);
                        return [3 /*break*/, 14];
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerAppClassDesc.prototype.addVariable = function (desc) {
        this.variables.push(desc);
        desc.propertyClass = this;
    };
    ;
    RangerAppClassDesc.prototype.addMethod = function (desc) {
        this.defined_methods[desc.name] = true;
        this.methods.push(desc);
        var defVs = this.method_variants[desc.name];
        if (typeof (defVs) === "undefined") {
            var new_v = new RangerAppMethodVariants();
            this.method_variants[desc.name] = new_v;
            this.defined_variants.push(desc.name);
            new_v.variants.push(desc);
        }
        else {
            var new_v2 = defVs;
            new_v2.variants.push(desc);
        }
        desc.container_class = this;
    };
    ;
    RangerAppClassDesc.prototype.addStaticMethod = function (desc) {
        this.defined_static_methods[desc.name] = true;
        this.static_methods.push(desc);
        if (desc.name == "main") {
            var nn = desc.nameNode;
            if (nn.has_vref_annotation == false) {
                var vAnn = this.node.newExpressionNode();
                nn.has_vref_annotation = true;
                nn.vref_annotation = vAnn;
            }
            nn.vref_annotation.children.push(nn.vref_annotation.newVRefNode("main"));
        }
    };
    ;
    return RangerAppClassDesc;
}(RangerAppParamDesc));
exports.RangerAppClassDesc = RangerAppClassDesc;
var RangerTypeClass = /** @class */ (function () {
    function RangerTypeClass() {
        this.name = "";
        this.compiledName = ""; /** note: unused */
        this.value_type = 0;
        this.implements_traits = []; /** note: unused */
        this.implements_interfaces = []; /** note: unused */
        this.extends_classes = []; /** note: unused */
        this.belongs_to_union = []; /** note: unused */
        this.is_empty = false;
        this.is_primitive = false;
        this.is_mutable = false; /** note: unused */
        this.is_optional = false; /** note: unused */
        this.is_union = false; /** note: unused */
        this.is_trait = false; /** note: unused */
        this.is_class = false;
        this.is_system = false;
        this.is_interface = false; /** note: unused */
        this.is_generic = false; /** note: unused */
        this.is_lambda = false;
    }
    return RangerTypeClass;
}());
exports.RangerTypeClass = RangerTypeClass;
var SourceCode = /** @class */ (function () {
    function SourceCode(code_str) {
        this.code = "";
        this.lines = [];
        this.filename = "";
        this.code = code_str;
        this.lines = code_str.split("\n");
    }
    SourceCode.prototype.getLineString = function (line_index) {
        if ((this.lines.length) > line_index) {
            return this.lines[line_index];
        }
        return "";
    };
    ;
    SourceCode.prototype.getLine = function (sp) {
        var cnt = 0;
        for (var i = 0; i < this.lines.length; i++) {
            var str = this.lines[i];
            cnt = cnt + ((str.length) + 1);
            if (cnt > sp) {
                return i;
            }
        }
        ;
        return -1;
    };
    ;
    SourceCode.prototype.getColumnStr = function (sp) {
        var cnt = 0;
        var last_col = 0;
        for (var i = 0; i < this.lines.length; i++) {
            var str = this.lines[i];
            cnt = cnt + ((str.length) + 1);
            if (cnt > sp) {
                var ll = sp - last_col;
                var ss = "";
                while (ll > 0) {
                    ss = ss + " ";
                    ll = ll - 1;
                }
                ;
                return ss;
            }
            last_col = cnt;
        }
        ;
        return "";
    };
    ;
    SourceCode.prototype.getColumn = function (sp) {
        var cnt = 0;
        var last_col = 0;
        for (var i = 0; i < this.lines.length; i++) {
            var str = this.lines[i];
            cnt = cnt + ((str.length) + 1);
            if (cnt > sp) {
                return sp - last_col;
            }
            last_col = cnt;
        }
        ;
        return -1;
    };
    ;
    return SourceCode;
}());
exports.SourceCode = SourceCode;
var CodeNodeLiteral = /** @class */ (function () {
    function CodeNodeLiteral() {
        this.expression = false;
        this.vref = "";
        this.is_block_node = false;
        this.type_name = "";
        this.key_type = "";
        this.array_type = "";
        this.ns = [];
        this.has_vref_annotation = false;
        this.has_type_annotation = false;
        this.parsed_type = 0;
        this.value_type = 0;
        this.double_value = 0.0;
        this.string_value = "";
        this.int_value = 0;
        this.boolean_value = false;
        this.props = {};
        this.prop_keys = [];
        this.comments = [];
        this.children = [];
        this.attrs = [];
    }
    CodeNodeLiteral.prototype.toDictionary = function () {
        var res = {};
        try {
            res["expression"] = this.expression;
            res["vref"] = this.vref;
            res["is_block_node"] = this.is_block_node;
            res["type_name"] = this.type_name;
            res["key_type"] = this.key_type;
            res["array_type"] = this.array_type;
            var values = [];
            for (var i = 0; i < this.ns.length; i++) {
                var item = this.ns[i];
                values.push(item);
            }
            ;
            res["ns"] = values;
            res["has_vref_annotation"] = this.has_vref_annotation;
            if ((typeof (this.vref_annotation) !== "undefined" && this.vref_annotation != null)) {
                res["vref_annotation"] = ((this.vref_annotation)).toDictionary();
            }
            res["has_type_annotation"] = this.has_type_annotation;
            if ((typeof (this.type_annotation) !== "undefined" && this.type_annotation != null)) {
                res["type_annotation"] = ((this.type_annotation)).toDictionary();
            }
            res["parsed_type"] = this.parsed_type;
            res["value_type"] = this.value_type;
            res["double_value"] = this.double_value;
            res["string_value"] = this.string_value;
            res["int_value"] = this.int_value;
            res["boolean_value"] = this.boolean_value;
            if ((typeof (this.expression_value) !== "undefined" && this.expression_value != null)) {
                res["expression_value"] = ((this.expression_value)).toDictionary();
            }
            var values_1 = {};
            var keyList = Object.keys(this.props);
            for (var index = 0; index < keyList.length; index++) {
                var keyname = keyList[index];
                var item_1 = (this.props[keyname]);
                var obj = item_1.toDictionary();
                values_1[keyname] = obj;
            }
            ;
            res["props"] = values_1;
            var values_2 = [];
            for (var i_1 = 0; i_1 < this.prop_keys.length; i_1++) {
                var item_2 = this.prop_keys[i_1];
                values_2.push(item_2);
            }
            ;
            res["prop_keys"] = values_2;
            var values_3 = [];
            for (var i_2 = 0; i_2 < this.comments.length; i_2++) {
                var item_3 = this.comments[i_2];
                var obj_1 = item_3.toDictionary();
                values_3.push(obj_1);
            }
            ;
            res["comments"] = values_3;
            var values_4 = [];
            for (var i_3 = 0; i_3 < this.children.length; i_3++) {
                var item_4 = this.children[i_3];
                var obj_2 = item_4.toDictionary();
                values_4.push(obj_2);
            }
            ;
            res["children"] = values_4;
            var values_5 = [];
            for (var i_4 = 0; i_4 < this.attrs.length; i_4++) {
                var item_5 = this.attrs[i_4];
                var obj_3 = item_5.toDictionary();
                values_5.push(obj_3);
            }
            ;
            res["attrs"] = values_5;
        }
        catch (e) {
        }
        return res;
    };
    ;
    // typescript static 
    CodeNodeLiteral.fromDictionary = function (dict) {
        return __awaiter(this, void 0, void 0, function () {
            var obj, v, v_1, v_2, v_3, v_4, v_5, values, arr, v_6, theValue, newObj, v_7, theValue_1, newObj_1, v_8, v_9, v_10, v_11, theValue_2, newObj_2, values_1, theObjprops_1, obj_keys, values_2, arr_1, values_3, arr_2, values_4, arr_3, values_5, arr_4, e_5;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        obj = new CodeNodeLiteral();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 20, , 21]);
                        v = typeof (dict["expression"]) === "undefined" ? undefined : (dict["expression"]);
                        if ((typeof (v) !== "undefined" && v != null)) {
                            obj.expression = v;
                        }
                        v_1 = (typeof (dict["vref"]) != "string") ? undefined : dict["vref"];
                        if ((typeof (v_1) !== "undefined" && v_1 != null)) {
                            obj.vref = v_1;
                        }
                        v_2 = typeof (dict["is_block_node"]) === "undefined" ? undefined : (dict["is_block_node"]);
                        if ((typeof (v_2) !== "undefined" && v_2 != null)) {
                            obj.is_block_node = v_2;
                        }
                        v_3 = (typeof (dict["type_name"]) != "string") ? undefined : dict["type_name"];
                        if ((typeof (v_3) !== "undefined" && v_3 != null)) {
                            obj.type_name = v_3;
                        }
                        v_4 = (typeof (dict["key_type"]) != "string") ? undefined : dict["key_type"];
                        if ((typeof (v_4) !== "undefined" && v_4 != null)) {
                            obj.key_type = v_4;
                        }
                        v_5 = (typeof (dict["array_type"]) != "string") ? undefined : dict["array_type"];
                        if ((typeof (v_5) !== "undefined" && v_5 != null)) {
                            obj.array_type = v_5;
                        }
                        values = (dict["ns"] instanceof Array) ? dict["ns"] : undefined;
                        if (!(typeof (values) !== "undefined" && values != null)) return [3 /*break*/, 3];
                        arr = values;
                        return [4 /*yield*/, operatorsOf_57.forEach_58(arr, (function (item, index) {
                                if (typeof (item) === 'string') /* union case for string */ {
                                    var oo = item;
                                    obj.ns.push(oo);
                                }
                                ;
                            }))];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        v_6 = typeof (dict["has_vref_annotation"]) === "undefined" ? undefined : (dict["has_vref_annotation"]);
                        if ((typeof (v_6) !== "undefined" && v_6 != null)) {
                            obj.has_vref_annotation = v_6;
                        }
                        theValue = (dict["vref_annotation"] instanceof Object) ? dict["vref_annotation"] : undefined;
                        if (!(typeof (theValue) !== "undefined" && theValue != null)) return [3 /*break*/, 5];
                        return [4 /*yield*/, CodeNodeLiteral.fromDictionary((theValue))];
                    case 4:
                        newObj = _a.sent();
                        obj.vref_annotation = newObj;
                        _a.label = 5;
                    case 5:
                        v_7 = typeof (dict["has_type_annotation"]) === "undefined" ? undefined : (dict["has_type_annotation"]);
                        if ((typeof (v_7) !== "undefined" && v_7 != null)) {
                            obj.has_type_annotation = v_7;
                        }
                        theValue_1 = (dict["type_annotation"] instanceof Object) ? dict["type_annotation"] : undefined;
                        if (!(typeof (theValue_1) !== "undefined" && theValue_1 != null)) return [3 /*break*/, 7];
                        return [4 /*yield*/, CodeNodeLiteral.fromDictionary((theValue_1))];
                    case 6:
                        newObj_1 = _a.sent();
                        obj.type_annotation = newObj_1;
                        _a.label = 7;
                    case 7:
                        v_8 = isNaN(parseFloat(dict["double_value"])) ? undefined : parseFloat(dict["double_value"]);
                        if ((typeof (v_8) !== "undefined" && v_8 != null)) {
                            obj.double_value = v_8;
                        }
                        v_9 = (typeof (dict["string_value"]) != "string") ? undefined : dict["string_value"];
                        if ((typeof (v_9) !== "undefined" && v_9 != null)) {
                            obj.string_value = v_9;
                        }
                        v_10 = isNaN(parseInt(dict["int_value"])) ? undefined : parseInt(dict["int_value"]);
                        if ((typeof (v_10) !== "undefined" && v_10 != null)) {
                            obj.int_value = v_10;
                        }
                        v_11 = typeof (dict["boolean_value"]) === "undefined" ? undefined : (dict["boolean_value"]);
                        if ((typeof (v_11) !== "undefined" && v_11 != null)) {
                            obj.boolean_value = v_11;
                        }
                        theValue_2 = (dict["expression_value"] instanceof Object) ? dict["expression_value"] : undefined;
                        if (!(typeof (theValue_2) !== "undefined" && theValue_2 != null)) return [3 /*break*/, 9];
                        return [4 /*yield*/, CodeNodeLiteral.fromDictionary((theValue_2))];
                    case 8:
                        newObj_2 = _a.sent();
                        obj.expression_value = newObj_2;
                        _a.label = 9;
                    case 9:
                        values_1 = (dict["props"] instanceof Object) ? dict["props"] : undefined;
                        if (!(typeof (values_1) !== "undefined" && values_1 != null)) return [3 /*break*/, 11];
                        theObjprops_1 = values_1;
                        obj_keys = Object.keys(theObjprops_1);
                        return [4 /*yield*/, operatorsOf.forEach_12(obj_keys, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                var theValue_3, newObj_3;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            theValue_3 = (theObjprops_1[item] instanceof Object) ? theObjprops_1[item] : undefined;
                                            if (!(typeof (theValue_3) !== "undefined" && theValue_3 != null)) return [3 /*break*/, 2];
                                            return [4 /*yield*/, CodeNodeLiteral.fromDictionary((theValue_3))];
                                        case 1:
                                            newObj_3 = _a.sent();
                                            obj.props[item] = newObj_3;
                                            _a.label = 2;
                                        case 2: return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 10:
                        _a.sent();
                        _a.label = 11;
                    case 11:
                        values_2 = (dict["prop_keys"] instanceof Array) ? dict["prop_keys"] : undefined;
                        if (!(typeof (values_2) !== "undefined" && values_2 != null)) return [3 /*break*/, 13];
                        arr_1 = values_2;
                        return [4 /*yield*/, operatorsOf_57.forEach_58(arr_1, (function (item, index) {
                                if (typeof (item) === 'string') /* union case for string */ {
                                    var oo_1 = item;
                                    obj.prop_keys.push(oo_1);
                                }
                                ;
                            }))];
                    case 12:
                        _a.sent();
                        _a.label = 13;
                    case 13:
                        values_3 = (dict["comments"] instanceof Array) ? dict["comments"] : undefined;
                        if (!(typeof (values_3) !== "undefined" && values_3 != null)) return [3 /*break*/, 15];
                        arr_2 = values_3;
                        return [4 /*yield*/, operatorsOf_57.forEach_58(arr_2, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                var oo_2, newObj_4;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!(item instanceof Object)) return [3 /*break*/, 2];
                                            oo_2 = item;
                                            return [4 /*yield*/, CodeNodeLiteral.fromDictionary(oo_2)];
                                        case 1:
                                            newObj_4 = _a.sent();
                                            obj.comments.push(newObj_4);
                                            _a.label = 2;
                                        case 2:
                                            ;
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 14:
                        _a.sent();
                        _a.label = 15;
                    case 15:
                        values_4 = (dict["children"] instanceof Array) ? dict["children"] : undefined;
                        if (!(typeof (values_4) !== "undefined" && values_4 != null)) return [3 /*break*/, 17];
                        arr_3 = values_4;
                        return [4 /*yield*/, operatorsOf_57.forEach_58(arr_3, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                var oo_3, newObj_5;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!(item instanceof Object)) return [3 /*break*/, 2];
                                            oo_3 = item;
                                            return [4 /*yield*/, CodeNodeLiteral.fromDictionary(oo_3)];
                                        case 1:
                                            newObj_5 = _a.sent();
                                            obj.children.push(newObj_5);
                                            _a.label = 2;
                                        case 2:
                                            ;
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 16:
                        _a.sent();
                        _a.label = 17;
                    case 17:
                        values_5 = (dict["attrs"] instanceof Array) ? dict["attrs"] : undefined;
                        if (!(typeof (values_5) !== "undefined" && values_5 != null)) return [3 /*break*/, 19];
                        arr_4 = values_5;
                        return [4 /*yield*/, operatorsOf_57.forEach_58(arr_4, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                var oo_4, newObj_6;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!(item instanceof Object)) return [3 /*break*/, 2];
                                            oo_4 = item;
                                            return [4 /*yield*/, CodeNodeLiteral.fromDictionary(oo_4)];
                                        case 1:
                                            newObj_6 = _a.sent();
                                            obj.attrs.push(newObj_6);
                                            _a.label = 2;
                                        case 2:
                                            ;
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 18:
                        _a.sent();
                        _a.label = 19;
                    case 19: return [3 /*break*/, 21];
                    case 20:
                        e_5 = _a.sent();
                        return [3 /*break*/, 21];
                    case 21: return [2 /*return*/, obj];
                }
            });
        });
    };
    ;
    return CodeNodeLiteral;
}());
exports.CodeNodeLiteral = CodeNodeLiteral;
var CodeNode = /** @class */ (function () {
    function CodeNode(source, start, end) {
        this.sp = 0;
        this.ep = 0;
        this.row = 0;
        this.col = 0; /** note: unused */
        this.has_operator = false;
        this.disabled_node = false;
        this.op_index = 0;
        this.is_array_literal = false;
        this.is_system_class = false;
        this.is_plugin = false;
        this.is_direct_method_call = false;
        this.mutable_def = false;
        this.expression = false;
        this.vref = "";
        this.is_block_node = false;
        this.infix_operator = false;
        this.infix_subnode = false;
        this.has_lambda = false;
        this.has_lambda_call = false;
        this.has_call = false;
        this.operator_pred = 0;
        this.to_the_right = false;
        this.type_type = "";
        this.type_name = "";
        this.key_type = "";
        this.array_type = "";
        this.ns = [];
        this.has_vref_annotation = false;
        this.has_type_annotation = false;
        this.parsed_type = 0;
        this.value_type = 0;
        this.ref_type = 0;
        this.ref_need_assign = 0; /** note: unused */
        this.double_value = 0.0;
        this.string_value = "";
        this.int_value = 0;
        this.boolean_value = false;
        this.props = {};
        this.prop_keys = [];
        this.comments = [];
        this.children = [];
        this.attrs = [];
        this.appGUID = "";
        this.register_name = "";
        this.register_expressions = [];
        this.after_expression = []; /** note: unused */
        this.nsp = [];
        this.eval_type = 0;
        this.eval_type_name = "";
        this.eval_key_type = "";
        this.eval_array_type = "";
        this.flow_done = false;
        this.ref_change_done = false;
        this.didReturnAtIndex = -1;
        this.hasVarDef = false;
        this.hasClassDescription = false;
        this.hasNewOper = false;
        this.hasFnCall = false;
        this.hasParamDesc = false;
        this.is_part_of_chain = false;
        this.methodChain = [];
        this.register_set = false;
        this.did_walk = false; /** note: unused */
        this.reg_compiled_name = "";
        this.tag = "";
        this.matched_type = "";
        this.sp = start;
        this.ep = end;
        this.code = source;
    }
    CodeNode.prototype.childCnt = function () {
        return this.children.length;
    };
    ;
    CodeNode.prototype.getChild = function (index) {
        var res;
        if ((index >= 0) && ((this.children.length) > index)) {
            res = this.children[index];
        }
        return res;
    };
    ;
    CodeNode.prototype.chlen = function () {
        return this.children.length;
    };
    ;
    CodeNode.prototype.forTree = function (callback) {
        return __awaiter(this, void 0, void 0, function () {
            var i, ch;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < this.children.length)) return [3 /*break*/, 5];
                        ch = this.children[i];
                        return [4 /*yield*/, callback(ch, i)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, ch.forTree(callback)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 1];
                    case 5:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    CodeNode.prototype.parallelTree = function (otherTree, callback) {
        var left_cnt = this.children.length;
        var right_cnt = otherTree.children.length;
        var cnt = (left_cnt < right_cnt) ? right_cnt : left_cnt;
        var i = 0;
        while (i < cnt) {
            var left = void 0;
            var right = void 0;
            if (i < left_cnt) {
                left = this.children[i];
            }
            if (i < right_cnt) {
                right = otherTree.children[i];
            }
            callback(left, right, i);
            if (((typeof (left) !== "undefined" && left != null)) && ((typeof (right) !== "undefined" && right != null))) {
                if ((left.children.length) > 0) {
                    left.parallelTree(right, callback);
                }
            }
            i = i + 1;
        }
        ;
    };
    ;
    CodeNode.prototype.walkTreeUntil = function (callback) {
        for (var i = 0; i < this.children.length; i++) {
            var ch = this.children[i];
            if (callback(ch, i)) {
                ch.walkTreeUntil(callback);
            }
        }
        ;
    };
    ;
    CodeNode.prototype.getParsedString = function () {
        return this.code.code.substring(this.sp, this.ep);
    };
    ;
    CodeNode.prototype.getFilename = function () {
        return this.code.filename;
    };
    ;
    CodeNode.prototype.getFlag = function (flagName) {
        var res;
        if (false == this.has_vref_annotation) {
            return res;
        }
        for (var i = 0; i < this.vref_annotation.children.length; i++) {
            var ch = this.vref_annotation.children[i];
            if (ch.vref == flagName) {
                res = ch;
                return res;
            }
        }
        ;
        return res;
    };
    ;
    CodeNode.prototype.hasFlag = function (flagName) {
        if (false == this.has_vref_annotation) {
            return false;
        }
        for (var i = 0; i < this.vref_annotation.children.length; i++) {
            var ch = this.vref_annotation.children[i];
            if (ch.vref == flagName) {
                return true;
            }
        }
        ;
        return false;
    };
    ;
    CodeNode.prototype.setFlag = function (flagName) {
        if (false == this.has_vref_annotation) {
            this.vref_annotation = new CodeNode(this.code, this.sp, this.ep);
        }
        if (this.hasFlag(flagName)) {
            return;
        }
        var flag = new CodeNode(this.code, this.sp, this.ep);
        flag.vref = flagName;
        flag.value_type = 11;
        flag.parsed_type = flag.value_type;
        this.vref_annotation.children.push(flag);
        this.has_vref_annotation = true;
    };
    ;
    CodeNode.prototype.getTypeInformationString = function () {
        var s = "";
        if ((this.vref.length) > 0) {
            s = ((s + "<vref:") + this.vref) + ">";
        }
        else {
            s = s + "<no.vref>";
        }
        if ((this.type_name.length) > 0) {
            s = ((s + "<type_name:") + this.type_name) + ">";
        }
        else {
            s = s + "<no.type_name>";
        }
        if ((this.array_type.length) > 0) {
            s = ((s + "<array_type:") + this.array_type) + ">";
        }
        else {
            s = s + "<no.array_type>";
        }
        if ((this.key_type.length) > 0) {
            s = ((s + "<key_type:") + this.key_type) + ">";
        }
        else {
            s = s + "<no.key_type>";
        }
        switch (this.value_type) {
            case 5:
                s = s + "<value_type=Boolean>";
                break;
            case 4:
                s = s + "<value_type=String>";
                break;
        }
        ;
        return s;
    };
    ;
    CodeNode.prototype.getLine = function () {
        return this.code.getLine(this.sp);
    };
    ;
    CodeNode.prototype.getLineString = function (line_index) {
        return this.code.getLineString(line_index);
    };
    ;
    CodeNode.prototype.getColStartString = function () {
        return this.code.getColumnStr(this.sp);
    };
    ;
    CodeNode.prototype.getLineAsString = function () {
        var idx = this.getLine();
        var line_name_idx = idx + 1;
        return (((this.getFilename() + ", line ") + line_name_idx) + " : ") + this.code.getLineString(idx);
    };
    ;
    CodeNode.prototype.getSource = function () {
        if (this.ep > this.sp) {
            var start = this.sp;
            var end = this.ep;
            return this.code.code.substring(start, end);
        }
        return "";
    };
    ;
    CodeNode.prototype.getPositionalString = function () {
        if ((this.ep > this.sp) && ((this.ep - this.sp) < 50)) {
            var start = this.sp;
            var end = this.ep;
            start = start - 100;
            end = end + 50;
            if (start < 0) {
                start = 0;
            }
            if (end >= (this.code.code.length)) {
                end = (this.code.code.length) - 1;
            }
            return this.code.code.substring(start, end);
        }
        return "";
    };
    ;
    CodeNode.prototype.isPrimitive = function () {
        switch (this.value_type) {
            case 2:
                return true;
            case 4:
                return true;
            case 3:
                return true;
            case 5:
                return true;
            case 14:
                return true;
            case 15:
                return true;
            case 13:
                return true;
        }
        ;
        return false;
    };
    ;
    CodeNode.prototype.getFirst = function () {
        return this.children[0];
    };
    ;
    CodeNode.prototype.getSecond = function () {
        return this.children[1];
    };
    ;
    CodeNode.prototype.getThird = function () {
        return this.children[2];
    };
    ;
    CodeNode.prototype.isSecondExpr = function () {
        if ((this.children.length) > 1) {
            var second = this.children[1];
            if (second.expression) {
                return true;
            }
        }
        return false;
    };
    ;
    CodeNode.prototype.getOperator = function () {
        var s = "";
        if ((this.children.length) > 0) {
            var fc = this.children[0];
            if (fc.value_type == 11) {
                return fc.vref;
            }
        }
        return s;
    };
    ;
    CodeNode.prototype.getVRefAt = function (idx) {
        var s = "";
        if ((this.children.length) > idx) {
            var fc = this.children[idx];
            return fc.vref;
        }
        return s;
    };
    ;
    CodeNode.prototype.getStringAt = function (idx) {
        var s = "";
        if ((this.children.length) > idx) {
            var fc = this.children[idx];
            if (fc.value_type == 4) {
                return fc.string_value;
            }
        }
        return s;
    };
    ;
    CodeNode.prototype.hasExpressionProperty = function (name) {
        var ann = this.props[name];
        if ((typeof (ann) !== "undefined" && ann != null)) {
            return ann.expression;
        }
        return false;
    };
    ;
    CodeNode.prototype.getExpressionProperty = function (name) {
        var ann = this.props[name];
        if ((typeof (ann) !== "undefined" && ann != null)) {
            return ann;
        }
        return ann;
    };
    ;
    CodeNode.prototype.hasIntProperty = function (name) {
        var ann = this.props[name];
        if ((typeof (ann) !== "undefined" && ann != null)) {
            var fc = ann.children[0];
            if (fc.value_type == 3) {
                return true;
            }
        }
        return false;
    };
    ;
    CodeNode.prototype.getIntProperty = function (name) {
        var ann = this.props[name];
        if ((typeof (ann) !== "undefined" && ann != null)) {
            var fc = ann.children[0];
            if (fc.value_type == 3) {
                return fc.int_value;
            }
        }
        return 0;
    };
    ;
    CodeNode.prototype.hasDoubleProperty = function (name) {
        var ann = this.props[name];
        if ((typeof (ann) !== "undefined" && ann != null)) {
            if (ann.value_type == 2) {
                return true;
            }
        }
        return false;
    };
    ;
    CodeNode.prototype.getDoubleProperty = function (name) {
        var ann = this.props[name];
        if ((typeof (ann) !== "undefined" && ann != null)) {
            if (ann.value_type == 2) {
                return ann.double_value;
            }
        }
        return 0.0;
    };
    ;
    CodeNode.prototype.setStringProperty = function (name, value) {
        this.props[name] = CodeNode.newStr(value);
    };
    ;
    CodeNode.prototype.hasStringProperty = function (name) {
        if (false == ((typeof (this.props[name]) != "undefined" && this.props.hasOwnProperty(name)))) {
            return false;
        }
        var ann = this.props[name];
        if ((typeof (ann) !== "undefined" && ann != null)) {
            if (ann.value_type == 4) {
                return true;
            }
        }
        return false;
    };
    ;
    CodeNode.prototype.getStringProperty = function (name) {
        var ann = this.props[name];
        if ((typeof (ann) !== "undefined" && ann != null)) {
            if (ann.value_type == 4) {
                return ann.string_value;
            }
        }
        return "";
    };
    ;
    CodeNode.prototype.hasBooleanProperty = function (name) {
        var ann = this.props[name];
        if ((typeof (ann) !== "undefined" && ann != null)) {
            if (ann.value_type == 5) {
                return true;
            }
        }
        return false;
    };
    ;
    CodeNode.prototype.getBooleanProperty = function (name) {
        var ann = this.props[name];
        if ((typeof (ann) !== "undefined" && ann != null)) {
            if (ann.value_type == 5) {
                return ann.boolean_value;
            }
        }
        return false;
    };
    ;
    CodeNode.prototype.isFirstTypeVref = function (vrefName) {
        if ((this.children.length) > 0) {
            var fc = this.children[0];
            if (fc.value_type == 11) {
                return true;
            }
        }
        return false;
    };
    ;
    CodeNode.prototype.isFirstVref = function (vrefName) {
        if ((this.children.length) > 0) {
            var fc = this.children[0];
            if (fc.vref == vrefName) {
                return true;
            }
        }
        return false;
    };
    ;
    CodeNode.prototype.getString = function () {
        return this.code.code.substring(this.sp, this.ep);
    };
    ;
    CodeNode.prototype.walk = function () {
        switch (this.value_type) {
            case 2:
                console.log("Double : " + this.double_value);
                break;
            case 4:
                console.log("String : " + this.string_value);
                break;
        }
        ;
        if (this.expression) {
            console.log("(");
        }
        else {
            console.log(this.code.code.substring(this.sp, this.ep));
        }
        for (var i = 0; i < this.children.length; i++) {
            var item = this.children[i];
            item.walk();
        }
        ;
        if (this.expression) {
            console.log(")");
        }
    };
    ;
    CodeNode.prototype.isParsedAsPrimitive = function () {
        return TTypes.isPrimitive(this.parsed_type);
    };
    ;
    CodeNode.prototype.isPrimitiveType = function () {
        return TTypes.isPrimitive(TTypes.nameToValue(this.type_name));
    };
    ;
    CodeNode.prototype.isAPrimitiveType = function () {
        return TTypes.isPrimitive(TTypes.nameToValue(this.array_type));
    };
    ;
    CodeNode.prototype.writeCode = function (wr) {
        switch (this.value_type) {
            case 2:
                wr.out((this.double_value.toString()), false);
                break;
            case 4:
                wr.out(((String.fromCharCode(34)) + this.string_value) + (String.fromCharCode(34)), false);
                break;
            case 3:
                wr.out("" + this.int_value, false);
                break;
            case 5:
                if (this.boolean_value) {
                    wr.out("true", false);
                }
                else {
                    wr.out("false", false);
                }
                break;
            case 11:
                wr.out(this.vref, false);
                if ((this.type_name.length) > 0) {
                    wr.out(":" + this.type_name, false);
                }
                break;
            case 7:
                wr.out(this.vref, false);
                wr.out((((":[" + this.key_type) + ":") + this.array_type) + "]", false);
                break;
            case 6:
                wr.out(this.vref, false);
                wr.out((":[" + this.array_type) + "]", false);
                break;
            case 17:
                wr.out("(fn--> ", false);
                for (var i = 0; i < this.children.length; i++) {
                    var ch = this.children[i];
                    ch.writeCode(wr);
                }
                ;
                wr.out(")", false);
                break;
            default:
                if (this.expression) {
                    wr.out("(", false);
                    for (var i_1 = 0; i_1 < this.children.length; i_1++) {
                        var ch_1 = this.children[i_1];
                        if (i_1 > 0) {
                            wr.out(" ", false);
                        }
                        ch_1.writeCode(wr);
                    }
                    ;
                    wr.out(")", false);
                }
                else {
                    if (this.is_block_node) {
                        wr.out("{", true);
                        for (var i_2 = 0; i_2 < this.children.length; i_2++) {
                            var ch_2 = this.children[i_2];
                            ch_2.writeCode(wr);
                        }
                        ;
                        wr.out("}", true);
                    }
                    else {
                        wr.out("<unknown>", false);
                        wr.out("{", true);
                        for (var i_3 = 0; i_3 < this.children.length; i_3++) {
                            var ch_3 = this.children[i_3];
                            ch_3.writeCode(wr);
                        }
                        ;
                        wr.out("}", true);
                    }
                }
                break;
        }
        ;
    };
    ;
    CodeNode.prototype.createChainTarget = function () {
        var chCnt = this.children.length;
        if (chCnt > 2) {
            var fc = this.getFirst();
            if (fc.vref == "def") {
                this.chainTarget = this.getThird();
            }
            if (fc.vref == "=") {
                this.chainTarget = this.getThird();
            }
        }
    };
    ;
    CodeNode.prototype.inferDefExpressionTypeFromValue = function (node) {
        var cn = node.children[1];
        var nodeValue = node.children[2];
        if ((typeof (cn.expression_value) !== "undefined" && cn.expression_value != null)) {
            cn.value_type = 17;
            cn.parsed_type = 17;
            cn.has_vref_annotation = true;
        }
        if (nodeValue.eval_type == 17) {
            if ((typeof (nodeValue.expression_value) !== "undefined" && nodeValue.expression_value != null)) {
                cn.expression_value = nodeValue.expression_value.copy();
            }
            else {
                if (typeof (node.expression_value) === "undefined") {
                    var copyOf = nodeValue.rebuildWithType(new RangerArgMatch(), false);
                    copyOf.children.pop();
                    cn.expression_value = copyOf;
                }
            }
            cn.value_type = 17;
        }
    };
    ;
    CodeNode.prototype.inferDefTypeFromValue = function (node) {
        var cn = node.children[1];
        var nodeValue = node.children[2];
        cn.value_type = nodeValue.eval_type;
        cn.type_name = nodeValue.eval_type_name;
        cn.array_type = nodeValue.eval_array_type;
        cn.key_type = nodeValue.eval_key_type;
        if (nodeValue.eval_type == 17) {
            if ((typeof (nodeValue.expression_value) !== "undefined" && nodeValue.expression_value != null)) {
                cn.expression_value = nodeValue.expression_value.copy();
            }
            else {
                if (typeof (node.expression_value) === "undefined") {
                    var copyOf = nodeValue.rebuildWithType(new RangerArgMatch(), false);
                    copyOf.children.pop();
                    cn.expression_value = copyOf;
                }
            }
            cn.type_name = "";
        }
    };
    ;
    CodeNode.prototype.getCode = function () {
        var wr = new CodeWriter();
        this.writeCode(wr);
        return wr.getCode();
    };
    ;
    CodeNode.prototype.cleanNode = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cp;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cp = this;
                        cp.evalTypeClass = undefined;
                        cp.lambda_ctx = undefined;
                        cp.nsp.length = 0;
                        cp.eval_type = 0;
                        cp.eval_type_name = "";
                        cp.eval_key_type = "";
                        cp.eval_array_type = "";
                        cp.eval_function = undefined;
                        cp.flow_done = false;
                        cp.ref_change_done = false;
                        cp.eval_type_node = undefined;
                        cp.didReturnAtIndex = -1;
                        cp.hasVarDef = false;
                        cp.hasClassDescription = false;
                        cp.hasNewOper = false;
                        cp.clDesc = undefined;
                        cp.hasFnCall = false;
                        cp.fnDesc = undefined;
                        cp.hasParamDesc = false;
                        cp.paramDesc = undefined;
                        cp.ownParamDesc = undefined;
                        cp.evalCtx = undefined;
                        cp.evalState = undefined;
                        cp.operator_node = undefined;
                        cp.flow_ctx = undefined;
                        cp.is_part_of_chain = false;
                        cp.methodChain.length = 0;
                        cp.chainTarget = undefined;
                        cp.tag = "";
                        cp.has_operator = false;
                        cp.disabled_node = false;
                        cp.op_index = 0;
                        cp.is_array_literal = false;
                        cp.is_system_class = false;
                        cp.is_plugin = false;
                        cp.mutable_def = false;
                        cp.has_lambda = false;
                        cp.has_lambda_call = false;
                        cp.has_call = false;
                        cp.type_type = this.type_type;
                        cp.value_type = this.parsed_type;
                        return [4 /*yield*/, operatorsOf.forEach_15(cp.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, item.cleanNode()];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    CodeNode.prototype.cleanCopy = function () {
        return __awaiter(this, void 0, void 0, function () {
            var match, cp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        match = new RangerArgMatch();
                        cp = this.rebuildWithType(match, false);
                        return [4 /*yield*/, cp.cleanNode()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, cp];
                }
            });
        });
    };
    ;
    CodeNode.prototype.copy = function () {
        var match = new RangerArgMatch();
        var cp = this.rebuildWithType(match, false);
        cp.register_expressions = operatorsOf.clone_46(this.register_expressions);
        return cp;
    };
    ;
    CodeNode.prototype.clone = function () {
        var match = new RangerArgMatch();
        var cp = this.cloneWithType(match, false);
        return cp;
    };
    ;
    CodeNode.prototype.push = function (node) {
        this.children.push(node);
        node.parent = this;
    };
    ;
    CodeNode.prototype.add = function (node) {
        this.children.push(node);
        node.parent = this;
    };
    ;
    CodeNode.prototype.newVRefNode = function (name) {
        var newNode = new CodeNode(this.code, this.sp, this.ep);
        newNode.vref = name;
        newNode.value_type = 11;
        newNode.parsed_type = 11;
        newNode.ns = name.split(".");
        return newNode;
    };
    ;
    CodeNode.prototype.newStringNode = function (name) {
        var newNode = new CodeNode(this.code, this.sp, this.ep);
        newNode.string_value = name;
        newNode.value_type = 4;
        newNode.parsed_type = 11;
        return newNode;
    };
    ;
    CodeNode.prototype.newExpressionNode = function () {
        var newNode = new CodeNode(this.code, this.sp, this.ep);
        newNode.expression = true;
        return newNode;
    };
    ;
    CodeNode.prototype.getChildrenFrom = function (otherNode) {
        this.children.length = 0;
        for (var i = 0; i < otherNode.children.length; i++) {
            var ch = otherNode.children[i];
            (this).push(ch);
            ch.parent = this;
        }
        ;
        otherNode.children.length = 0;
    };
    ;
    CodeNode.prototype.cloneWithType = function (match, changeVref) {
        var newNode = new CodeNode(this.code, this.sp, this.ep);
        if ((typeof (match.nodes[this.vref]) != "undefined" && match.nodes.hasOwnProperty(this.vref))) {
            var ast = (match.nodes[this.vref]);
            return ast.rebuildWithType(match, true);
        }
        newNode.has_operator = this.has_operator;
        newNode.op_index = this.op_index;
        newNode.mutable_def = this.mutable_def;
        newNode.expression = this.expression;
        newNode.register_name = this.register_name;
        newNode.operator_node = this.operator_node;
        if (changeVref) {
            newNode.vref = match.getTypeName(this.vref);
        }
        else {
            newNode.vref = this.vref;
        }
        newNode.is_block_node = this.is_block_node;
        newNode.type_type = match.getTypeName(this.type_type);
        newNode.type_name = match.getTypeName(this.type_name);
        newNode.key_type = match.getTypeName(this.key_type);
        newNode.array_type = match.getTypeName(this.array_type);
        newNode.value_type = this.value_type;
        newNode.parsed_type = this.parsed_type;
        newNode.copyEvalResFrom(this);
        newNode.register_expressions = operatorsOf.clone_46(this.register_expressions);
        if (this.has_vref_annotation) {
            newNode.has_vref_annotation = true;
            var ann = this.vref_annotation;
            newNode.vref_annotation = ann.cloneWithType(match, true);
        }
        if (this.has_type_annotation) {
            newNode.has_type_annotation = true;
            var t_ann = this.type_annotation;
            newNode.type_annotation = t_ann.cloneWithType(match, true);
        }
        for (var i = 0; i < this.ns.length; i++) {
            var n = this.ns[i];
            if (changeVref) {
                var new_ns = match.getTypeName(n);
                newNode.ns.push(new_ns);
            }
            else {
                newNode.vref = this.vref;
                newNode.ns.push(n);
            }
        }
        ;
        newNode.string_value = this.string_value;
        switch (this.value_type) {
            case 2:
                newNode.double_value = this.double_value;
                break;
            case 4:
                newNode.string_value = this.string_value;
                break;
            case 3:
                newNode.int_value = this.int_value;
                break;
            case 5:
                newNode.boolean_value = this.boolean_value;
                break;
            case 17:
                if ((typeof (this.expression_value) !== "undefined" && this.expression_value != null)) {
                    newNode.expression_value = this.expression_value.cloneWithType(match, changeVref);
                }
                break;
        }
        ;
        for (var i_1 = 0; i_1 < this.prop_keys.length; i_1++) {
            var key = this.prop_keys[i_1];
            newNode.prop_keys.push(key);
            var oldp = this.props[key];
            var np = oldp.cloneWithType(match, changeVref);
            newNode.props[key] = np;
        }
        ;
        for (var i_2 = 0; i_2 < this.children.length; i_2++) {
            var ch = this.children[i_2];
            var newCh = ch.cloneWithType(match, changeVref);
            newCh.parent = newNode;
            newNode.children.push(newCh);
        }
        ;
        for (var i_3 = 0; i_3 < this.attrs.length; i_3++) {
            var ch_1 = this.attrs[i_3];
            var newCh_1 = ch_1.rebuildWithType(match, changeVref);
            newNode.attrs.push(newCh_1);
        }
        ;
        return newNode;
    };
    ;
    CodeNode.prototype.rebuildWithType = function (match, changeVref) {
        var newNode = new CodeNode(this.code, this.sp, this.ep);
        if ((typeof (match.nodes[this.vref]) != "undefined" && match.nodes.hasOwnProperty(this.vref))) {
            var ast = (match.nodes[this.vref]);
            if (ast == this) {
                var tmp = this;
                return tmp;
            }
            var newNode_2 = ast.rebuildWithType(match, true);
            match.builtNodes[this.vref] = newNode_2;
            return newNode_2;
        }
        newNode.has_operator = this.has_operator;
        newNode.op_index = this.op_index;
        newNode.mutable_def = this.mutable_def;
        newNode.expression = this.expression;
        newNode.register_name = this.register_name;
        newNode.reg_compiled_name = this.reg_compiled_name;
        newNode.operator_node = this.operator_node;
        newNode.matched_type = this.matched_type;
        if (changeVref) {
            newNode.vref = match.getTypeName(this.vref);
        }
        else {
            newNode.vref = this.vref;
        }
        newNode.is_block_node = this.is_block_node;
        newNode.type_type = match.getTypeName(this.type_type);
        newNode.type_name = match.getTypeName(this.type_name);
        newNode.key_type = match.getTypeName(this.key_type);
        newNode.array_type = match.getTypeName(this.array_type);
        newNode.value_type = this.value_type;
        newNode.parsed_type = this.parsed_type;
        if (this.has_vref_annotation) {
            newNode.has_vref_annotation = true;
            var ann = this.vref_annotation;
            newNode.vref_annotation = ann.rebuildWithType(match, true);
        }
        if (this.has_type_annotation) {
            newNode.has_type_annotation = true;
            var t_ann = this.type_annotation;
            newNode.type_annotation = t_ann.rebuildWithType(match, true);
        }
        for (var i = 0; i < this.ns.length; i++) {
            var n = this.ns[i];
            if (changeVref) {
                var new_ns = match.getTypeName(n);
                newNode.ns.push(new_ns);
            }
            else {
                newNode.vref = this.vref;
                newNode.ns.push(n);
            }
        }
        ;
        newNode.string_value = this.string_value;
        switch (this.value_type) {
            case 2:
                newNode.double_value = this.double_value;
                break;
            case 4:
                newNode.string_value = this.string_value;
                break;
            case 3:
                newNode.int_value = this.int_value;
                break;
            case 5:
                newNode.boolean_value = this.boolean_value;
                break;
            case 17:
                if ((typeof (this.expression_value) !== "undefined" && this.expression_value != null)) {
                    newNode.expression_value = this.expression_value.rebuildWithType(match, changeVref);
                }
                break;
        }
        ;
        for (var i_1 = 0; i_1 < this.prop_keys.length; i_1++) {
            var key = this.prop_keys[i_1];
            newNode.prop_keys.push(key);
            var oldp = this.props[key];
            var np = oldp.rebuildWithType(match, changeVref);
            newNode.props[key] = np;
        }
        ;
        for (var i_2 = 0; i_2 < this.children.length; i_2++) {
            var ch = this.children[i_2];
            var newCh = ch.rebuildWithType(match, changeVref);
            newCh.parent = newNode;
            newNode.children.push(newCh);
        }
        ;
        for (var i_3 = 0; i_3 < this.attrs.length; i_3++) {
            var ch_1 = this.attrs[i_3];
            var newCh_1 = ch_1.rebuildWithType(match, changeVref);
            newNode.attrs.push(newCh_1);
        }
        ;
        return newNode;
    };
    ;
    CodeNode.prototype.buildTypeSignatureUsingMatch = function (match) {
        var tName = match.getTypeName(this.type_name);
        switch (tName) {
            case "double":
                return "double";
            case "string":
                return "string";
            case "integer":
                return "int";
            case "boolean":
                return "boolean";
        }
        ;
        var s = "";
        if (this.value_type == 6) {
            s = s + "[";
            s = s + match.getTypeName(this.array_type);
            s = s + this.getTypeSignatureWithMatch(match);
            s = s + "]";
            return s;
        }
        if (this.value_type == 7) {
            s = s + "[";
            s = s + match.getTypeName(this.key_type);
            s = s + ":";
            s = s + match.getTypeName(this.array_type);
            s = s + this.getTypeSignatureWithMatch(match);
            s = s + "]";
            return s;
        }
        s = match.getTypeName(this.type_name);
        s = s + this.getVRefSignatureWithMatch(match);
        return s;
    };
    ;
    CodeNode.prototype.buildTypeSignature = function () {
        if (this.hasFlag("keyword")) {
            return this.vref + "::keyword";
        }
        if (TTypes.isPrimitive(this.value_type)) {
            return TTypes.valueAsString(this.value_type);
        }
        var s = "";
        if (this.value_type == 6) {
            s = s + "[";
            s = s + this.array_type;
            s = s + this.getTypeSignature();
            s = s + "]";
            return s;
        }
        if (this.value_type == 7) {
            s = s + "[";
            s = s + this.key_type;
            s = s + ":";
            s = s + this.array_type;
            s = s + this.getTypeSignature();
            s = s + "]";
            return s;
        }
        if (this.value_type == 17) {
            var fnNode = this.expression_value.getFirst();
            var argNode = this.expression_value.getSecond();
            s = (s + "(_:") + fnNode.buildTypeSignature();
            s = ((s + " (") + (operatorsOf.map_47(argNode.children, (function (item, index) {
                return "_:" + item.buildTypeSignature();
            })).join(" "))) + "))";
            return s;
        }
        s = this.type_name;
        return s;
    };
    ;
    CodeNode.prototype.getVRefSignatureWithMatch = function (match) {
        if (this.has_vref_annotation) {
            var nn = this.vref_annotation.rebuildWithType(match, true);
            return "@" + nn.getCode();
        }
        return "";
    };
    ;
    CodeNode.prototype.getVRefSignature = function () {
        if (this.has_vref_annotation) {
            return "@" + this.vref_annotation.getCode();
        }
        return "";
    };
    ;
    CodeNode.prototype.getTypeSignatureWithMatch = function (match) {
        if (this.has_type_annotation) {
            var nn = this.type_annotation.rebuildWithType(match, true);
            return "@" + nn.getCode();
        }
        return "";
    };
    ;
    CodeNode.prototype.getTypeSignature = function () {
        if (this.has_type_annotation) {
            return "@" + this.type_annotation.getCode();
        }
        return "";
    };
    ;
    CodeNode.prototype.typeNameAsType = function (ctx) {
        if ((this.value_type == 17) || (this.eval_type == 17)) {
            return 17;
        }
        var conv = TTypes.nameToValue(this.type_name);
        if (conv != 0) {
            return conv;
        }
        if (true == this.expression) {
            return 17;
        }
        if (this.value_type == 11) {
            if (ctx.isEnumDefined(this.type_name)) {
                return 13;
            }
            if (ctx.isDefinedClass(this.type_name)) {
                return 10;
            }
        }
        return this.value_type;
    };
    ;
    CodeNode.prototype.copyEvalResFrom = function (node) {
        if (node.hasParamDesc) {
            this.hasParamDesc = node.hasParamDesc;
            this.paramDesc = node.paramDesc;
        }
        if ((typeof (node.evalTypeClass) !== "undefined" && node.evalTypeClass != null)) {
            this.evalTypeClass = node.evalTypeClass;
        }
        this.eval_type = node.eval_type;
        this.eval_type_name = node.eval_type_name;
        if ((typeof (node.operator_node) !== "undefined" && node.operator_node != null)) {
            var nn = node.operator_node.children[1];
            if (nn.hasFlag("optional")) {
                this.setFlag("optional");
            }
            if (nn.hasFlag("immutable")) {
                this.setFlag("immutable");
            }
        }
        else {
            if (node.hasFlag("optional")) {
                this.setFlag("optional");
            }
            if (node.hasFlag("immutable")) {
                this.setFlag("immutable");
            }
        }
        this.eval_key_type = node.eval_key_type;
        this.eval_array_type = node.eval_array_type;
        if (node.value_type == 7) {
            this.eval_type = 7;
        }
        if (node.value_type == 6) {
            this.eval_type = 6;
        }
        if (node.value_type == 17) {
            this.eval_type = 17;
            this.eval_function = node.eval_function;
        }
    };
    ;
    CodeNode.prototype.defineNodeTypeTo = function (node, ctx) {
        if ((node.value_type == 17) || (node.eval_type == 17)) {
            return;
        }
        switch (this.type_name) {
            case "double":
                node.value_type = 2;
                node.eval_type = 2;
                node.eval_type_name = "double";
                break;
            case "int":
                node.value_type = 3;
                node.eval_type = 3;
                node.eval_type_name = "int";
                break;
            case "char":
                node.value_type = 14;
                node.eval_type = 14;
                node.eval_type_name = "char";
                break;
            case "charbuffer":
                node.value_type = 15;
                node.eval_type = 15;
                node.eval_type_name = "charbuffer";
                break;
            case "string":
                node.value_type = 4;
                node.eval_type = 4;
                node.eval_type_name = "string";
                break;
            case "boolean":
                node.value_type = 5;
                node.eval_type = 5;
                node.eval_type_name = "string";
                break;
            default:
                if (true == this.expression) {
                    node.value_type = 17;
                    node.eval_type = 17;
                    node.expression = true;
                }
                if (this.value_type == 6) {
                    node.value_type = 6;
                    node.eval_type = 6;
                    node.eval_type_name = this.type_name;
                    node.eval_array_type = this.array_type;
                }
                if (this.value_type == 7) {
                    node.value_type = 7;
                    node.eval_type = 7;
                    node.eval_type_name = this.type_name;
                    node.eval_array_type = this.array_type;
                    node.key_type = this.key_type;
                }
                if (this.value_type == 13) {
                    node.value_type = 13;
                    node.eval_type = 13;
                    node.eval_type_name = this.type_name;
                }
                if (this.value_type == 11) {
                    if (ctx.isEnumDefined(this.type_name)) {
                        node.value_type = 13;
                        node.eval_type = 13;
                        node.eval_type_name = this.type_name;
                    }
                    if (ctx.isDefinedClass(this.type_name)) {
                        node.value_type = 10;
                        node.eval_type = 10;
                        node.eval_type_name = this.type_name;
                    }
                }
                break;
        }
        ;
    };
    ;
    CodeNode.prototype.ifNoTypeSetToVoid = function () {
        if ((((this.type_name.length) == 0) && ((this.key_type.length) == 0)) && ((this.array_type.length) == 0)) {
            this.type_name = "void";
        }
    };
    ;
    CodeNode.prototype.ifNoTypeSetToEvalTypeOf = function (node) {
        if ((((this.type_name.length) == 0) && ((this.key_type.length) == 0)) && ((this.array_type.length) == 0)) {
            this.type_name = node.eval_type_name;
            this.array_type = node.eval_array_type;
            this.key_type = node.eval_key_type;
            this.value_type = node.eval_type;
            this.eval_type = node.eval_type;
            this.eval_type_name = node.eval_type_name;
            this.eval_array_type = node.eval_array_type;
            this.eval_key_type = node.eval_key_type;
            if (node.value_type == 17) {
                if (typeof (this.expression_value) === "undefined") {
                    var copyOf = node.rebuildWithType(new RangerArgMatch(), false);
                    copyOf.children.pop();
                    this.expression_value = copyOf;
                }
            }
            return true;
        }
        return false;
    };
    ;
    // typescript static 
    CodeNode.vref1 = function (name) {
        var code = new SourceCode(name);
        var newNode = new CodeNode(code, 0, name.length);
        newNode.vref = name;
        newNode.value_type = 11;
        newNode.parsed_type = 11;
        newNode.ns = name.split(".");
        return newNode;
    };
    ;
    // typescript static 
    CodeNode.vref2 = function (name, typeName) {
        var code = new SourceCode(name);
        var newNode = new CodeNode(code, 0, name.length);
        newNode.vref = name;
        newNode.type_name = typeName;
        newNode.value_type = 11;
        newNode.parsed_type = 11;
        newNode.ns = name.split(".");
        return newNode;
    };
    ;
    // typescript static 
    CodeNode.newStr = function (name) {
        var code = new SourceCode("");
        var newNode = new CodeNode(code, 0, 0);
        newNode.string_value = name;
        newNode.value_type = 4;
        newNode.parsed_type = 4;
        return newNode;
    };
    ;
    // typescript static 
    CodeNode.newBool = function (value) {
        var code = new SourceCode("");
        var newNode = new CodeNode(code, 0, 0);
        newNode.boolean_value = value;
        newNode.value_type = 5;
        newNode.parsed_type = 5;
        return newNode;
    };
    ;
    // typescript static 
    CodeNode.newInt = function (value) {
        var code = new SourceCode("");
        var newNode = new CodeNode(code, 0, 0);
        newNode.int_value = value;
        newNode.value_type = 3;
        newNode.parsed_type = 3;
        return newNode;
    };
    ;
    // typescript static 
    CodeNode.newDouble = function (value) {
        var code = new SourceCode("");
        var newNode = new CodeNode(code, 0, 0);
        newNode.double_value = value;
        newNode.value_type = 2;
        newNode.parsed_type = 2;
        return newNode;
    };
    ;
    // typescript static 
    CodeNode.op = function (opName) {
        var code = new SourceCode("");
        var newNode = new CodeNode(code, 0, 0);
        newNode.expression = true;
        var opNode = CodeNode.vref1(opName);
        newNode.children.push(opNode);
        return newNode;
    };
    ;
    // typescript static 
    CodeNode.op2 = function (opName, param1) {
        var code = new SourceCode("");
        var newNode = new CodeNode(code, 0, 0);
        newNode.expression = true;
        var opNode = CodeNode.vref1(opName);
        newNode.children.push(opNode);
        newNode.children.push(param1);
        return newNode;
    };
    ;
    // typescript static 
    CodeNode.op3 = function (opName, list) {
        var code = new SourceCode("");
        var newNode = new CodeNode(code, 0, 0);
        newNode.expression = true;
        var opNode = CodeNode.vref1(opName);
        newNode.children.push(opNode);
        for (var i = 0; i < list.length; i++) {
            var item = list[i];
            newNode.children.push(item);
        }
        ;
        return newNode;
    };
    ;
    // typescript static 
    CodeNode.fromList = function (list) {
        var code = new SourceCode("");
        var newNode = new CodeNode(code, 0, 0);
        newNode.expression = true;
        for (var i = 0; i < list.length; i++) {
            var item = list[i];
            newNode.children.push(item);
            item.parent = newNode;
        }
        ;
        return newNode;
    };
    ;
    // typescript static 
    CodeNode.expressionNode = function () {
        var code = new SourceCode("");
        var newNode = new CodeNode(code, 0, 0);
        newNode.expression = true;
        return newNode;
    };
    ;
    // typescript static 
    CodeNode.blockNode = function () {
        var code = new SourceCode("");
        var newNode = new CodeNode(code, 0, 0);
        newNode.is_block_node = true;
        newNode.expression = true;
        return newNode;
    };
    ;
    // typescript static 
    CodeNode.blockFromList = function (list) {
        var code = new SourceCode("");
        var newNode = new CodeNode(code, 0, 0);
        newNode.is_block_node = true;
        newNode.expression = true;
        for (var i = 0; i < list.length; i++) {
            var item = list[i];
            newNode.children.push(item);
            item.parent = newNode;
        }
        ;
        return newNode;
    };
    ;
    return CodeNode;
}());
exports.CodeNode = CodeNode;
var TypeCounts = /** @class */ (function () {
    function TypeCounts() {
        this.b_counted = false;
        this.interface_cnt = 0;
        this.operator_cnt = 0;
        this.immutable_cnt = 0;
        this.register_cnt = 0;
        this.opfn_cnt = 0;
    }
    return TypeCounts;
}());
exports.TypeCounts = TypeCounts;
var RangerNodeValue = /** @class */ (function () {
    function RangerNodeValue() {
    }
    return RangerNodeValue;
}());
exports.RangerNodeValue = RangerNodeValue;
var RangerBackReference = /** @class */ (function () {
    function RangerBackReference() {
    }
    return RangerBackReference;
}());
exports.RangerBackReference = RangerBackReference;
var RangerAppEnum = /** @class */ (function () {
    function RangerAppEnum() {
        this.name = ""; /** note: unused */
        this.cnt = 0;
        this.values = {};
    }
    RangerAppEnum.prototype.add = function (n) {
        this.values[n] = this.cnt;
        this.cnt = this.cnt + 1;
    };
    ;
    return RangerAppEnum;
}());
exports.RangerAppEnum = RangerAppEnum;
var OpFindResult = /** @class */ (function () {
    function OpFindResult() {
        this.did_find = false; /** note: unused */
    }
    return OpFindResult;
}());
exports.OpFindResult = OpFindResult;
var RangerOperatorList = /** @class */ (function () {
    function RangerOperatorList() {
        this.items = [];
    }
    return RangerOperatorList;
}());
exports.RangerOperatorList = RangerOperatorList;
var RangerNodeList = /** @class */ (function () {
    function RangerNodeList() {
        this.items = [];
    }
    return RangerNodeList;
}());
exports.RangerNodeList = RangerNodeList;
var ContextTransaction = /** @class */ (function () {
    function ContextTransaction() {
        this.name = "";
        this.desc = "";
        this.ended = false;
        this.failed = false; /** note: unused */
        this.mutations = []; /** note: unused */
        this.children = [];
    }
    return ContextTransaction;
}());
exports.ContextTransaction = ContextTransaction;
var ContextTransactionMutation = /** @class */ (function () {
    function ContextTransactionMutation() {
    }
    return ContextTransactionMutation;
}());
exports.ContextTransactionMutation = ContextTransactionMutation;
var RangerRegisteredPlugin = /** @class */ (function () {
    function RangerRegisteredPlugin() {
        this.name = "";
        this.features = [];
    }
    return RangerRegisteredPlugin;
}());
exports.RangerRegisteredPlugin = RangerRegisteredPlugin;
var RangerAppWriterContext = /** @class */ (function () {
    function RangerAppWriterContext() {
        this.op_list = {};
        this.intRootCounter = 1; /** note: unused */
        this.targetLangName = "";
        this.defined_imports = []; /** note: unused */
        this.already_imported = {};
        this.is_function = false;
        this.class_level_context = false;
        this.function_level_context = false;
        this.in_main = false;
        this.is_block = false; /** note: unused */
        this.is_lambda = false;
        this.is_capturing = false;
        this.is_catch_block = false;
        this.is_try_block = false;
        this.captured_variables = [];
        this.has_block_exited = false; /** note: unused */
        this.in_expression = false; /** note: unused */
        this.expr_stack = [];
        this.expr_restart = false;
        this.expr_restart_block = false;
        this.in_method = false; /** note: unused */
        this.method_stack = [];
        this.typeNames = []; /** note: unused */
        this.typeClasses = {};
        this.in_class = false;
        this.in_static_method = false;
        this.thisName = "this";
        this.definedEnums = {};
        this.definedInterfaces = {}; /** note: unused */
        this.definedInterfaceList = []; /** note: unused */
        this.definedClasses = {};
        this.definedClassList = [];
        this.definedTasks = {}; /** note: unused */
        this.templateClassNodes = {};
        this.templateClassList = [];
        this.classSignatures = {};
        this.classToSignature = {};
        this.templateClasses = {}; /** note: unused */
        this.classStaticWriters = {};
        this.localVariables = {};
        this.localVarNames = [];
        this.contextFlags = {};
        this.settings = {};
        this.compilerFlags = {};
        this.compilerSettings = {};
        this.parserErrors = [];
        this.compilerErrors = [];
        this.compilerMessages = [];
        this.compilerLog = {}; /** note: unused */
        this.todoList = [];
        this.definedMacro = {}; /** note: unused */
        this.defCounts = {};
        this.refTransform = {};
        this.staticClassBodies = [];
        this.pluginSpecificOperators = {};
        this.viewClassBody = {};
        this.appPages = {};
        this.appServices = {};
        this.opNs = [];
        this.langFilePath = ""; /** note: unused */
        this.libraryPaths = [];
        this.outputPath = ""; /** note: unused */
        this.counters = new TypeCounts();
        this.pluginNodes = {};
        this.typedNodes = {};
        this.registered_plugins = [];
        this.opFnsList = {};
        this.test_compile = [];
        this.activeTransaction = [];
        this.transactions = [];
        this.rootFile = "--not-defined--";
    }
    RangerAppWriterContext.prototype.getEnv = function () {
        var root = this.getRoot();
        return root.env;
    };
    ;
    RangerAppWriterContext.prototype.setTestCompile = function () {
        this.test_compile.push(true);
    };
    ;
    RangerAppWriterContext.prototype.unsetTestCompile = function () {
        this.test_compile.pop();
    };
    ;
    RangerAppWriterContext.prototype.isTestCompile = function () {
        if ((this.test_compile.length) > 0) {
            return true;
        }
        if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
            return this.parent.isTestCompile();
        }
        return false;
    };
    ;
    RangerAppWriterContext.prototype.addOpFn = function (name, code) {
        if (false == ((typeof (this.opFnsList[name]) != "undefined" && this.opFnsList.hasOwnProperty(name)))) {
            this.opFnsList[name] = CodeNode.expressionNode();
        }
        var rootNode = (this.opFnsList[name]);
        rootNode.children.push(code);
    };
    ;
    RangerAppWriterContext.prototype.getOpFns = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var rv, ol, list2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rv = [];
                        if (!(typeof (this.opFnsList[name]) != "undefined" && this.opFnsList.hasOwnProperty(name))) return [3 /*break*/, 2];
                        ol = (this.opFnsList[name]);
                        return [4 /*yield*/, operatorsOf.forEach_15(ol.children, (function (item, index) {
                                var tmp = item;
                                rv.push(tmp);
                            }))];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!(typeof (this.parent) !== "undefined" && this.parent != null)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.parent.getOpFns(name)];
                    case 3:
                        list2 = _a.sent();
                        return [4 /*yield*/, operatorsOf.forEach_15(list2, (function (item, index) {
                                var tmp_1 = item;
                                rv.push(tmp_1);
                            }))];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [2 /*return*/, rv];
                }
            });
        });
    };
    ;
    RangerAppWriterContext.prototype.getLastBlockOp = function () {
        if (this.isTestCompile()) {
            var cn = void 0;
            cn = CodeNode.expressionNode();
            return cn;
        }
        if ((typeof (this.lastBlockOp) !== "undefined" && this.lastBlockOp != null)) {
            return this.lastBlockOp;
        }
        if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
            return this.parent.getLastBlockOp();
        }
        return this.lastBlockOp;
    };
    ;
    RangerAppWriterContext.prototype.removePluginOp = function (name) {
        var root = this.getRoot();
        root.pluginSpecificOperators[name] = false;
    };
    ;
    RangerAppWriterContext.prototype.isPluginOp = function (node) {
        if ((node.children.length) > 0) {
            var fc = node.getFirst();
            if ((fc.ns.length) > 0) {
                var firstNS = fc.ns[0];
                var root = this.getRoot();
                if ((typeof (root.pluginSpecificOperators[firstNS]) != "undefined" && root.pluginSpecificOperators.hasOwnProperty(firstNS))) {
                    return (root.pluginSpecificOperators[firstNS]);
                }
            }
        }
        return false;
    };
    ;
    RangerAppWriterContext.prototype.addPlugin = function (p) {
        var root = this.getRoot();
        root.registered_plugins.push(p);
    };
    ;
    RangerAppWriterContext.prototype.findPluginsFor = function (featureName) {
        var res = [];
        for (var i = 0; i < this.registered_plugins.length; i++) {
            var p = this.registered_plugins[i];
            if ((p.features.indexOf(featureName)) >= 0) {
                res.push(p.name);
            }
        }
        ;
        return res;
    };
    ;
    RangerAppWriterContext.prototype.addTypeClass = function (name) {
        var root = this.getRoot();
        if (false == ((typeof (root.typeClasses[name]) != "undefined" && root.typeClasses.hasOwnProperty(name)))) {
            var newClass = new RangerTypeClass();
            root.typeClasses[name] = newClass;
            return newClass;
        }
        return (root.typeClasses[name]);
    };
    ;
    RangerAppWriterContext.prototype.getTypeClass = function (name) {
        var root = this.getRoot();
        return root.typeClasses[name];
    };
    ;
    RangerAppWriterContext.prototype.getParser = function () {
        if (typeof (this.parser) === "undefined") {
            if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
                return this.parent.getParser();
            }
        }
        return this.parser;
    };
    ;
    RangerAppWriterContext.prototype.getCompiler = function () {
        if (typeof (this.compiler) === "undefined") {
            if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
                return this.parent.getCompiler();
            }
        }
        return this.compiler;
    };
    ;
    RangerAppWriterContext.prototype.getTypedNodes = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var root, res, list;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        root = this.getRoot();
                        res = [];
                        list = root.typedNodes[name];
                        if (!(typeof (list) !== "undefined" && list != null)) return [3 /*break*/, 2];
                        return [4 /*yield*/, operatorsOf.forEach_15(list.items, (function (item, index) {
                                var tmp = item;
                                res.push(tmp);
                            }))];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, res];
                }
            });
        });
    };
    ;
    RangerAppWriterContext.prototype.addTypedNode = function (name, op) {
        var root = this.getRoot();
        if ((typeof (root.typedNodes[name]) != "undefined" && root.typedNodes.hasOwnProperty(name))) {
            var orig_list = (root.typedNodes[name]);
            orig_list.items.push(op);
        }
        else {
            var new_list = new RangerNodeList();
            new_list.items.push(op);
            root.typedNodes[name] = new_list;
        }
    };
    ;
    RangerAppWriterContext.prototype.getPluginNodes = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var root, res, list;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        root = this.getRoot();
                        res = [];
                        list = root.pluginNodes[name];
                        if (!(typeof (list) !== "undefined" && list != null)) return [3 /*break*/, 2];
                        return [4 /*yield*/, operatorsOf.forEach_15(list.items, (function (item, index) {
                                var tmp = item;
                                res.push(tmp);
                            }))];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, res];
                }
            });
        });
    };
    ;
    RangerAppWriterContext.prototype.addPluginNode = function (name, op) {
        var root = this.getRoot();
        if ((typeof (root.pluginNodes[name]) != "undefined" && root.pluginNodes.hasOwnProperty(name))) {
            var orig_list = (root.pluginNodes[name]);
            orig_list.items.push(op);
        }
        else {
            var new_list = new RangerNodeList();
            new_list.items.push(op);
            root.pluginNodes[name] = new_list;
        }
    };
    ;
    RangerAppWriterContext.prototype.addOperator = function (op) {
        var root = this.getRoot();
        if ((op.name.length) > 0) {
            if ((typeof (root.op_list[op.name]) != "undefined" && root.op_list.hasOwnProperty(op.name))) {
                var orig_list = (root.op_list[op.name]);
                orig_list.items.push(op);
            }
            else {
                var new_list = new RangerOperatorList();
                new_list.items.push(op);
                root.op_list[op.name] = new_list;
            }
        }
    };
    ;
    RangerAppWriterContext.prototype.getAllOperators = function () {
        return __awaiter(this, void 0, void 0, function () {
            var root, res;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        root = this.getRoot();
                        res = [];
                        return [4 /*yield*/, operatorsOf_13.forEach_16(root.op_list, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, operatorsOf.forEach_17(item.items, (function (item, index) {
                                                var tmp = item;
                                                res.push(tmp);
                                            }))];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    ;
    RangerAppWriterContext.prototype.getOperatorsOf = function (name) {
        var root = this.getRoot();
        var res = [];
        var list = root.op_list[name];
        if ((typeof (list) !== "undefined" && list != null)) {
            return operatorsOf.clone_18(list.items);
        }
        return res;
    };
    ;
    RangerAppWriterContext.prototype.initOpList = function () {
        return __awaiter(this, void 0, void 0, function () {
            var root, op, foo;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        root = this.getRoot();
                        if (!(typeof (root.operators) !== "undefined" && root.operators != null)) return [3 /*break*/, 5];
                        op = root.operators;
                        return [4 /*yield*/, op.initializeOpCache()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, op.getOperators("+")];
                    case 2:
                        foo = _a.sent();
                        if (!((foo.length) > 0)) return [3 /*break*/, 4];
                        return [4 /*yield*/, operatorsOf_13.forEach_19(op.opHash, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                var op_name;
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            op_name = index;
                                            return [4 /*yield*/, operatorsOf.forEach_15(item.list, (function (item, index) {
                                                    /** unused:  const fc : CodeNode  = item.getFirst()   **/
                                                    var nameNode = item.getSecond();
                                                    var args = item.getThird();
                                                    var newOp = new RangerAppOperatorDesc();
                                                    newOp.name = op_name;
                                                    newOp.node = item;
                                                    newOp.nameNode = nameNode;
                                                    newOp.op_params = args.children;
                                                    if ((args.children.length) > 0) {
                                                        newOp.firstArg = args.children[0];
                                                    }
                                                    _this.addOperator(newOp);
                                                }))];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerAppWriterContext.prototype.incLambdaCnt = function () {
        var root = this.getRoot();
        root.counters.interface_cnt = root.counters.interface_cnt + 1;
    };
    ;
    RangerAppWriterContext.prototype.createNewRegName = function () {
        var root = this.findFunctionCtx();
        root.counters.register_cnt = root.counters.register_cnt + 1;
        return "__REGx" + root.counters.register_cnt;
    };
    ;
    RangerAppWriterContext.prototype.createNewOpFnName = function () {
        var root = this.findFunctionCtx();
        root.counters.opfn_cnt = root.counters.opfn_cnt + 1;
        return "__tmpOpFn" + root.counters.opfn_cnt;
    };
    ;
    RangerAppWriterContext.prototype.isTryBlock = function () {
        if (this.expr_restart) {
            return false;
        }
        if (this.is_try_block) {
            return true;
        }
        if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
            return this.parent.isTryBlock();
        }
        return false;
    };
    ;
    RangerAppWriterContext.prototype.isCatchBlock = function () {
        if (this.expr_restart) {
            return false;
        }
        if (this.is_catch_block) {
            return true;
        }
        if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
            return this.parent.isCatchBlock();
        }
        return false;
    };
    ;
    RangerAppWriterContext.prototype.pushAndCollectAst = function (rootNode, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var myParser;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        myParser = new RangerFlowParser();
                        return [4 /*yield*/, myParser.CollectMethods(rootNode, this, wr)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerAppWriterContext.prototype.pushAndCompileAst = function (rootNode, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var myParser;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        myParser = new RangerFlowParser();
                        return [4 /*yield*/, myParser.CollectMethods(rootNode, this, wr)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, myParser.StartWalk(rootNode, this, wr)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerAppWriterContext.prototype.pushAst = function (source_code, node, wr) {
        var code = new SourceCode(source_code);
        code.filename = "dynamically_generated";
        var parser_1 = new RangerLispParser(code);
        parser_1.parse(this.hasCompilerFlag("no-op-transform"));
        if (typeof (parser_1.rootNode) != "undefined") {
            var root = parser_1.rootNode;
            node.children.push(root);
        }
    };
    ;
    RangerAppWriterContext.prototype.pushAndCollectCode = function (source_code, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var code, parser_1, root, myParser, rootCtx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        code = new SourceCode(source_code);
                        code.filename = "dynamically_generated";
                        parser_1 = new RangerLispParser(code);
                        parser_1.parse(this.hasCompilerFlag("no-op-transform"));
                        if (!(typeof (parser_1.rootNode) != "undefined")) return [3 /*break*/, 2];
                        root = parser_1.rootNode;
                        myParser = new RangerFlowParser();
                        rootCtx = this.getRoot();
                        return [4 /*yield*/, myParser.CollectMethods(root, rootCtx, wr)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerAppWriterContext.prototype.pushCode = function (source_code, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var code, parser_1, root, myParser, rootCtx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        code = new SourceCode(source_code);
                        code.filename = "dynamically_generated";
                        parser_1 = new RangerLispParser(code);
                        parser_1.parse(this.hasCompilerFlag("no-op-transform"));
                        if (!(typeof (parser_1.rootNode) != "undefined")) return [3 /*break*/, 3];
                        root = parser_1.rootNode;
                        myParser = new RangerFlowParser();
                        rootCtx = this.getRoot();
                        return [4 /*yield*/, myParser.CollectMethods(root, rootCtx, wr)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, myParser.StartWalk(root, rootCtx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerAppWriterContext.prototype.addViewClassBody = function (name, classDef) {
        var root = this.getRoot();
        root.viewClassBody[name] = classDef;
    };
    ;
    RangerAppWriterContext.prototype.addPage = function (name, classDef) {
        var root = this.getRoot();
        root.appPages[name] = classDef;
    };
    ;
    RangerAppWriterContext.prototype.addService = function (name, classDef) {
        var root = this.getRoot();
        root.appServices[name] = classDef;
    };
    ;
    RangerAppWriterContext.prototype.getViewClass = function (s_name) {
        var res;
        if ((typeof (this.viewClassBody[s_name]) != "undefined" && this.viewClassBody.hasOwnProperty(s_name))) {
            res = this.viewClassBody[s_name];
            return res;
        }
        if (typeof (this.parent) === "undefined") {
            return res;
        }
        return this.parent.getViewClass(s_name);
    };
    ;
    RangerAppWriterContext.prototype.addOpNs = function (n) {
        this.opNs.push(n);
    };
    ;
    RangerAppWriterContext.prototype.removeOpNs = function (n) {
        var idx = this.opNs.indexOf(n);
        if (idx >= 0) {
            this.opNs.splice(idx, 1).pop();
        }
    };
    ;
    RangerAppWriterContext.prototype.inLambda = function () {
        if (this.is_lambda) {
            return true;
        }
        if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
            return this.parent.inLambda();
        }
        return false;
    };
    ;
    RangerAppWriterContext.prototype.variableTypeUsage = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res, cc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        res = {};
                        cc = this;
                        _a.label = 1;
                    case 1:
                        if (!(typeof (cc) !== "undefined" && cc != null)) return [3 /*break*/, 3];
                        return [4 /*yield*/, operatorsOf_13.forEach_20(cc.localVariables, (function (item, index) {
                                if ((typeof (item.nameNode) !== "undefined" && item.nameNode != null)) {
                                    res[item.nameNode.type_name] = true;
                                    res[item.nameNode.key_type] = true;
                                    res[item.nameNode.array_type] = true;
                                }
                            }))];
                    case 2:
                        _a.sent();
                        cc = cc.parent;
                        return [3 /*break*/, 1];
                    case 3:
                        ;
                        return [2 /*return*/, Object.keys(res)];
                }
            });
        });
    };
    ;
    RangerAppWriterContext.prototype.writeContextVars = function (wr) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, operatorsOf_13.forEach_20(this.localVariables, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                            var r;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        wr.out(("def " + index) + ":", false);
                                        if (!(typeof (item.nameNode) !== "undefined" && item.nameNode != null)) return [3 /*break*/, 2];
                                        r = new RangerRangerClassWriter();
                                        return [4 /*yield*/, r.writeTypeDef(item.nameNode, this, wr)];
                                    case 1:
                                        _a.sent();
                                        _a.label = 2;
                                    case 2:
                                        wr.out(("(" + item.compiledName) + ")", false);
                                        wr.out("", true);
                                        return [2 /*return*/];
                                }
                            });
                        }); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerAppWriterContext.prototype.writeContextInfo = function (wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cList, c, idx, cnt, cc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cList = [];
                        c = this;
                        cList.push(c);
                        while ((typeof (c.parent) !== "undefined" && c.parent != null)) {
                            c = c.parent;
                            cList.push(c);
                        }
                        ;
                        idx = cList.length;
                        cnt = idx;
                        _a.label = 1;
                    case 1:
                        if (!(idx > 0)) return [3 /*break*/, 3];
                        idx = idx - 1;
                        wr.out("{", true);
                        wr.indent(1);
                        cc = cList[idx];
                        return [4 /*yield*/, cc.writeContextVars(wr)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 1];
                    case 3:
                        ;
                        while (cnt > 0) {
                            wr.indent(-1);
                            wr.out("}", true);
                            cnt = cnt - 1;
                        }
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerAppWriterContext.prototype.getContextInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var wr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        wr = new CodeWriter();
                        return [4 /*yield*/, this.writeContextInfo(wr)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, wr.getCode()];
                }
            });
        });
    };
    ;
    RangerAppWriterContext.prototype.isCapturing = function () {
        if (this.is_capturing) {
            return true;
        }
        if (typeof (this.parent) != "undefined") {
            return this.parent.isCapturing();
        }
        return false;
    };
    ;
    RangerAppWriterContext.prototype.forkWithOps = function (opNode) {
        var ops = this.getOperatorDef();
        var new_ops = ops.fork(opNode);
        var new_ctx = this.fork();
        new_ctx.operators = new_ops;
        return new_ctx;
    };
    ;
    RangerAppWriterContext.prototype.getOperatorDef = function () {
        if ((typeof (this.operators) !== "undefined" && this.operators != null)) {
            return this.operators;
        }
        if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
            return this.parent.getOperatorDef();
        }
        var nothingFound = new RangerActiveOperators();
        return nothingFound;
    };
    ;
    RangerAppWriterContext.prototype.getOperators = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var root, cc, opNamespace, i, nsName, i_1, nsName_1, op, listOfOps_1, handled, i_2, ss, nsOps, i_3, ns_op, plainOps, i_4, ppn, cc_2, opFn, suggestedOp, nothingFound;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        root = this.getRoot();
                        cc = this;
                        opNamespace = [];
                        if ((this.opNs.length) > 0) {
                            for (i = 0; i < this.opNs.length; i++) {
                                nsName = this.opNs[i];
                                opNamespace.push(nsName);
                            }
                            ;
                        }
                        while ((typeof (cc.parent) !== "undefined" && cc.parent != null)) {
                            cc = cc.parent;
                            if ((cc.opNs.length) > 0) {
                                for (i_1 = 0; i_1 < cc.opNs.length; i_1++) {
                                    nsName_1 = cc.opNs[i_1];
                                    opNamespace.push(nsName_1);
                                }
                                ;
                            }
                        }
                        ;
                        if (!(typeof (root.operators) !== "undefined" && root.operators != null)) return [3 /*break*/, 11];
                        op = root.operators;
                        listOfOps_1 = [];
                        handled = {};
                        i_2 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_2 < opNamespace.length)) return [3 /*break*/, 4];
                        ss = opNamespace[i_2];
                        if ((typeof (handled[ss]) != "undefined" && handled.hasOwnProperty(ss))) {
                            return [3 /*break*/, 3];
                        }
                        handled[ss] = true;
                        return [4 /*yield*/, op.getOperators(((ss + ".") + name))];
                    case 2:
                        nsOps = _a.sent();
                        for (i_3 = 0; i_3 < nsOps.length; i_3++) {
                            ns_op = nsOps[i_3];
                            listOfOps_1.push(ns_op);
                        }
                        ;
                        _a.label = 3;
                    case 3:
                        i_2++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        return [4 /*yield*/, op.getOperators(name)];
                    case 5:
                        plainOps = _a.sent();
                        for (i_4 = 0; i_4 < plainOps.length; i_4++) {
                            ppn = plainOps[i_4];
                            listOfOps_1.push(ppn);
                        }
                        ;
                        cc_2 = void 0;
                        cc_2 = this;
                        _a.label = 6;
                    case 6:
                        if (!(typeof (cc_2) !== "undefined" && cc_2 != null)) return [3 /*break*/, 10];
                        if (!(typeof (cc_2.operatorFunction) !== "undefined" && cc_2.operatorFunction != null)) return [3 /*break*/, 9];
                        opFn = cc_2.operatorFunction;
                        return [4 /*yield*/, opFn(name)];
                    case 7:
                        suggestedOp = _a.sent();
                        return [4 /*yield*/, operatorsOf.forEach_15(suggestedOp.children, (function (item, index) {
                                listOfOps_1.splice(0, 0, item.copy());
                            }))];
                    case 8:
                        _a.sent();
                        _a.label = 9;
                    case 9:
                        cc_2 = cc_2.parent;
                        return [3 /*break*/, 6];
                    case 10:
                        ;
                        return [2 /*return*/, listOfOps_1];
                    case 11:
                        nothingFound = [];
                        return [2 /*return*/, nothingFound];
                }
            });
        });
    };
    ;
    RangerAppWriterContext.prototype.isLocalToCapture = function (name) {
        if ((typeof (this.localVariables[name]) != "undefined" && this.localVariables.hasOwnProperty(name))) {
            return true;
        }
        if (this.is_capturing) {
            return false;
        }
        if (typeof (this.parent) != "undefined") {
            return this.parent.isLocalToCapture(name);
        }
        return false;
    };
    ;
    RangerAppWriterContext.prototype.addCapturedVariable = function (name) {
        if (this.is_capturing) {
            if ((this.captured_variables.indexOf(name)) < 0) {
                this.captured_variables.push(name);
            }
            return;
        }
        if (typeof (this.parent) != "undefined") {
            this.parent.addCapturedVariable(name);
        }
    };
    ;
    RangerAppWriterContext.prototype.getCapturedVariables = function () {
        if (this.is_capturing) {
            return this.captured_variables;
        }
        if (typeof (this.parent) != "undefined") {
            var r = this.parent.getCapturedVariables();
            return r;
        }
        var res = [];
        return res;
    };
    ;
    RangerAppWriterContext.prototype.transformOpNameWord = function (input_word) {
        var __len = input_word.length;
        var i = 0;
        var res = "";
        while (i < __len) {
            var cc = input_word.charCodeAt(i);
            if (((cc >= (97)) && (cc <= (122))) || ((cc >= (65)) && (cc <= (89)))) {
                res = res + (String.fromCharCode(cc));
            }
            else {
                res = (res + "c") + cc;
            }
            i = i + 1;
        }
        ;
        return res;
    };
    ;
    RangerAppWriterContext.prototype.transformWord = function (input_word) {
        switch (input_word) {
            case "map":
                return "_map";
            default:
                break;
        }
        ;
        var root = this.getRoot();
        root.initReservedWords();
        if ((typeof (this.refTransform[input_word]) != "undefined" && this.refTransform.hasOwnProperty(input_word))) {
            return (this.refTransform[input_word]);
        }
        return input_word;
    };
    ;
    RangerAppWriterContext.prototype.initReservedWords = function () {
        if ((typeof (this.reservedWords) !== "undefined" && this.reservedWords != null)) {
            return true;
        }
        var main = this.langOperators;
        var lang;
        for (var i = 0; i < main.children.length; i++) {
            var m = main.children[i];
            var fc = m.getFirst();
            if (fc.vref == "language") {
                lang = m;
            }
        }
        ;
        /** unused:  let cmds : CodeNode    **/
        var langNodes = lang.children[1];
        for (var i_1 = 0; i_1 < langNodes.children.length; i_1++) {
            var lch = langNodes.children[i_1];
            var fc_1 = lch.getFirst();
            if (fc_1.vref == "reserved_words") {
                /** unused:  const n : CodeNode  = lch.getSecond()   **/
                this.reservedWords = lch.getSecond();
                for (var i_2 = 0; i_2 < this.reservedWords.children.length; i_2++) {
                    var ch = this.reservedWords.children[i_2];
                    var word = ch.getFirst();
                    var transform = ch.getSecond();
                    this.refTransform[word.vref] = transform.vref;
                }
                ;
            }
        }
        ;
        return true;
    };
    ;
    RangerAppWriterContext.prototype.initStdCommands = function () {
        if ((typeof (this.stdCommands) !== "undefined" && this.stdCommands != null)) {
            return true;
        }
        if (typeof (this.langOperators) === "undefined") {
            return true;
        }
        var main = this.langOperators;
        var lang;
        for (var i = 0; i < main.children.length; i++) {
            var m = main.children[i];
            var fc = m.getFirst();
            if (fc.vref == "language") {
                lang = m;
            }
        }
        ;
        /** unused:  let cmds : CodeNode    **/
        var langNodes = lang.children[1];
        for (var i_1 = 0; i_1 < langNodes.children.length; i_1++) {
            var lch = langNodes.children[i_1];
            var fc_1 = lch.getFirst();
            if (fc_1.vref == "commands") {
                /** unused:  const n : CodeNode  = lch.getSecond()   **/
                this.stdCommands = lch.getSecond();
            }
        }
        ;
        return true;
    };
    ;
    RangerAppWriterContext.prototype.transformTypeName = function (typeName) {
        if (this.isPrimitiveType(typeName)) {
            return typeName;
        }
        if (this.isEnumDefined(typeName)) {
            return typeName;
        }
        if (this.isDefinedClass(typeName)) {
            var cl = this.findClass(typeName);
            if (cl.is_system) {
                return (cl.systemNames[operatorsOfRangerAppWriterContext_21.getTargetLang_22(this)]);
            }
        }
        return typeName;
    };
    ;
    RangerAppWriterContext.prototype.isPrimitiveType = function (typeName) {
        if ((((((typeName == "double") || (typeName == "string")) || (typeName == "int")) || (typeName == "char")) || (typeName == "charbuffer")) || (typeName == "boolean")) {
            return true;
        }
        return false;
    };
    ;
    RangerAppWriterContext.prototype.isDefinedType = function (typeName) {
        if (typeName == "Any") {
            return true;
        }
        if ((((((typeName == "double") || (typeName == "string")) || (typeName == "int")) || (typeName == "char")) || (typeName == "charbuffer")) || (typeName == "boolean")) {
            return true;
        }
        if (this.isEnumDefined(typeName)) {
            return true;
        }
        if (this.isDefinedClass(typeName)) {
            return true;
        }
        return false;
    };
    ;
    RangerAppWriterContext.prototype.hadValidType = function (node) {
        if (node.isPrimitiveType() || node.isPrimitive()) {
            return true;
        }
        if (node.value_type == 6) {
            if (this.isDefinedType(node.array_type)) {
                return true;
            }
            else {
                this.addError(node, "Unknown type for array values: " + node.array_type);
                return false;
            }
        }
        if (node.value_type == 7) {
            if (this.isDefinedType(node.array_type) && this.isPrimitiveType(node.key_type)) {
                return true;
            }
            else {
                if (this.isDefinedType(node.array_type) == false) {
                    this.addError(node, "Unknown type for map values: " + node.array_type);
                }
                if (this.isDefinedType(node.key_type) == false) {
                    this.addError(node, "Unknown type for map keys: " + node.key_type);
                }
                return false;
            }
        }
        if (this.isEnumDefined(node.type_name)) {
            return true;
        }
        if (this.isDefinedType(node.type_name)) {
            return true;
        }
        else {
            if (node.value_type == 17) {
            }
            else {
                this.addError(node, (("Unknown type: " + node.type_name) + " type ID : ") + node.value_type);
            }
        }
        return false;
    };
    ;
    RangerAppWriterContext.prototype.findOperator = function (node) {
        var root = this.getRoot();
        root.initStdCommands();
        if ((typeof (node.operator_node) !== "undefined" && node.operator_node != null)) {
            return node.operator_node;
        }
        return root.stdCommands.children[node.op_index];
    };
    ;
    RangerAppWriterContext.prototype.getStdCommands = function () {
        var root = this.getRoot();
        root.initStdCommands();
        return root.stdCommands;
    };
    ;
    RangerAppWriterContext.prototype.findOperatorsWithName = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        res = [];
                        return [4 /*yield*/, operatorsOf.forEach_15((this.getStdCommands()).children, (function (item, index) {
                                if (item.isFirstVref(name)) {
                                    res.push(item);
                                }
                            }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    ;
    RangerAppWriterContext.prototype.findClassWithSign = function (node) {
        var root = this.getRoot();
        var tplArgs = node.vref_annotation;
        var sign = node.vref + tplArgs.getCode();
        var theName = root.classSignatures[sign];
        return this.findClass((theName));
    };
    ;
    RangerAppWriterContext.prototype.createSignature = function (origClass, classSig) {
        if ((typeof (this.classSignatures[classSig]) != "undefined" && this.classSignatures.hasOwnProperty(classSig))) {
            return (this.classSignatures[classSig]);
        }
        var ii = 1;
        var sigName = (origClass + "V") + ii;
        while ((typeof (this.classToSignature[sigName]) != "undefined" && this.classToSignature.hasOwnProperty(sigName))) {
            ii = ii + 1;
            sigName = (origClass + "V") + ii;
        }
        ;
        this.classToSignature[sigName] = classSig;
        this.classSignatures[classSig] = sigName;
        return sigName;
    };
    ;
    RangerAppWriterContext.prototype.createStaticMethod = function (withName, currC, nameNode, argsNode, fnBody, parser, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var s, m, rCtx, args, ii, arg, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        s = withName;
                        m = new RangerAppFunctionDesc();
                        m.name = s;
                        m.compiledName = this.transformWord(s);
                        m.node = nameNode;
                        m.nameNode = nameNode;
                        rCtx = this.getRoot();
                        m.fnCtx = rCtx.fork();
                        m.is_static = true;
                        m.nameNode.ifNoTypeSetToVoid();
                        args = argsNode;
                        m.fnBody = fnBody;
                        return [4 /*yield*/, parser.CheckTypeAnnotationOf(m.nameNode, rCtx, wr)];
                    case 1:
                        _a.sent();
                        ii = 0;
                        _a.label = 2;
                    case 2:
                        if (!(ii < args.children.length)) return [3 /*break*/, 5];
                        arg = args.children[ii];
                        if (arg.hasFlag("noeval")) {
                            return [3 /*break*/, 4];
                        }
                        p = new RangerAppParamDesc();
                        p.name = arg.vref;
                        if (p.name == "self") {
                            p.compiledName = "__self";
                        }
                        p.value_type = arg.value_type;
                        p.node = arg;
                        p.init_cnt = 1;
                        p.nameNode = arg;
                        return [4 /*yield*/, parser.CheckTypeAnnotationOf(arg, rCtx, wr)];
                    case 3:
                        _a.sent();
                        p.refType = 1;
                        p.varType = 4;
                        m.params.push(p);
                        arg.hasParamDesc = true;
                        arg.paramDesc = p;
                        arg.eval_type = arg.value_type;
                        arg.eval_type_name = arg.type_name;
                        if (arg.hasFlag("strong")) {
                            p.changeStrength(1, 1, p.nameNode);
                        }
                        else {
                            arg.setFlag("lives");
                            p.changeStrength(0, 1, p.nameNode);
                        }
                        _a.label = 4;
                    case 4:
                        ii++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        currC.addStaticMethod(m);
                        return [2 /*return*/, m];
                }
            });
        });
    };
    ;
    RangerAppWriterContext.prototype.canUseTypeInference = function (nameNode) {
        var b_allow_ti = this.hasCompilerFlag("allowti");
        var b_multitype = false;
        if (b_allow_ti) {
            var t_name = nameNode.type_name;
            if ((nameNode.eval_type_name.length) > 0) {
                t_name = nameNode.eval_type_name;
            }
            if (this.isDefinedClass(t_name)) {
                var cc = this.findClass(t_name);
                b_multitype = ((((cc.is_union || cc.is_system) || cc.is_system_union) || cc.is_trait) || cc.is_inherited) || ((cc.extends_classes.length) > 0);
            }
        }
        return b_allow_ti && (false == b_multitype);
    };
    ;
    RangerAppWriterContext.prototype.createOpStaticClass = function (name) {
        var nameWillBe = "operatorsOf" + name;
        var str = "";
        var i = 0;
        var __len = nameWillBe.length;
        while (i < __len) {
            var c = nameWillBe.charCodeAt(i);
            if (c == (".".charCodeAt(0))) {
                str = str + "_";
            }
            else {
                str = str + (nameWillBe.substring(i, (i + 1)));
            }
            i = i + 1;
        }
        ;
        if (this.isDefinedClass(str)) {
            return this.findClass(str);
        }
        var tpl_code = ("class " + str) + " {\n}";
        var code = new SourceCode(tpl_code);
        code.filename = str + ".ranger";
        var parser_1 = new RangerLispParser(code);
        parser_1.parse(false);
        var classRoot = parser_1.rootNode.children[0];
        var classNameNode = classRoot.getSecond();
        classNameNode.vref = str;
        var new_class = new RangerAppClassDesc();
        new_class.name = str;
        new_class.compiledName = str;
        new_class.is_operator_class = true;
        new_class.nameNode = classNameNode;
        new_class.classNode = classRoot;
        var subCtx = this.fork();
        subCtx.setCurrentClass(new_class);
        new_class.ctx = subCtx;
        var root = this.getRoot();
        root.addClass(str, new_class);
        classNameNode.clDesc = new_class;
        this.staticClassBodies.push(classRoot);
        return new_class;
    };
    ;
    RangerAppWriterContext.prototype.createTraitInstanceClass = function (traitName, instanceName, initParams, flowParser, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var res, ctx, tpl_code, code, parser_1, classRoot, classNameNode, new_class, root, cl, t, traitClassDef, name, t_2, origBody, match, params, traitParams, i, typeName, set_value, pArg, traitClass, i_1, pvar, ccopy, i_2, fnVar, mVs, i_3, variant, ccopy_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ctx = this.fork();
                        if (this.isDefinedClass(instanceName)) {
                            return [2 /*return*/, res];
                        }
                        if (this.isDefinedClass(traitName) == false) {
                            this.addError(initParams, "Could not find the trait " + traitName);
                            return [2 /*return*/, res];
                        }
                        tpl_code = ("class " + instanceName) + " {\n}";
                        code = new SourceCode(tpl_code);
                        code.filename = instanceName + ".ranger";
                        parser_1 = new RangerLispParser(code);
                        parser_1.parse(false);
                        classRoot = parser_1.rootNode.children[0];
                        classNameNode = classRoot.getSecond();
                        classNameNode.vref = instanceName;
                        new_class = new RangerAppClassDesc();
                        new_class.name = instanceName;
                        new_class.compiledName = instanceName;
                        new_class.nameNode = classNameNode;
                        new_class.node = classRoot;
                        new_class.classNode = classRoot;
                        new_class.is_generic_instance = true;
                        new_class.consumes_traits.push(traitName);
                        root = this.getRoot();
                        new_class.ctx = root.fork();
                        root.addClass(instanceName, new_class);
                        classNameNode.clDesc = new_class;
                        cl = new_class;
                        t = this.findClass(traitName);
                        traitClassDef = t.node;
                        name = t.name;
                        t_2 = ctx.findClass(name);
                        if ((t_2.extends_classes.length) > 0) {
                            ctx.addError(traitClassDef, ("Can not join trait " + name) + " because it is inherited. Currently on base classes can be used as traits.");
                            return [2 /*return*/, res];
                        }
                        if (!t_2.has_constructor) return [3 /*break*/, 1];
                        ctx.addError(traitClassDef, ("Can not join trait " + name) + " because it has a constructor function");
                        return [3 /*break*/, 14];
                    case 1:
                        origBody = cl.node.children[2];
                        match = new RangerArgMatch();
                        params = t_2.node.getExpressionProperty("params");
                        traitParams = new RangerTraitParams();
                        if ((typeof (params) !== "undefined" && params != null)) {
                            for (i = 0; i < params.children.length; i++) {
                                typeName = params.children[i];
                                set_value = "";
                                if ((initParams.children.length) > i) {
                                    pArg = initParams.children[i];
                                    match.add(typeName.vref, pArg.vref, ctx);
                                    set_value = pArg.vref;
                                }
                                else {
                                    match.add(typeName.vref, instanceName, ctx);
                                    set_value = instanceName;
                                }
                                traitParams.param_names.push(typeName.vref);
                                traitParams.values[typeName.vref] = set_value;
                            }
                            ;
                            cl.trait_params[name] = traitParams;
                        }
                        else {
                            match.add("T", cl.name, ctx);
                        }
                        ctx.setCurrentClass(cl);
                        traitClass = t_2;
                        i_1 = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i_1 < traitClass.variables.length)) return [3 /*break*/, 5];
                        pvar = traitClass.variables[i_1];
                        ccopy = pvar.node.rebuildWithType(match, true);
                        return [4 /*yield*/, flowParser.WalkCollectMethods(ccopy, ctx, wr)];
                    case 3:
                        _a.sent();
                        origBody.children.push(ccopy);
                        _a.label = 4;
                    case 4:
                        i_1++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        i_2 = 0;
                        _a.label = 6;
                    case 6:
                        if (!(i_2 < traitClass.defined_variants.length)) return [3 /*break*/, 12];
                        fnVar = traitClass.defined_variants[i_2];
                        mVs = traitClass.method_variants[fnVar];
                        i_3 = 0;
                        _a.label = 7;
                    case 7:
                        if (!(i_3 < mVs.variants.length)) return [3 /*break*/, 10];
                        variant = mVs.variants[i_3];
                        ccopy_1 = variant.node.rebuildWithType(match, true);
                        return [4 /*yield*/, flowParser.WalkCollectMethods(ccopy_1, ctx, wr)];
                    case 8:
                        _a.sent();
                        origBody.children.push(ccopy_1);
                        _a.label = 9;
                    case 9:
                        i_3++;
                        return [3 /*break*/, 7];
                    case 10:
                        ;
                        _a.label = 11;
                    case 11:
                        i_2++;
                        return [3 /*break*/, 6];
                    case 12:
                        ;
                        res = new_class;
                        /** unused:  const rootCtx : RangerAppWriterContext  = this.getRoot()   **/
                        return [4 /*yield*/, flowParser.WalkNode(new_class.node, ctx, wr)];
                    case 13:
                        /** unused:  const rootCtx : RangerAppWriterContext  = this.getRoot()   **/
                        _a.sent();
                        _a.label = 14;
                    case 14: return [2 /*return*/, res];
                }
            });
        });
    };
    ;
    RangerAppWriterContext.prototype.createOperator = function (fromNode) {
        var root = this.getRoot();
        if (root.initStdCommands()) {
            root.stdCommands.children.push(fromNode);
        }
    };
    ;
    RangerAppWriterContext.prototype.findClassMethod = function (cname, fname) {
        var res;
        if (this.isDefinedClass(cname)) {
            var cl = this.findClass(cname);
            for (var i = 0; i < cl.defined_variants.length; i++) {
                var fnVar = cl.defined_variants[i];
                if (fnVar == fname) {
                    var mVs = cl.method_variants[fnVar];
                    for (var i_1 = 0; i_1 < mVs.variants.length; i_1++) {
                        var variant = mVs.variants[i_1];
                        res = variant;
                        return res;
                    }
                    ;
                }
            }
            ;
        }
        return res;
    };
    ;
    RangerAppWriterContext.prototype.getFileWriter = function (path, fileName) {
        var root = this.getRoot();
        var fs = root.fileSystem;
        var file = fs.getFile(path, fileName);
        var wr;
        wr = file.getWriter();
        return wr;
    };
    ;
    RangerAppWriterContext.prototype.addTodo = function (node, descr) {
        var e = new RangerAppTodo();
        e.description = descr;
        e.todonode = node;
        var root = this.getRoot();
        root.todoList.push(e);
    };
    ;
    RangerAppWriterContext.prototype.setThisName = function (the_name) {
        var root = this.getRoot();
        root.thisName = the_name;
    };
    ;
    RangerAppWriterContext.prototype.getThisName = function () {
        var root = this.getRoot();
        return root.thisName;
    };
    ;
    RangerAppWriterContext.prototype.printLogs = function (logName) {
    };
    ;
    RangerAppWriterContext.prototype.log = function (node, logName, descr) {
    };
    ;
    RangerAppWriterContext.prototype.addMessage = function (node, descr) {
        var e = new RangerCompilerMessage();
        e.description = descr;
        e.node = node;
        var root = this.getRoot();
        root.compilerMessages.push(e);
    };
    ;
    RangerAppWriterContext.prototype.errCnt = function () {
        var root = this.getRoot();
        return root.compilerErrors.length;
    };
    ;
    RangerAppWriterContext.prototype.addError = function (targetnode, descr) {
        var e = new RangerCompilerMessage();
        e.description = descr;
        e.node = targetnode;
        var root = this.getRoot();
        root.compilerErrors.push(e);
    };
    ;
    RangerAppWriterContext.prototype.addParserError = function (targetnode, descr) {
        var e = new RangerCompilerMessage();
        e.description = descr;
        e.node = targetnode;
        var root = this.getRoot();
        root.parserErrors.push(e);
    };
    ;
    RangerAppWriterContext.prototype.addTemplateClass = function (name, node) {
        var root = this.getRoot();
        root.templateClassList.push(name);
        root.templateClassNodes[name] = node;
    };
    ;
    RangerAppWriterContext.prototype.hasTemplateNode = function (name) {
        var root = this.getRoot();
        return (typeof (root.templateClassNodes[name]) != "undefined" && root.templateClassNodes.hasOwnProperty(name));
    };
    ;
    RangerAppWriterContext.prototype.findTemplateNode = function (name) {
        var root = this.getRoot();
        return (root.templateClassNodes[name]);
    };
    ;
    RangerAppWriterContext.prototype.setStaticWriter = function (className, writer) {
        var root = this.getRoot();
        root.classStaticWriters[className] = writer;
    };
    ;
    RangerAppWriterContext.prototype.getStaticWriter = function (className) {
        var root = this.getRoot();
        return (root.classStaticWriters[className]);
    };
    ;
    RangerAppWriterContext.prototype.isEnumDefined = function (n) {
        if ((typeof (this.definedEnums[n]) != "undefined" && this.definedEnums.hasOwnProperty(n))) {
            return true;
        }
        if (typeof (this.parent) === "undefined") {
            return false;
        }
        return this.parent.isEnumDefined(n);
    };
    ;
    RangerAppWriterContext.prototype.getEnum = function (n) {
        var res;
        if ((typeof (this.definedEnums[n]) != "undefined" && this.definedEnums.hasOwnProperty(n))) {
            res = this.definedEnums[n];
            return res;
        }
        if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
            return this.parent.getEnum(n);
        }
        return res;
    };
    ;
    RangerAppWriterContext.prototype.isVarDefined = function (name) {
        if ((typeof (this.localVariables[name]) != "undefined" && this.localVariables.hasOwnProperty(name))) {
            return true;
        }
        if (typeof (this.parent) === "undefined") {
            return false;
        }
        return this.parent.isVarDefined(name);
    };
    ;
    RangerAppWriterContext.prototype.setFlag = function (name, value) {
        this.contextFlags[name] = value;
    };
    ;
    RangerAppWriterContext.prototype.getFlag = function (name) {
        if ((typeof (this.contextFlags[name]) != "undefined" && this.contextFlags.hasOwnProperty(name))) {
            return (this.contextFlags[name]);
        }
        if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
            return this.parent.getFlag(name);
        }
        return false;
    };
    ;
    RangerAppWriterContext.prototype.setSetting = function (name, value) {
        this.settings[name] = value;
    };
    ;
    RangerAppWriterContext.prototype.hasSetting = function (name) {
        if ((typeof (this.settings[name]) != "undefined" && this.settings.hasOwnProperty(name))) {
            return true;
        }
        if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
            return this.parent.hasSetting(name);
        }
        return false;
    };
    ;
    RangerAppWriterContext.prototype.getSetting = function (name) {
        if ((typeof (this.settings[name]) != "undefined" && this.settings.hasOwnProperty(name))) {
            return (this.settings[name]);
        }
        if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
            return this.parent.getSetting(name);
        }
        return "";
    };
    ;
    RangerAppWriterContext.prototype.setCompilerFlag = function (name, value) {
        var root = this.getRoot();
        root.compilerFlags[name] = value;
    };
    ;
    RangerAppWriterContext.prototype.hasCompilerFlag = function (s_name) {
        if ((typeof (this.compilerFlags[s_name]) != "undefined" && this.compilerFlags.hasOwnProperty(s_name))) {
            return (this.compilerFlags[s_name]);
        }
        if (typeof (this.parent) === "undefined") {
            return false;
        }
        return this.parent.hasCompilerFlag(s_name);
    };
    ;
    RangerAppWriterContext.prototype.setCompilerSetting = function (name, value) {
        var root = this.getRoot();
        root.compilerSettings[name] = value;
    };
    ;
    RangerAppWriterContext.prototype.getCompilerSetting = function (s_name) {
        if ((typeof (this.compilerSettings[s_name]) != "undefined" && this.compilerSettings.hasOwnProperty(s_name))) {
            return (this.compilerSettings[s_name]);
        }
        if (typeof (this.parent) === "undefined") {
            return "";
        }
        return this.parent.getCompilerSetting(s_name);
    };
    ;
    RangerAppWriterContext.prototype.hasCompilerSetting = function (s_name) {
        if ((typeof (this.compilerSettings[s_name]) != "undefined" && this.compilerSettings.hasOwnProperty(s_name))) {
            return true;
        }
        if (typeof (this.parent) === "undefined") {
            return false;
        }
        return this.parent.hasCompilerSetting(s_name);
    };
    ;
    RangerAppWriterContext.prototype.getVariableDef = function (name) {
        if ((typeof (this.localVariables[name]) != "undefined" && this.localVariables.hasOwnProperty(name))) {
            return (this.localVariables[name]);
        }
        if (typeof (this.parent) === "undefined") {
            var tmp = new RangerAppParamDesc();
            return tmp;
        }
        return this.parent.getVariableDef(name);
    };
    ;
    RangerAppWriterContext.prototype.findFunctionCtx = function () {
        if (this.is_function) {
            return this;
        }
        if (typeof (this.parent) === "undefined") {
            return this;
        }
        return this.parent.findFunctionCtx();
    };
    ;
    RangerAppWriterContext.prototype.getFnVarCnt = function (name) {
        var fnCtx = this.findFunctionCtx();
        var ii = 0;
        if ((typeof (fnCtx.defCounts[name]) != "undefined" && fnCtx.defCounts.hasOwnProperty(name))) {
            ii = (fnCtx.defCounts[name]);
            ii = 1 + ii;
        }
        else {
            fnCtx.defCounts[name] = ii;
            return 0;
        }
        var scope_has = this.isVarDefined(((name + "_") + ii));
        while (scope_has) {
            ii = 1 + ii;
            scope_has = this.isVarDefined(((name + "_") + ii));
        }
        ;
        fnCtx.defCounts[name] = ii;
        return ii;
    };
    ;
    RangerAppWriterContext.prototype.debugVars = function () {
        console.log("--- context vars ---");
        for (var i = 0; i < this.localVarNames.length; i++) {
            var na = this.localVarNames[i];
            console.log("var => " + na);
        }
        ;
        if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
            this.parent.debugVars();
        }
    };
    ;
    RangerAppWriterContext.prototype.getVarTotalCnt = function (name) {
        var fnCtx = this;
        var ii = 0;
        if ((typeof (fnCtx.defCounts[name]) != "undefined" && fnCtx.defCounts.hasOwnProperty(name))) {
            ii = (fnCtx.defCounts[name]);
        }
        if ((typeof (fnCtx.parent) !== "undefined" && fnCtx.parent != null)) {
            ii = ii + fnCtx.parent.getVarTotalCnt(name);
        }
        if (this.isVarDefined(name)) {
            ii = ii + 1;
        }
        return ii;
    };
    ;
    RangerAppWriterContext.prototype.getFnVarCnt2 = function (name) {
        var fnCtx = this;
        var ii = 0;
        if ((typeof (fnCtx.defCounts[name]) != "undefined" && fnCtx.defCounts.hasOwnProperty(name))) {
            ii = (fnCtx.defCounts[name]);
            ii = 1 + ii;
            fnCtx.defCounts[name] = ii;
        }
        else {
            fnCtx.defCounts[name] = 1;
        }
        if ((typeof (fnCtx.parent) !== "undefined" && fnCtx.parent != null)) {
            ii = ii + fnCtx.parent.getFnVarCnt2(name);
        }
        var scope_has = this.isVarDefined(name);
        if (scope_has) {
            ii = 1 + ii;
        }
        var scope_has_2 = this.isVarDefined(((name + "_") + ii));
        while (scope_has_2) {
            ii = 1 + ii;
            scope_has_2 = this.isVarDefined(((name + "_") + ii));
        }
        ;
        return ii;
    };
    ;
    RangerAppWriterContext.prototype.getFnVarCnt3 = function (name) {
        var classLevel = this.findMethodLevelContext();
        var fnCtx = this;
        var ii = 0;
        if ((typeof (fnCtx.defCounts[name]) != "undefined" && fnCtx.defCounts.hasOwnProperty(name))) {
            ii = (fnCtx.defCounts[name]);
            fnCtx.defCounts[name] = ii + 1;
        }
        else {
            fnCtx.defCounts[name] = 1;
        }
        if (classLevel.isVarDefined(name)) {
            ii = ii + 1;
        }
        var scope_has = this.isVarDefined(((name + "_") + ii));
        while (scope_has) {
            ii = 1 + ii;
            scope_has = this.isVarDefined(((name + "_") + ii));
        }
        ;
        return ii;
    };
    ;
    RangerAppWriterContext.prototype.isMemberVariable = function (name) {
        if (this.isVarDefined(name)) {
            var vDef = this.getVariableDef(name);
            if (vDef.varType == 8) {
                return true;
            }
        }
        return false;
    };
    ;
    RangerAppWriterContext.prototype.defineVariable = function (name, desc) {
        var cnt = 0;
        var fnLevel = this.findMethodLevelContext();
        if (false == (((desc.varType == 8) || (desc.varType == 4)) || (desc.varType == 10))) {
            cnt = fnLevel.getFnVarCnt3(name);
        }
        if (0 == cnt) {
            switch (name) {
                case "self":
                    desc.compiledName = "__self";
                    break;
                case "process":
                    desc.compiledName = "_process";
                    break;
                case "len":
                    desc.compiledName = "__len";
                    break;
                default:
                    desc.compiledName = name;
                    break;
            }
            ;
        }
        else {
            desc.compiledName = (name + "_") + cnt;
        }
        if (desc.varType == 8) {
        }
        this.localVariables[name] = desc;
        this.localVarNames.push(name);
    };
    ;
    RangerAppWriterContext.prototype.isDefinedClass = function (name) {
        if ((typeof (this.definedClasses[name]) != "undefined" && this.definedClasses.hasOwnProperty(name))) {
            return true;
        }
        else {
            if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
                return this.parent.isDefinedClass(name);
            }
        }
        return false;
    };
    ;
    RangerAppWriterContext.prototype.getRoot = function () {
        if (typeof (this.parent) === "undefined") {
            return this;
        }
        return this.parent.getRoot();
    };
    ;
    RangerAppWriterContext.prototype.getClasses = function () {
        var list = [];
        for (var i = 0; i < this.definedClassList.length; i++) {
            var n = this.definedClassList[i];
            list.push((this.definedClasses[n]));
        }
        ;
        return list;
    };
    ;
    RangerAppWriterContext.prototype.addClass = function (name, desc) {
        var root = this.getRoot();
        if ((typeof (root.definedClasses[name]) != "undefined" && root.definedClasses.hasOwnProperty(name))) {
        }
        else {
            root.definedClasses[name] = desc;
            root.definedClassList.push(name);
        }
    };
    ;
    RangerAppWriterContext.prototype.findClass = function (name) {
        var root = this.getRoot();
        return (root.definedClasses[name]);
    };
    ;
    RangerAppWriterContext.prototype.hasClass = function (name) {
        var root = this.getRoot();
        return (typeof (root.definedClasses[name]) != "undefined" && root.definedClasses.hasOwnProperty(name));
    };
    ;
    RangerAppWriterContext.prototype.getCurrentMethod = function () {
        if ((typeof (this.currentMethod) !== "undefined" && this.currentMethod != null)) {
            return this.currentMethod;
        }
        if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
            return this.parent.getCurrentMethod();
        }
        return new RangerAppFunctionDesc();
    };
    ;
    RangerAppWriterContext.prototype.setCurrentClass = function (cc) {
        this.in_class = true;
        this.currentClass = cc;
    };
    ;
    RangerAppWriterContext.prototype.disableCurrentClass = function () {
        if (this.in_class) {
            this.in_class = false;
        }
        if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
            this.parent.disableCurrentClass();
        }
    };
    ;
    RangerAppWriterContext.prototype.hasCurrentClass = function () {
        if (this.in_class && ((typeof (this.currentClass) !== "undefined" && this.currentClass != null))) {
            return true;
        }
        if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
            return this.parent.hasCurrentClass();
        }
        return false;
    };
    ;
    RangerAppWriterContext.prototype.getCurrentClass = function () {
        var non = this.currentClass;
        if (this.in_class && ((typeof (non) !== "undefined" && non != null))) {
            return non;
        }
        if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
            return this.parent.getCurrentClass();
        }
        return non;
    };
    ;
    RangerAppWriterContext.prototype.restartExpressionLevel = function () {
        this.expr_restart = true;
    };
    ;
    RangerAppWriterContext.prototype.newBlock = function () {
        this.expr_restart_block = true;
    };
    ;
    RangerAppWriterContext.prototype.isInExpression = function () {
        if ((this.expr_stack.length) > 0) {
            return true;
        }
        if ((((typeof (this.parent) !== "undefined" && this.parent != null)) && (this.expr_restart_block == false)) && (this.expr_restart == false)) {
            return this.parent.isInExpression();
        }
        return false;
    };
    ;
    RangerAppWriterContext.prototype.expressionLevel = function () {
        var level = this.expr_stack.length;
        if ((((typeof (this.parent) !== "undefined" && this.parent != null)) && (this.expr_restart == false)) && (this.expr_restart_block == false)) {
            return level + this.parent.expressionLevel();
        }
        return level;
    };
    ;
    RangerAppWriterContext.prototype.setInExpr = function () {
        this.expr_stack.push(true);
    };
    ;
    RangerAppWriterContext.prototype.unsetInExpr = function () {
        this.expr_stack.pop();
    };
    ;
    RangerAppWriterContext.prototype.getErrorCount = function () {
        var cnt = this.compilerErrors.length;
        if (typeof (this.parent) != "undefined") {
            cnt = cnt + this.parent.getErrorCount();
        }
        return cnt;
    };
    ;
    RangerAppWriterContext.prototype.isInStatic = function () {
        if (this.in_static_method) {
            return true;
        }
        if (typeof (this.parent) != "undefined") {
            return this.parent.isInStatic();
        }
        return false;
    };
    ;
    RangerAppWriterContext.prototype.isInMain = function () {
        if (this.in_main) {
            return true;
        }
        if (typeof (this.parent) != "undefined") {
            return this.parent.isInMain();
        }
        return false;
    };
    ;
    RangerAppWriterContext.prototype.isInMethod = function () {
        if ((this.method_stack.length) > 0) {
            return true;
        }
        if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
            return this.parent.isInMethod();
        }
        return false;
    };
    ;
    RangerAppWriterContext.prototype.setInMethod = function () {
        this.method_stack.push(true);
    };
    ;
    RangerAppWriterContext.prototype.unsetInMethod = function () {
        this.method_stack.pop();
    };
    ;
    RangerAppWriterContext.prototype.findMethodLevelContext = function () {
        var res;
        if (this.function_level_context) {
            res = this;
            return res;
        }
        if (typeof (this.parent) != "undefined") {
            return this.parent.findMethodLevelContext();
        }
        res = this;
        return res;
    };
    ;
    RangerAppWriterContext.prototype.findClassLevelContext = function () {
        var res;
        if (this.class_level_context) {
            res = this;
            return res;
        }
        if (typeof (this.parent) != "undefined") {
            return this.parent.findClassLevelContext();
        }
        res = this;
        return res;
    };
    ;
    RangerAppWriterContext.prototype.fork = function () {
        var new_ctx = new RangerAppWriterContext();
        new_ctx.parent = this;
        return new_ctx;
    };
    ;
    RangerAppWriterContext.prototype.getRootFile = function () {
        var root = this.getRoot();
        return root.rootFile;
    };
    ;
    RangerAppWriterContext.prototype.setRootFile = function (file_name) {
        var root = this.getRoot();
        root.rootFile = file_name;
    };
    ;
    return RangerAppWriterContext;
}());
exports.RangerAppWriterContext = RangerAppWriterContext;
var CodeFile = /** @class */ (function () {
    function CodeFile(filePath, fileName) {
        this.path_name = "";
        this.name = "";
        this.import_list = {};
        this.import_names = [];
        this.name = fileName;
        this.path_name = filePath;
        this.writer = new CodeWriter();
        this.writer.createTag("imports");
    }
    CodeFile.prototype.addImport = function (import_name) {
        if (false == ((typeof (this.import_list[import_name]) != "undefined" && this.import_list.hasOwnProperty(import_name)))) {
            this.import_list[import_name] = import_name;
            this.import_names.push(import_name);
        }
    };
    ;
    CodeFile.prototype.rewrite = function (newString) {
        this.writer.rewrite(newString);
    };
    ;
    CodeFile.prototype.testCreateWriter = function () {
        return new CodeWriter();
    };
    ;
    CodeFile.prototype.getImports = function () {
        return this.import_names;
    };
    ;
    CodeFile.prototype.getWriter = function () {
        this.writer.ownerFile = this;
        return this.writer;
    };
    ;
    CodeFile.prototype.getCode = function () {
        return this.writer.getCode();
    };
    ;
    return CodeFile;
}());
exports.CodeFile = CodeFile;
var CodeFileSystem = /** @class */ (function () {
    function CodeFileSystem() {
        this.files = [];
    }
    CodeFileSystem.prototype.getFile = function (path, name) {
        for (var idx = 0; idx < this.files.length; idx++) {
            var file = this.files[idx];
            if ((file.path_name == path) && (file.name == name)) {
                return file;
            }
        }
        ;
        var new_file = new CodeFile(path, name);
        new_file.fileSystem = this;
        this.files.push(new_file);
        return new_file;
    };
    ;
    CodeFileSystem.prototype.mkdir = function (path) {
        var parts = path.split("/");
        var curr_path = "";
        for (var i = 0; i < parts.length; i++) {
            var p = parts[i];
            curr_path = (curr_path + p) + "/";
            if (false == (require("fs").existsSync(curr_path))) {
                require("fs").mkdirSync(curr_path);
            }
        }
        ;
    };
    ;
    CodeFileSystem.prototype.saveTo = function (path, verbose) {
        console.log("Saving results to path : " + path);
        for (var idx = 0; idx < this.files.length; idx++) {
            var file = this.files[idx];
            var file_path = (path + "/") + file.path_name;
            this.mkdir(file_path);
            if (verbose) {
                console.log((("Writing to file " + file_path) + "/") + file.name);
            }
            var file_content = file.getCode();
            if ((file_content.length) > 0) {
                require("fs").writeFileSync(file_path + "/" + file.name.trim(), file_content);
            }
        }
        ;
    };
    ;
    return CodeFileSystem;
}());
exports.CodeFileSystem = CodeFileSystem;
var CodeSlice = /** @class */ (function () {
    function CodeSlice() {
        this.code = "";
    }
    CodeSlice.prototype.getCode = function () {
        if (typeof (this.writer) === "undefined") {
            return this.code;
        }
        return this.writer.getCode();
    };
    ;
    return CodeSlice;
}());
exports.CodeSlice = CodeSlice;
var CodeWriter = /** @class */ (function () {
    function CodeWriter() {
        this.tagName = ""; /** note: unused */
        this.codeStr = ""; /** note: unused */
        this.currentLine = "";
        this.tabStr = "  ";
        this.nlStr = "\n";
        this.lineNumber = 1; /** note: unused */
        this.indentAmount = 0;
        this.compiledTags = {};
        this.tags = {};
        this.slices = [];
        this.forks = [];
        this.tagOffset = 0; /** note: unused */
        this.had_nl = true; /** note: unused */
        var new_slice = new CodeSlice();
        this.slices.push(new_slice);
        this.current_slice = new_slice;
    }
    CodeWriter.prototype.rewrite = function (newString) {
        this.slices.length = 0;
        this.forks.length = 0;
        this.currentLine = "";
        var new_slice = new CodeSlice();
        this.slices.push(new_slice);
        new_slice.code = newString;
        this.current_slice = new_slice;
    };
    ;
    CodeWriter.prototype.getFilesystem = function () {
        if (typeof (this.ownerFile) === "undefined") {
            if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
                return this.parent.getFilesystem();
            }
            return new CodeFileSystem();
        }
        var fs = this.ownerFile.fileSystem;
        return fs;
    };
    ;
    CodeWriter.prototype.getFileWriter = function (path, fileName) {
        if (typeof (this.ownerFile) === "undefined") {
            if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
                return this.parent.getFileWriter(path, fileName);
            }
        }
        var fs = this.ownerFile.fileSystem;
        var file = fs.getFile(path, fileName);
        var wr = file.getWriter();
        return wr;
    };
    ;
    CodeWriter.prototype.getImports = function () {
        var p = this;
        while ((typeof (p.ownerFile) === "undefined") && ((typeof (p.parent) !== "undefined" && p.parent != null))) {
            p = p.parent;
        }
        ;
        if ((typeof (p.ownerFile) !== "undefined" && p.ownerFile != null)) {
            var f = p.ownerFile;
            return f.import_names;
        }
        var nothing = [];
        return nothing;
    };
    ;
    CodeWriter.prototype.addImport = function (name) {
        if ((typeof (this.ownerFile) !== "undefined" && this.ownerFile != null)) {
            this.ownerFile.addImport(name);
        }
        else {
            if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
                this.parent.addImport(name);
            }
        }
    };
    ;
    CodeWriter.prototype.indent = function (delta) {
        this.indentAmount = this.indentAmount + delta;
        if (this.indentAmount < 0) {
            this.indentAmount = 0;
        }
    };
    ;
    CodeWriter.prototype.addIndent = function () {
        var i = 0;
        if (0 == (this.currentLine.length)) {
            while (i < this.indentAmount) {
                this.currentLine = this.currentLine + this.tabStr;
                i = i + 1;
            }
            ;
        }
    };
    ;
    CodeWriter.prototype.createTag = function (name) {
        var new_writer = new CodeWriter();
        var new_slice = new CodeSlice();
        this.tags[name] = this.slices.length;
        this.slices.push(new_slice);
        new_slice.writer = new_writer;
        new_writer.indentAmount = this.indentAmount;
        var new_active_slice = new CodeSlice();
        this.slices.push(new_active_slice);
        this.current_slice = new_active_slice;
        new_writer.parent = this;
        return new_writer;
    };
    ;
    CodeWriter.prototype.getTag = function (name) {
        if ((typeof (this.tags[name]) != "undefined" && this.tags.hasOwnProperty(name))) {
            var idx = (this.tags[name]);
            var slice = this.slices[idx];
            return slice.writer;
        }
        else {
            if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
                return this.parent.getTag(name);
            }
        }
        return this;
    };
    ;
    CodeWriter.prototype.hasTag = function (name) {
        if ((typeof (this.tags[name]) != "undefined" && this.tags.hasOwnProperty(name))) {
            return true;
        }
        else {
            if ((typeof (this.parent) !== "undefined" && this.parent != null)) {
                return this.parent.hasTag(name);
            }
        }
        return false;
    };
    ;
    CodeWriter.prototype.fork = function () {
        var new_writer = new CodeWriter();
        var new_slice = new CodeSlice();
        this.slices.push(new_slice);
        new_slice.writer = new_writer;
        new_writer.indentAmount = this.indentAmount;
        new_writer.parent = this;
        var new_active_slice = new CodeSlice();
        this.slices.push(new_active_slice);
        this.current_slice = new_active_slice;
        return new_writer;
    };
    ;
    CodeWriter.prototype.newline = function () {
        if ((this.currentLine.length) > 0) {
            this.out("", true);
        }
    };
    ;
    CodeWriter.prototype.line_end = function (str) {
        if ((this.currentLine.length) > 0) {
            if ((str.charCodeAt(0)) != (this.currentLine.charCodeAt(((this.currentLine.length) - 1)))) {
                this.out(str, false);
            }
        }
    };
    ;
    CodeWriter.prototype.writeSlice = function (str, newLine) {
        this.addIndent();
        this.currentLine = this.currentLine + str;
        if (newLine) {
            this.current_slice.code = (this.current_slice.code + this.currentLine) + this.nlStr;
            this.currentLine = "";
        }
    };
    ;
    CodeWriter.prototype.out = function (str, newLine) {
        var lines = str.split("\n");
        var rowCnt = lines.length;
        if (rowCnt == 1) {
            this.writeSlice(str, newLine);
        }
        else {
            for (var idx = 0; idx < lines.length; idx++) {
                var row = lines[idx];
                this.addIndent();
                if (idx < (rowCnt - 1)) {
                    this.writeSlice(row.trim(), true);
                }
                else {
                    this.writeSlice(row, newLine);
                }
            }
            ;
        }
    };
    ;
    CodeWriter.prototype.raw = function (str, newLine) {
        var lines = str.split("\n");
        var rowCnt = lines.length;
        if (rowCnt == 1) {
            this.writeSlice(str, newLine);
        }
        else {
            for (var idx = 0; idx < lines.length; idx++) {
                var row = lines[idx];
                this.addIndent();
                if (idx < (rowCnt - 1)) {
                    this.writeSlice(row, true);
                }
                else {
                    this.writeSlice(row, newLine);
                }
            }
            ;
        }
    };
    ;
    CodeWriter.prototype.getCode = function () {
        var res = "";
        for (var idx = 0; idx < this.slices.length; idx++) {
            var slice = this.slices[idx];
            res = res + slice.getCode();
        }
        ;
        res = res + this.currentLine;
        return res;
    };
    ;
    // typescript static 
    CodeWriter.emptyWithFS = function () {
        var wr = new CodeWriter();
        var file = new CodeFile(".", "emptyFile.txt");
        file.writer = wr;
        file.fileSystem = new CodeFileSystem();
        wr.ownerFile = file;
        return wr;
    };
    ;
    return CodeWriter;
}());
exports.CodeWriter = CodeWriter;
var RangerLispParser = /** @class */ (function () {
    function RangerLispParser(code_module) {
        this.__len = 0;
        this.i = 0;
        this.last_line_start = 0; /** note: unused */
        this.current_line_index = 0;
        this.parents = [];
        this.paren_cnt = 0;
        this.get_op_pred = 0; /** note: unused */
        this.had_error = false;
        this.disableOperators = false;
        this.buff = code_module.code;
        this.code = code_module;
        this.__len = (this.buff).length;
        this.rootNode = new CodeNode(this.code, 0, 0);
        this.rootNode.is_block_node = true;
        this.rootNode.expression = true;
        this.curr_node = this.rootNode;
        this.parents.push(this.curr_node);
        this.paren_cnt = 1;
    }
    RangerLispParser.prototype.joo = function (cm) {
        /** unused:  const ll : number  = cm.code.length   **/
    };
    ;
    RangerLispParser.prototype.parse_raw_annotation = function () {
        var sp = this.i;
        var ep = this.i;
        this.i = this.i + 1;
        sp = this.i;
        ep = this.i;
        if (this.i < this.__len) {
            var a_node2 = new CodeNode(this.code, sp, ep);
            a_node2.expression = true;
            a_node2.row = this.current_line_index;
            this.curr_node = a_node2;
            this.parents.push(a_node2);
            this.i = this.i + 1;
            this.paren_cnt = this.paren_cnt + 1;
            this.parse(false);
            return a_node2;
        }
        else {
        }
        return new CodeNode(this.code, sp, ep);
    };
    ;
    RangerLispParser.prototype.skip_space = function (is_block_parent) {
        var s = this.buff;
        var did_break = false;
        if (this.i >= this.__len) {
            return true;
        }
        var c = s.charCodeAt(this.i);
        /** unused:  const bb : boolean  = c == (46)   **/
        while ((this.i < this.__len) && (c <= 32)) {
            if (c < 8) {
                this.i = this.__len;
                return true;
            }
            if (is_block_parent && ((c == 10) || (c == 13))) {
                this.end_expression();
                this.current_line_index = this.current_line_index + 1;
                did_break = true;
                break;
            }
            var had_break = false;
            while (((this.i < this.__len) && (c == 10)) || (c == 13)) {
                had_break = true;
                this.i = this.i + 1;
                if (this.i >= this.__len) {
                    return true;
                }
                c = s.charCodeAt(this.i);
                if ((c == 10) || (c == 13)) {
                }
            }
            ;
            if (had_break) {
                this.current_line_index = this.current_line_index + 1;
            }
            else {
                this.i = 1 + this.i;
                if (this.i >= this.__len) {
                    return true;
                }
                c = s.charCodeAt(this.i);
            }
        }
        ;
        return did_break;
    };
    ;
    RangerLispParser.prototype.end_expression = function () {
        this.i = 1 + this.i;
        if (this.i >= this.__len) {
            return false;
        }
        this.paren_cnt = this.paren_cnt - 1;
        if (this.paren_cnt < 0) {
            console.log("Parser error ) mismatch");
        }
        this.parents.pop();
        if ((typeof (this.curr_node) !== "undefined" && this.curr_node != null)) {
            this.curr_node.ep = this.i;
            this.curr_node.infix_operator = false;
        }
        if ((this.parents.length) > 0) {
            this.curr_node = this.parents[((this.parents.length) - 1)];
        }
        else {
            this.curr_node = this.rootNode;
        }
        this.curr_node.infix_operator = false;
        return true;
    };
    ;
    RangerLispParser.prototype.getOperator = function (disabled) {
        if (disabled) {
            return 0;
        }
        var s = this.buff;
        if ((this.i + 2) >= this.__len) {
            return 0;
        }
        var c = s.charCodeAt(this.i);
        var c2 = s.charCodeAt((this.i + 1));
        switch (c) {
            case 42:
                this.i = this.i + 1;
                return 14;
            case 47:
                this.i = this.i + 1;
                return 14;
            case 37:
                this.i = this.i + 1;
                return 14;
            case 43:
                this.i = this.i + 1;
                return 13;
            case 45:
                this.i = this.i + 1;
                return 13;
            case 60:
                if (c2 == (61)) {
                    this.i = this.i + 2;
                    return 11;
                }
                this.i = this.i + 1;
                return 11;
            case 62:
                if (c2 == (61)) {
                    this.i = this.i + 2;
                    return 11;
                }
                this.i = this.i + 1;
                return 11;
            case 33:
                if (c2 == (61)) {
                    this.i = this.i + 2;
                    return 10;
                }
                return 0;
            case 61:
                if (c2 == (61)) {
                    this.i = this.i + 2;
                    return 10;
                }
                this.i = this.i + 1;
                return 3;
            case 38:
                if (c2 == (38)) {
                    this.i = this.i + 2;
                    return 6;
                }
                return 0;
            case 124:
                if (c2 == (124)) {
                    this.i = this.i + 2;
                    return 5;
                }
                return 0;
            default:
                break;
        }
        ;
        return 0;
    };
    ;
    RangerLispParser.prototype.isOperator = function (disabled) {
        if (disabled) {
            return 0;
        }
        var s = this.buff;
        if ((this.i - 2) > this.__len) {
            return 0;
        }
        var c = s.charCodeAt(this.i);
        var c2 = s.charCodeAt((this.i + 1));
        switch (c) {
            case 42:
                return 1;
            case 47:
                return 14;
            case 43:
                return 13;
            case 37:
                return 14;
            case 45:
                return 13;
            case 60:
                if (c2 == (61)) {
                    return 11;
                }
                return 11;
            case 62:
                if (c2 == (61)) {
                    return 11;
                }
                return 11;
            case 33:
                if (c2 == (61)) {
                    return 10;
                }
                return 0;
            case 61:
                if (c2 == (61)) {
                    return 10;
                }
                return 3;
            case 38:
                if (c2 == (38)) {
                    return 6;
                }
                return 0;
            case 124:
                if (c2 == (124)) {
                    return 5;
                }
                return 0;
            default:
                break;
        }
        ;
        return 0;
    };
    ;
    RangerLispParser.prototype.getOperatorPred = function (str, disabled) {
        if (disabled) {
            return 0;
        }
        switch (str) {
            case "<":
                return 11;
            case ">":
                return 11;
            case "<=":
                return 11;
            case ">=":
                return 11;
            case "==":
                return 10;
            case "!=":
                return 10;
            case "=":
                return 3;
            case "&&":
                return 6;
            case "||":
                return 5;
            case "+":
                return 13;
            case "-":
                return 13;
            case "%":
                return 14;
            case "*":
                return 14;
            case "/":
                return 14;
            default:
                break;
        }
        ;
        return 0;
    };
    ;
    RangerLispParser.prototype.insert_node = function (p_node) {
        var push_target = this.curr_node;
        if (this.curr_node.infix_operator) {
            push_target = this.curr_node.infix_node;
            if (push_target.to_the_right) {
                push_target = push_target.right_node;
                p_node.parent = push_target;
            }
        }
        push_target.children.push(p_node);
    };
    ;
    RangerLispParser.prototype.parse_attributes = function () {
        var s = this.buff;
        var last_i = 0;
        var do_break = false;
        /** unused:  const attr_name : string  = ""   **/
        var sp = this.i;
        var ep = this.i;
        var c = 0;
        var cc1 = 0;
        var cc2 = 0;
        cc1 = s.charCodeAt(this.i);
        while (this.i < this.__len) {
            last_i = this.i;
            while ((this.i < this.__len) && ((s.charCodeAt(this.i)) <= 32)) {
                this.i = 1 + this.i;
            }
            ;
            cc1 = s.charCodeAt(this.i);
            cc2 = s.charCodeAt((this.i + 1));
            if (this.i >= this.__len) {
                break;
            }
            if (cc1 == (62)) {
                return do_break;
            }
            if ((cc1 == (47)) && (cc2 == (62))) {
                this.i = 2 + this.i;
                return true;
            }
            sp = this.i;
            ep = this.i;
            c = s.charCodeAt(this.i);
            while ((this.i < this.__len) && ((((((c >= 65) && (c <= 90)) || ((c >= 97) && (c <= 122))) || ((c >= 48) && (c <= 57))) || (c == (95))) || (c == (45)))) {
                this.i = 1 + this.i;
                c = s.charCodeAt(this.i);
            }
            ;
            this.i = this.i - 1;
            var an_sp = sp;
            var an_ep = this.i;
            c = s.charCodeAt(this.i);
            while ((this.i < this.__len) && (c != (61))) {
                this.i = 1 + this.i;
                c = s.charCodeAt(this.i);
            }
            ;
            if (c == (61)) {
                this.i = 1 + this.i;
            }
            while ((this.i < this.__len) && ((s.charCodeAt(this.i)) <= 32)) {
                this.i = 1 + this.i;
            }
            ;
            if (this.i >= this.__len) {
                break;
            }
            c = s.charCodeAt(this.i);
            if (c == (123)) {
                var cNode = this.curr_node;
                var new_attr = new CodeNode(this.code, sp, ep);
                new_attr.value_type = 21;
                new_attr.parsed_type = new_attr.value_type;
                new_attr.vref = s.substring(an_sp, (an_ep + 1));
                new_attr.string_value = s.substring(sp, ep);
                this.curr_node.attrs.push(new_attr);
                this.curr_node = new_attr;
                this.paren_cnt = this.paren_cnt + 1;
                var new_qnode = new CodeNode(this.code, this.i, this.i);
                new_qnode.expression = true;
                this.insert_node(new_qnode);
                this.parents.push(new_qnode);
                this.curr_node = new_qnode;
                this.i = 1 + this.i;
                this.parse(false);
                this.curr_node = cNode;
                continue;
            }
            if ((c == 34) || (c == (39))) {
                this.i = this.i + 1;
                sp = this.i;
                ep = this.i;
                c = s.charCodeAt(this.i);
                while (((this.i < this.__len) && (c != 34)) && (c != (39))) {
                    this.i = 1 + this.i;
                    c = s.charCodeAt(this.i);
                }
                ;
                ep = this.i;
                if ((this.i < this.__len) && (ep > sp)) {
                    var new_attr_1 = new CodeNode(this.code, sp, ep);
                    new_attr_1.value_type = 21;
                    new_attr_1.parsed_type = new_attr_1.value_type;
                    new_attr_1.vref = s.substring(an_sp, (an_ep + 1));
                    new_attr_1.string_value = s.substring(sp, ep);
                    this.curr_node.attrs.push(new_attr_1);
                }
                this.i = 1 + this.i;
            }
            if (last_i == this.i) {
                this.i = 1 + this.i;
            }
        }
        ;
        return do_break;
    };
    ;
    RangerLispParser.prototype.parseXML = function () {
        var s = this.buff;
        var c = 0;
        /** unused:  const next_c : number  = 0   **/
        /** unused:  const fc : number  = 0   **/
        /** unused:  let new_node : CodeNode    **/
        var sp = this.i;
        var ep = this.i;
        var last_i = 0;
        var cc1 = 0;
        var cc2 = 0;
        var tag_depth = 0;
        while (this.i < this.__len) {
            last_i = this.i;
            if (this.i >= (this.__len - 1)) {
                break;
            }
            cc1 = s.charCodeAt(this.i);
            cc2 = s.charCodeAt((this.i + 1));
            if (cc1 == (123)) {
                var cNode = this.curr_node;
                this.paren_cnt = this.paren_cnt + 1;
                var new_qnode = new CodeNode(this.code, this.i, this.i);
                new_qnode.expression = true;
                this.insert_node(new_qnode);
                this.parents.push(new_qnode);
                this.curr_node = new_qnode;
                this.i = 1 + this.i;
                this.parse(false);
                this.curr_node = cNode;
                continue;
            }
            if (cc1 == (62)) {
                this.i = this.i + 1;
                cc1 = s.charCodeAt(this.i);
                cc2 = s.charCodeAt((this.i + 1));
                continue;
            }
            if (((47) == cc1) && (cc2 == (62))) {
                tag_depth = tag_depth - 1;
                this.i = this.i + 2;
                if (tag_depth <= 0) {
                    this.parents.pop();
                    var p_cnt = this.parents.length;
                    var last_parent = this.parents[(p_cnt - 1)];
                    this.curr_node = last_parent;
                    return;
                }
                continue;
            }
            if (this.i >= this.__len) {
                break;
            }
            if (((60) == cc1) && (cc2 == (47))) {
                tag_depth = tag_depth - 1;
                this.i = this.i + 2;
                sp = this.i;
                ep = this.i;
                c = s.charCodeAt(this.i);
                while (((this.i < this.__len) && (c > 32)) && (c != (62))) {
                    this.i = 1 + this.i;
                    c = s.charCodeAt(this.i);
                }
                ;
                ep = this.i;
                this.parents.pop();
                var p_cnt_1 = this.parents.length;
                var last_parent_1 = this.parents[(p_cnt_1 - 1)];
                this.curr_node = last_parent_1;
                if (tag_depth <= 0) {
                    return;
                }
                continue;
            }
            if (cc1 == (60)) {
                this.i = this.i + 1;
                sp = this.i;
                ep = this.i;
                c = s.charCodeAt(this.i);
                while (((this.i < this.__len) && (c != (62))) && (((((((c >= 65) && (c <= 90)) || ((c >= 97) && (c <= 122))) || ((c >= 48) && (c <= 57))) || (c == 95)) || (c == 46)) || (c == 64))) {
                    this.i = 1 + this.i;
                    c = s.charCodeAt(this.i);
                }
                ;
                tag_depth = tag_depth + 1;
                ep = this.i;
                var new_tag = s.substring(sp, ep);
                if (typeof (this.curr_node) === "undefined") {
                    var new_rnode = new CodeNode(this.code, sp, ep);
                    new_rnode.vref = new_tag;
                    new_rnode.value_type = 19;
                    new_rnode.parsed_type = new_rnode.value_type;
                    this.rootNode = new_rnode;
                    this.parents.push(new_rnode);
                    this.curr_node = new_rnode;
                }
                else {
                    var new_node_2 = new CodeNode(this.code, sp, ep);
                    new_node_2.vref = new_tag;
                    new_node_2.value_type = 19;
                    new_node_2.parsed_type = new_node_2.value_type;
                    this.curr_node.children.push(new_node_2);
                    new_node_2.parent = this.curr_node;
                    this.parents.push(new_node_2);
                    this.curr_node = new_node_2;
                }
                if (this.parse_attributes()) {
                    this.parents.pop();
                    var p_cnt_2 = this.parents.length;
                    var last_parent_2 = this.parents[(p_cnt_2 - 1)];
                    this.curr_node = last_parent_2;
                    tag_depth = tag_depth - 1;
                    if (tag_depth <= 0) {
                        return;
                    }
                    continue;
                }
                continue;
            }
            if ((typeof (this.curr_node) !== "undefined" && this.curr_node != null)) {
                sp = this.i;
                ep = this.i;
                c = s.charCodeAt(this.i);
                while (((this.i < this.__len) && (c != (60))) && (c != (123))) {
                    this.i = 1 + this.i;
                    c = s.charCodeAt(this.i);
                }
                ;
                ep = this.i;
                if (ep > sp) {
                    var new_node_3 = new CodeNode(this.code, sp, ep);
                    new_node_3.string_value = s.substring(sp, ep);
                    new_node_3.value_type = 20;
                    new_node_3.parsed_type = new_node_3.value_type;
                    this.curr_node.children.push(new_node_3);
                    new_node_3.parent = this.curr_node;
                }
            }
            if (last_i == this.i) {
                this.i = 1 + this.i;
            }
        }
        ;
    };
    ;
    RangerLispParser.prototype.parse = function (disable_ops) {
        var s = this.buff;
        var c = s.charCodeAt(0);
        /** unused:  const next_c : number  = 0   **/
        var fc = 0;
        var new_node;
        var sp = 0;
        var ep = 0;
        var last_i = 0;
        var had_lf = false;
        var disable_ops_set = disable_ops;
        while (this.i < this.__len) {
            if ((typeof (this.curr_node) !== "undefined" && this.curr_node != null)) {
                if (this.curr_node.value_type == 21) {
                    return;
                }
                if (this.curr_node.value_type == 19) {
                    return;
                }
            }
            if (this.had_error) {
                break;
            }
            last_i = this.i;
            var is_block_parent = false;
            if (had_lf) {
                had_lf = false;
                this.end_expression();
                break;
            }
            if ((typeof (this.curr_node) !== "undefined" && this.curr_node != null)) {
                if ((typeof (this.curr_node.parent) !== "undefined" && this.curr_node.parent != null)) {
                    var nodeParent = this.curr_node.parent;
                    if (nodeParent.is_block_node) {
                        is_block_parent = true;
                    }
                }
            }
            if (this.skip_space(is_block_parent)) {
                break;
            }
            had_lf = false;
            c = s.charCodeAt(this.i);
            if (this.i < this.__len) {
                c = s.charCodeAt(this.i);
                if ((60) == c) {
                    if ((this.i + 1) < this.__len) {
                        var next_c_2 = s.charCodeAt((this.i + 1));
                        if (((65) < next_c_2) && ((122) > next_c_2)) {
                            /** unused:  const spos : number  = this.i   **/
                            this.parseXML();
                            this.i = this.i + 1;
                            continue;
                        }
                    }
                    if (this.i > 0) {
                        var prev_c = s.charCodeAt((this.i - 1));
                        if ((62) == prev_c) {
                        }
                    }
                }
                if (c == 59) {
                    sp = this.i + 1;
                    while ((this.i < this.__len) && ((s.charCodeAt(this.i)) > 31)) {
                        this.i = 1 + this.i;
                    }
                    ;
                    if (this.i >= this.__len) {
                        break;
                    }
                    new_node = new CodeNode(this.code, sp, this.i);
                    new_node.parsed_type = 12;
                    new_node.value_type = 12;
                    new_node.string_value = s.substring(sp, this.i);
                    this.curr_node.comments.push(new_node);
                    continue;
                }
                if (this.i < (this.__len - 1)) {
                    fc = s.charCodeAt((this.i + 1));
                    if ((c == 40) || (c == (123))) {
                        this.paren_cnt = this.paren_cnt + 1;
                        if (typeof (this.curr_node) === "undefined") {
                            this.rootNode = new CodeNode(this.code, this.i, this.i);
                            this.curr_node = this.rootNode;
                            this.curr_node.expression = true;
                            this.parents.push(this.curr_node);
                        }
                        else {
                            var new_qnode = new CodeNode(this.code, this.i, this.i);
                            new_qnode.expression = true;
                            this.insert_node(new_qnode);
                            this.parents.push(new_qnode);
                            this.curr_node = new_qnode;
                        }
                        if (c == (123)) {
                            this.curr_node.is_block_node = true;
                        }
                        this.i = 1 + this.i;
                        this.parse(disable_ops_set);
                        continue;
                    }
                }
                sp = this.i;
                ep = this.i;
                fc = s.charCodeAt(this.i);
                if ((((fc == 45) && ((s.charCodeAt((this.i + 1))) >= 46)) && ((s.charCodeAt((this.i + 1))) <= 57)) || ((fc >= 48) && (fc <= 57))) {
                    var is_double = false;
                    sp = this.i;
                    this.i = 1 + this.i;
                    c = s.charCodeAt(this.i);
                    while ((this.i < this.__len) && ((((c >= 48) && (c <= 57)) || (c == (46))) || ((this.i == sp) && ((c == (43)) || (c == (45)))))) {
                        if (c == (46)) {
                            is_double = true;
                        }
                        this.i = 1 + this.i;
                        c = s.charCodeAt(this.i);
                    }
                    ;
                    ep = this.i;
                    var new_num_node = new CodeNode(this.code, sp, ep);
                    if (is_double) {
                        new_num_node.parsed_type = 2;
                        new_num_node.value_type = 2;
                        new_num_node.double_value = (isNaN(parseFloat((s.substring(sp, ep)))) ? undefined : parseFloat((s.substring(sp, ep))));
                    }
                    else {
                        new_num_node.parsed_type = 3;
                        new_num_node.value_type = 3;
                        new_num_node.int_value = (isNaN(parseInt((s.substring(sp, ep)))) ? undefined : parseInt((s.substring(sp, ep))));
                    }
                    this.insert_node(new_num_node);
                    continue;
                }
                var str_limit = fc;
                var b_had_str = ((fc == 34) || (fc == 96)) || (fc == 39);
                if (b_had_str) {
                    sp = this.i + 1;
                    ep = sp;
                    c = s.charCodeAt(this.i);
                    var must_encode = false;
                    while (this.i < this.__len) {
                        this.i = 1 + this.i;
                        c = s.charCodeAt(this.i);
                        if (c == str_limit) {
                            break;
                        }
                        if (c == 92) {
                            this.i = 1 + this.i;
                            if (this.i < this.__len) {
                                must_encode = true;
                                c = s.charCodeAt(this.i);
                            }
                            else {
                                break;
                            }
                        }
                    }
                    ;
                    ep = this.i;
                    if (this.i < this.__len) {
                        var encoded_str = "";
                        if (must_encode) {
                            var subs = s.substring(sp, ep);
                            var orig_str = subs;
                            var str_length = orig_str.length;
                            var ii = 0;
                            while (ii < str_length) {
                                var cc = orig_str.charCodeAt(ii);
                                if (cc == 92) {
                                    var next_ch = orig_str.charCodeAt((ii + 1));
                                    switch (next_ch) {
                                        case 34:
                                            encoded_str = encoded_str + (String.fromCharCode(34));
                                            break;
                                        case 92:
                                            encoded_str = encoded_str + (String.fromCharCode(92));
                                            break;
                                        case 47:
                                            encoded_str = encoded_str + (String.fromCharCode(47));
                                            break;
                                        case 98:
                                            encoded_str = encoded_str + (String.fromCharCode(8));
                                            break;
                                        case 102:
                                            encoded_str = encoded_str + (String.fromCharCode(12));
                                            break;
                                        case 110:
                                            encoded_str = encoded_str + (String.fromCharCode(10));
                                            break;
                                        case 114:
                                            encoded_str = encoded_str + (String.fromCharCode(13));
                                            break;
                                        case 116:
                                            encoded_str = encoded_str + (String.fromCharCode(9));
                                            break;
                                        case 117:
                                            ii = ii + 4;
                                            break;
                                        default:
                                            break;
                                    }
                                    ;
                                    ii = ii + 2;
                                }
                                else {
                                    encoded_str = encoded_str + (orig_str.substring(ii, (1 + ii)));
                                    ii = ii + 1;
                                }
                            }
                            ;
                        }
                        else {
                        }
                        var new_str_node = new CodeNode(this.code, sp, ep);
                        new_str_node.parsed_type = 4;
                        new_str_node.value_type = 4;
                        if (must_encode) {
                            new_str_node.string_value = encoded_str;
                        }
                        else {
                            new_str_node.string_value = s.substring(sp, ep);
                        }
                        this.insert_node(new_str_node);
                        this.i = 1 + this.i;
                        continue;
                    }
                }
                if ((((fc == (116)) && ((s.charCodeAt((this.i + 1))) == (114))) && ((s.charCodeAt((this.i + 2))) == (117))) && ((s.charCodeAt((this.i + 3))) == (101))) {
                    var new_true_node = new CodeNode(this.code, sp, sp + 4);
                    new_true_node.value_type = 5;
                    new_true_node.parsed_type = 5;
                    new_true_node.boolean_value = true;
                    this.insert_node(new_true_node);
                    this.i = this.i + 4;
                    continue;
                }
                if (((((fc == (102)) && ((s.charCodeAt((this.i + 1))) == (97))) && ((s.charCodeAt((this.i + 2))) == (108))) && ((s.charCodeAt((this.i + 3))) == (115))) && ((s.charCodeAt((this.i + 4))) == (101))) {
                    var new_f_node = new CodeNode(this.code, sp, sp + 5);
                    new_f_node.value_type = 5;
                    new_f_node.parsed_type = 5;
                    new_f_node.boolean_value = false;
                    this.insert_node(new_f_node);
                    this.i = this.i + 5;
                    continue;
                }
                if (fc == (64)) {
                    this.i = this.i + 1;
                    sp = this.i;
                    ep = this.i;
                    c = s.charCodeAt(this.i);
                    while (((((this.i < this.__len) && ((s.charCodeAt(this.i)) > 32)) && (c != 40)) && (c != 41)) && (c != (125))) {
                        this.i = 1 + this.i;
                        c = s.charCodeAt(this.i);
                    }
                    ;
                    ep = this.i;
                    if ((this.i < this.__len) && (ep > sp)) {
                        var a_node2 = new CodeNode(this.code, sp, ep);
                        var a_name = s.substring(sp, ep);
                        if (a_name == "noinfix") {
                            disable_ops_set = true;
                        }
                        a_node2.expression = true;
                        this.curr_node = a_node2;
                        this.parents.push(a_node2);
                        this.i = this.i + 1;
                        this.paren_cnt = this.paren_cnt + 1;
                        this.parse(disable_ops_set);
                        var use_first = false;
                        if (1 == (a_node2.children.length)) {
                            var ch1 = a_node2.children[0];
                            use_first = ch1.isPrimitive();
                        }
                        if (use_first) {
                            var theNode = a_node2.children.splice(0, 1).pop();
                            this.curr_node.props[a_name] = theNode;
                        }
                        else {
                            this.curr_node.props[a_name] = a_node2;
                        }
                        this.curr_node.prop_keys.push(a_name);
                        continue;
                    }
                }
                var ns_list = [];
                var last_ns = this.i;
                var ns_cnt = 1;
                var vref_had_type_ann = false;
                var vref_ann_node = void 0;
                var vref_end = this.i;
                if ((((((this.i < this.__len) && ((s.charCodeAt(this.i)) > 32)) && (c != 58)) && (c != 40)) && (c != 41)) && (c != (125))) {
                    if (this.curr_node.is_block_node == true) {
                        var new_expr_node = new CodeNode(this.code, sp, ep);
                        new_expr_node.parent = this.curr_node;
                        new_expr_node.expression = true;
                        this.curr_node.children.push(new_expr_node);
                        this.curr_node = new_expr_node;
                        this.parents.push(new_expr_node);
                        this.paren_cnt = 1 + this.paren_cnt;
                        this.parse(disable_ops_set);
                        continue;
                    }
                }
                var op_c = 0;
                op_c = this.getOperator(disable_ops_set);
                var last_was_newline = false;
                if (op_c > 0) {
                }
                else {
                    while ((((((this.i < this.__len) && ((s.charCodeAt(this.i)) > 32)) && (c != 58)) && (c != 40)) && (c != 41)) && (c != (125))) {
                        if (this.i > sp) {
                            var is_opchar = this.isOperator(disable_ops_set);
                            if (is_opchar > 0) {
                                break;
                            }
                        }
                        this.i = 1 + this.i;
                        c = s.charCodeAt(this.i);
                        if ((c == 10) || (c == 13)) {
                            last_was_newline = true;
                            break;
                        }
                        if (c == (46)) {
                            ns_list.push(s.substring(last_ns, this.i));
                            last_ns = this.i + 1;
                            ns_cnt = 1 + ns_cnt;
                        }
                        if ((this.i > vref_end) && (c == (64))) {
                            vref_had_type_ann = true;
                            vref_end = this.i;
                            vref_ann_node = this.parse_raw_annotation();
                            c = s.charCodeAt(this.i);
                            break;
                        }
                    }
                    ;
                }
                ep = this.i;
                if (vref_had_type_ann) {
                    ep = vref_end;
                }
                ns_list.push(s.substring(last_ns, ep));
                c = s.charCodeAt(this.i);
                while (((this.i < this.__len) && (c <= 32)) && (false == last_was_newline)) {
                    this.i = 1 + this.i;
                    c = s.charCodeAt(this.i);
                    if (is_block_parent && ((c == 10) || (c == 13))) {
                        this.i = this.i - 1;
                        c = s.charCodeAt(this.i);
                        had_lf = true;
                        break;
                    }
                }
                ;
                if ((false == disable_ops_set) && (c == (58))) {
                    this.i = this.i + 1;
                    while ((this.i < this.__len) && ((s.charCodeAt(this.i)) <= 32)) {
                        this.i = 1 + this.i;
                    }
                    ;
                    var vt_sp = this.i;
                    var vt_ep = this.i;
                    c = s.charCodeAt(this.i);
                    if (c == (40)) {
                        var vann_arr2 = this.parse_raw_annotation();
                        vann_arr2.expression = true;
                        var new_expr_node_1 = new CodeNode(this.code, sp, vt_ep);
                        new_expr_node_1.vref = s.substring(sp, ep);
                        new_expr_node_1.ns = ns_list;
                        new_expr_node_1.expression_value = vann_arr2;
                        new_expr_node_1.parsed_type = 17;
                        new_expr_node_1.value_type = 17;
                        if (vref_had_type_ann) {
                            new_expr_node_1.vref_annotation = vref_ann_node;
                            new_expr_node_1.has_vref_annotation = true;
                        }
                        this.curr_node.children.push(new_expr_node_1);
                        continue;
                    }
                    if (c == (91)) {
                        this.i = this.i + 1;
                        vt_sp = this.i;
                        var hash_sep = 0;
                        var had_array_type_ann = false;
                        c = s.charCodeAt(this.i);
                        while (((this.i < this.__len) && (c > 32)) && (c != 93)) {
                            this.i = 1 + this.i;
                            c = s.charCodeAt(this.i);
                            if (c == (58)) {
                                hash_sep = this.i;
                            }
                            if (c == (64)) {
                                had_array_type_ann = true;
                                break;
                            }
                        }
                        ;
                        vt_ep = this.i;
                        if (hash_sep > 0) {
                            vt_ep = this.i;
                            var type_name = s.substring((1 + hash_sep), vt_ep);
                            var key_type_name = s.substring(vt_sp, hash_sep);
                            var new_hash_node = new CodeNode(this.code, sp, vt_ep);
                            new_hash_node.vref = s.substring(sp, ep);
                            new_hash_node.ns = ns_list;
                            new_hash_node.parsed_type = 7;
                            new_hash_node.value_type = 7;
                            new_hash_node.array_type = type_name;
                            new_hash_node.key_type = key_type_name;
                            if (vref_had_type_ann) {
                                new_hash_node.vref_annotation = vref_ann_node;
                                new_hash_node.has_vref_annotation = true;
                            }
                            if (had_array_type_ann) {
                                var vann_hash = this.parse_raw_annotation();
                                new_hash_node.type_annotation = vann_hash;
                                new_hash_node.has_type_annotation = true;
                            }
                            new_hash_node.parent = this.curr_node;
                            this.curr_node.children.push(new_hash_node);
                            this.i = 1 + this.i;
                            continue;
                        }
                        else {
                            vt_ep = this.i;
                            var type_name_1 = s.substring(vt_sp, vt_ep);
                            var new_arr_node = new CodeNode(this.code, sp, vt_ep);
                            new_arr_node.vref = s.substring(sp, ep);
                            new_arr_node.ns = ns_list;
                            new_arr_node.parsed_type = 6;
                            new_arr_node.value_type = 6;
                            new_arr_node.array_type = type_name_1;
                            new_arr_node.parent = this.curr_node;
                            this.curr_node.children.push(new_arr_node);
                            if (vref_had_type_ann) {
                                new_arr_node.vref_annotation = vref_ann_node;
                                new_arr_node.has_vref_annotation = true;
                            }
                            if (had_array_type_ann) {
                                var vann_arr = this.parse_raw_annotation();
                                new_arr_node.type_annotation = vann_arr;
                                new_arr_node.has_type_annotation = true;
                                console.log("--> parsed ARRAY TYPE annotation");
                            }
                            this.i = 1 + this.i;
                            continue;
                        }
                    }
                    var had_type_ann = false;
                    while ((this.i < this.__len) && operatorsOfchar_23.isc95notc95limiter_24(c)) {
                        this.i = 1 + this.i;
                        c = s.charCodeAt(this.i);
                        if (c == (64)) {
                            had_type_ann = true;
                            break;
                        }
                    }
                    ;
                    if (this.i < this.__len) {
                        vt_ep = this.i;
                        /** unused:  const type_name_2 : string  = s.substring(vt_sp, vt_ep )   **/
                        var new_ref_node = new CodeNode(this.code, sp, ep);
                        new_ref_node.vref = s.substring(sp, ep);
                        new_ref_node.ns = ns_list;
                        new_ref_node.parsed_type = 11;
                        new_ref_node.value_type = 11;
                        new_ref_node.type_name = s.substring(vt_sp, vt_ep);
                        new_ref_node.parent = this.curr_node;
                        if (vref_had_type_ann) {
                            new_ref_node.vref_annotation = vref_ann_node;
                            new_ref_node.has_vref_annotation = true;
                        }
                        this.curr_node.children.push(new_ref_node);
                        if (had_type_ann) {
                            var vann = this.parse_raw_annotation();
                            new_ref_node.type_annotation = vann;
                            new_ref_node.has_type_annotation = true;
                        }
                        continue;
                    }
                }
                else {
                    if ((this.i < this.__len) && (ep > sp)) {
                        var new_vref_node = new CodeNode(this.code, sp, ep);
                        new_vref_node.vref = s.substring(sp, ep);
                        new_vref_node.parsed_type = 11;
                        new_vref_node.value_type = 11;
                        new_vref_node.ns = ns_list;
                        new_vref_node.parent = this.curr_node;
                        var op_pred = this.getOperatorPred(new_vref_node.vref, disable_ops_set);
                        if (new_vref_node.vref == ",") {
                            this.curr_node.infix_operator = false;
                            continue;
                        }
                        var pTarget = this.curr_node;
                        if (this.curr_node.infix_operator) {
                            var iNode = this.curr_node.infix_node;
                            if ((op_pred > 0) || (iNode.to_the_right == false)) {
                                pTarget = iNode;
                            }
                            else {
                                var rn = iNode.right_node;
                                new_vref_node.parent = rn;
                                pTarget = rn;
                            }
                        }
                        pTarget.children.push(new_vref_node);
                        if (vref_had_type_ann) {
                            new_vref_node.vref_annotation = vref_ann_node;
                            new_vref_node.has_vref_annotation = true;
                        }
                        if ((this.i + 1) < this.__len) {
                            if (((s.charCodeAt((this.i + 1))) == (40)) || ((s.charCodeAt((this.i + 0))) == (40))) {
                                if (((0 == op_pred) && this.curr_node.infix_operator) && (1 == (this.curr_node.children.length))) {
                                }
                            }
                        }
                        if (((op_pred > 0) && this.curr_node.infix_operator) || ((op_pred > 0) && ((this.curr_node.children.length) >= 2))) {
                            if ((op_pred == 3) && (2 == (this.curr_node.children.length))) {
                                var n_ch = this.curr_node.children.splice(0, 1).pop();
                                this.curr_node.children.push(n_ch);
                            }
                            else {
                                if (false == this.curr_node.infix_operator) {
                                    var if_node = new CodeNode(this.code, sp, ep);
                                    this.curr_node.infix_node = if_node;
                                    this.curr_node.infix_operator = true;
                                    if_node.infix_subnode = true;
                                    this.curr_node.value_type = 0;
                                    this.curr_node.parsed_type = this.curr_node.value_type;
                                    this.curr_node.expression = true;
                                    if_node.expression = true;
                                    var ch_cnt = this.curr_node.children.length;
                                    var ii_1 = 0;
                                    var start_from = ch_cnt - 2;
                                    var keep_nodes = new CodeNode(this.code, sp, ep);
                                    while (ch_cnt > 0) {
                                        var n_ch_1 = this.curr_node.children.splice(0, 1).pop();
                                        var p_target = if_node;
                                        if ((ii_1 < start_from) || n_ch_1.infix_subnode) {
                                            p_target = keep_nodes;
                                        }
                                        p_target.children.push(n_ch_1);
                                        ch_cnt = ch_cnt - 1;
                                        ii_1 = 1 + ii_1;
                                    }
                                    ;
                                    for (var i2 = 0; i2 < keep_nodes.children.length; i2++) {
                                        var keep = keep_nodes.children[i2];
                                        this.curr_node.children.push(keep);
                                    }
                                    ;
                                    this.curr_node.children.push(if_node);
                                }
                                var ifNode = this.curr_node.infix_node;
                                var new_op_node = new CodeNode(this.code, sp, ep);
                                new_op_node.expression = true;
                                new_op_node.parent = ifNode;
                                var until_index = (ifNode.children.length) - 1;
                                var to_right = false;
                                var just_continue = false;
                                if ((ifNode.operator_pred > 0) && (ifNode.operator_pred < op_pred)) {
                                    to_right = true;
                                }
                                if ((ifNode.operator_pred > 0) && (ifNode.operator_pred > op_pred)) {
                                    ifNode.to_the_right = false;
                                }
                                if ((ifNode.operator_pred > 0) && (ifNode.operator_pred == op_pred)) {
                                    to_right = ifNode.to_the_right;
                                }
                                /** unused:  const opTarget : CodeNode  = ifNode   **/
                                if (to_right) {
                                    var op_node = ifNode.children.splice(until_index, 1).pop();
                                    var last_value = ifNode.children.splice((until_index - 1), 1).pop();
                                    new_op_node.children.push(op_node);
                                    new_op_node.children.push(last_value);
                                }
                                else {
                                    if (false == just_continue) {
                                        while (until_index > 0) {
                                            var what_to_add = ifNode.children.splice(0, 1).pop();
                                            new_op_node.children.push(what_to_add);
                                            until_index = until_index - 1;
                                        }
                                        ;
                                    }
                                }
                                if (to_right || (false == just_continue)) {
                                    ifNode.children.push(new_op_node);
                                }
                                if (to_right) {
                                    ifNode.right_node = new_op_node;
                                    ifNode.to_the_right = true;
                                }
                                ifNode.operator_pred = op_pred;
                                continue;
                            }
                        }
                        continue;
                    }
                }
                if ((c == 41) || (c == (125))) {
                    if (((c == (125)) && is_block_parent) && ((this.curr_node.children.length) > 0)) {
                        this.end_expression();
                    }
                    this.i = 1 + this.i;
                    this.paren_cnt = this.paren_cnt - 1;
                    if (this.paren_cnt < 0) {
                        break;
                    }
                    this.parents.pop();
                    if ((typeof (this.curr_node) !== "undefined" && this.curr_node != null)) {
                        this.curr_node.ep = this.i;
                    }
                    if ((this.parents.length) > 0) {
                        this.curr_node = this.parents[((this.parents.length) - 1)];
                    }
                    else {
                        this.curr_node = this.rootNode;
                    }
                    break;
                }
                if (last_i == this.i) {
                    this.i = 1 + this.i;
                }
            }
        }
        ;
    };
    ;
    return RangerLispParser;
}());
exports.RangerLispParser = RangerLispParser;
var RangerArgMatch = /** @class */ (function () {
    function RangerArgMatch() {
        this._debug = false;
        this.matched = {};
        this.nodes = {};
        this.builtNodes = {};
        this.matchedLambdas = {};
    }
    RangerArgMatch.prototype.matchArguments = function (args, callArgs, ctx, firstArgIndex) {
        /** unused:  const fc : CodeNode  = callArgs.children[0]   **/
        var missed_args = [];
        var all_matched = true;
        if (((args.children.length) == 0) && ((callArgs.children.length) > 1)) {
            return false;
        }
        var lastArg;
        for (var i = 0; i < callArgs.children.length; i++) {
            var callArg = callArgs.children[i];
            if (i == 0) {
                continue;
            }
            if (callArg.is_part_of_chain) {
                continue;
            }
            var arg_index = i - 1;
            if (arg_index < (args.children.length)) {
                lastArg = args.children[arg_index];
            }
            var arg = lastArg;
            if (arg.hasFlag("ignore")) {
                continue;
            }
            if (arg.hasFlag("keyword")) {
                if (callArg.vref == arg.vref) {
                    continue;
                }
                else {
                    all_matched = false;
                    break;
                }
            }
            if (arg.isPrimitiveType()) {
                if ((callArg.value_type == 17) || (callArg.eval_type == 17)) {
                    all_matched = false;
                    break;
                }
            }
            var call_arg_immutable = false;
            if (callArg.hasParamDesc) {
                var pa = callArg.paramDesc;
                if ((typeof (pa.nameNode) !== "undefined" && pa.nameNode != null)) {
                    var b_immutable = pa.nameNode.hasFlag("immutable");
                    if (arg.hasFlag("immutable") != b_immutable) {
                        all_matched = false;
                    }
                    call_arg_immutable = b_immutable;
                }
                else {
                    call_arg_immutable = pa.is_immutable;
                }
            }
            if (callArg.hasFlag("immutable")) {
                call_arg_immutable = true;
            }
            if (arg.hasFlag("immutable")) {
                if (false == call_arg_immutable) {
                    all_matched = false;
                    break;
                }
            }
            if (true) {
                if ((arg.type_name == "block") || arg.hasFlag("block")) {
                    if (callArg.is_block_node) {
                        continue;
                    }
                    else {
                        all_matched = false;
                    }
                }
            }
            if (arg.hasFlag("mutable")) {
                if (callArg.hasParamDesc) {
                    var pa_1 = callArg.paramDesc;
                    var b = pa_1.nameNode.hasFlag("mutable");
                    if (b == false) {
                        missed_args.push("was mutable");
                        all_matched = false;
                    }
                }
                else {
                    all_matched = false;
                }
            }
            if (arg.hasFlag("union")) {
                if (ctx.isDefinedClass(callArg.eval_type_name)) {
                    var cc = ctx.findClass(callArg.eval_type_name);
                    if ((cc.is_union == false) && (cc.is_system_union == false)) {
                        all_matched = false;
                    }
                }
                else {
                    all_matched = false;
                }
            }
            if (arg.hasFlag("optional")) {
                if (callArg.hasParamDesc) {
                    var pa_2 = callArg.paramDesc;
                    var b_1 = pa_2.nameNode.hasFlag("optional");
                    if (b_1 == false) {
                        missed_args.push("optional was missing");
                        all_matched = false;
                    }
                }
                else {
                    if (callArg.hasFlag("optional")) {
                    }
                    else {
                        all_matched = false;
                    }
                }
            }
            if (callArg.hasFlag("optional")) {
                if (false == arg.hasFlag("optional")) {
                    if (callArg.is_block_node) {
                    }
                    else {
                        all_matched = false;
                    }
                }
            }
            if ((arg.value_type != 7) && (arg.value_type != 6)) {
                if ((typeof (callArg.paramDesc) !== "undefined" && callArg.paramDesc != null)) {
                    if (((typeof (callArg.paramDesc.nameNode) !== "undefined" && callArg.paramDesc.nameNode != null)) && ((typeof (callArg.paramDesc.nameNode.expression_value) !== "undefined" && callArg.paramDesc.nameNode.expression_value != null))) {
                        this.matched[arg.type_name] = "";
                        this.matchedLambdas[arg.type_name] = callArg.paramDesc.nameNode.expression_value;
                        continue;
                    }
                }
                if (callArg.eval_type == 13) {
                    if (arg.type_name == "enum") {
                        continue;
                    }
                }
                if (this._debug) {
                    console.log("-> trying to add type " + arg.type_name);
                }
                if (false == this.add(arg.type_name, callArg.eval_type_name, ctx)) {
                    all_matched = false;
                    return all_matched;
                }
            }
            if (arg.value_type == 6) {
                if (false == this.add_atype(arg.array_type, callArg.eval_array_type, ctx)) {
                    all_matched = false;
                }
            }
            if (arg.value_type == 7) {
                if (false == this.add(arg.key_type, callArg.eval_key_type, ctx)) {
                    all_matched = false;
                }
                if (false == this.add_atype(arg.array_type, callArg.eval_array_type, ctx)) {
                    all_matched = false;
                }
            }
            var did_match = false;
            if (this.doesMatch(arg, callArg, ctx)) {
                did_match = true;
            }
            else {
                missed_args.push((("matching arg " + arg.vref) + " faileg against ") + callArg.vref);
            }
            if (false == did_match) {
                all_matched = false;
            }
        }
        ;
        return all_matched;
    };
    ;
    RangerArgMatch.prototype.force_add = function (tplKeyword, typeName, ctx) {
        this.matched[tplKeyword] = typeName;
    };
    ;
    RangerArgMatch.prototype.addNode = function (name, node) {
        this.nodes[name] = node;
    };
    ;
    RangerArgMatch.prototype.add = function (tplKeyword, typeName, ctx) {
        switch (tplKeyword) {
            case "string":
                return true;
            case "int":
                return true;
            case "double":
                return true;
            case "boolean":
                return true;
            case "enum":
                return true;
            case "char":
                return true;
            case "charbuffer":
                return true;
        }
        ;
        if ((tplKeyword.length) > 1) {
            return true;
        }
        if ((typeof (this.matched[tplKeyword]) != "undefined" && this.matched.hasOwnProperty(tplKeyword))) {
            var s = (this.matched[tplKeyword]);
            if (this.areEqualTypes(s, typeName, ctx)) {
                return true;
            }
            if (s == typeName) {
                return true;
            }
            else {
                return false;
            }
        }
        this.matched[tplKeyword] = typeName;
        return true;
    };
    ;
    RangerArgMatch.prototype.add_atype = function (tplKeyword, typeName, ctx) {
        switch (tplKeyword) {
            case "string":
                return true;
            case "int":
                return true;
            case "double":
                return true;
            case "boolean":
                return true;
            case "enum":
                return true;
            case "char":
                return true;
            case "charbuffer":
                return true;
        }
        ;
        if ((tplKeyword.length) > 1) {
            return true;
        }
        if ((typeof (this.matched[tplKeyword]) != "undefined" && this.matched.hasOwnProperty(tplKeyword))) {
            var s = (this.matched[tplKeyword]);
            if (this.areEqualATypes(s, typeName, ctx)) {
                return true;
            }
            if (s == typeName) {
                return true;
            }
            else {
                return false;
            }
        }
        this.matched[tplKeyword] = typeName;
        return true;
    };
    ;
    RangerArgMatch.prototype.doesDefsMatch = function (arg, node, ctx) {
        if (node.value_type == 13) {
            if (arg.type_name == "enum") {
                return true;
            }
            else {
                return false;
            }
        }
        if ((arg.value_type != 7) && (arg.value_type != 6)) {
            var eq = this.areEqualTypes(arg.type_name, node.type_name, ctx);
            var t_name = arg.type_name;
            switch (t_name) {
                case "expression":
                    return node.expression;
                case "block":
                    return node.expression;
                case "arguments":
                    return node.expression;
                case "keyword":
                    return node.eval_type == 11;
                case "T.name":
                    return node.eval_type_name == t_name;
            }
            ;
            return eq;
        }
        if ((arg.value_type == 6) && (node.eval_type == 6)) {
            var same_arrays = this.areEqualTypes(arg.array_type, node.array_type, ctx);
            return same_arrays;
        }
        if ((arg.value_type == 7) && (node.eval_type == 7)) {
            var same_arrays_1 = this.areEqualTypes(arg.array_type, node.array_type, ctx);
            var same_keys = this.areEqualTypes(arg.key_type, node.key_type, ctx);
            return same_arrays_1 && same_keys;
        }
        return false;
    };
    ;
    RangerArgMatch.prototype.doesMatch = function (arg, node, ctx) {
        if (node.value_type == 13) {
            if (arg.type_name == "enum") {
                return true;
            }
            else {
                return false;
            }
        }
        if ((arg.value_type != 7) && (arg.value_type != 6)) {
            var eq = this.areEqualTypes(arg.type_name, node.eval_type_name, ctx);
            var t_name = arg.type_name;
            switch (t_name) {
                case "expression":
                    return node.expression;
                case "block":
                    return node.expression;
                case "arguments":
                    return node.expression;
                case "keyword":
                    return node.eval_type == 11;
                case "T.name":
                    return node.eval_type_name == t_name;
            }
            ;
            return eq;
        }
        if ((arg.value_type == 6) && (node.eval_type == 6)) {
            var same_arrays = this.areEqualTypes(arg.array_type, node.eval_array_type, ctx);
            return same_arrays;
        }
        if ((arg.value_type == 7) && (node.eval_type == 7)) {
            var same_arrays_1 = this.areEqualTypes(arg.array_type, node.eval_array_type, ctx);
            var same_keys = this.areEqualTypes(arg.key_type, node.eval_key_type, ctx);
            return same_arrays_1 && same_keys;
        }
        return false;
    };
    ;
    RangerArgMatch.prototype.areEqualTypes = function (type1, type2, ctx) {
        var t_name = type1;
        if ((typeof (this.matched[type1]) != "undefined" && this.matched.hasOwnProperty(type1))) {
            t_name = (this.matched[type1]);
        }
        switch (t_name) {
            case "string":
                return type2 == "string";
            case "int":
                return type2 == "int";
            case "double":
                return type2 == "double";
            case "boolean":
                return type2 == "boolean";
            case "enum":
                return type2 == "enum";
            case "char":
                return type2 == "char";
            case "charbuffer":
                return type2 == "charbuffer";
        }
        ;
        if (ctx.isDefinedClass(t_name) && ctx.isDefinedClass(type2)) {
            var c1 = ctx.findClass(t_name);
            var c2 = ctx.findClass(type2);
            var trait1 = c1.hasTrait(type2, ctx);
            if ((c2.is_union == true) && (c1.is_union == false)) {
                return false;
            }
            if ((c2.is_system_union == true) && (c1.is_system_union == false)) {
                return false;
            }
            if ((typeof (trait1) !== "undefined" && trait1 != null)) {
                this.force_add(type2, c1.name, ctx);
                if ((typeof (c1.trait_params[type2]) != "undefined" && c1.trait_params.hasOwnProperty(type2))) {
                    var pms = (c1.trait_params[type2]);
                    for (var i = 0; i < pms.param_names.length; i++) {
                        var pn = pms.param_names[i];
                        var pn_value = (pms.values[pn]);
                        this.add(pn, pn_value, ctx);
                    }
                    ;
                }
            }
            var trait1_1 = c2.hasTrait(t_name, ctx);
            if ((typeof (trait1_1) !== "undefined" && trait1_1 != null)) {
                this.force_add(t_name, c2.name, ctx);
                if ((typeof (c2.trait_params[t_name]) != "undefined" && c2.trait_params.hasOwnProperty(t_name))) {
                    var pms_1 = (c2.trait_params[t_name]);
                    for (var i_1 = 0; i_1 < pms_1.param_names.length; i_1++) {
                        var pn_1 = pms_1.param_names[i_1];
                        var pn_value_1 = (pms_1.values[pn_1]);
                        this.add(pn_1, pn_value_1, ctx);
                    }
                    ;
                }
                else {
                }
            }
            if (c1.isSameOrParentClass(type2, ctx)) {
                return true;
            }
            if (c2.isSameOrParentClass(t_name, ctx)) {
                return true;
            }
        }
        else {
            if (ctx.isDefinedClass(t_name)) {
                var c1_1 = ctx.findClass(t_name);
                if (c1_1.isSameOrParentClass(type2, ctx)) {
                    return true;
                }
            }
        }
        return t_name == type2;
    };
    ;
    RangerArgMatch.prototype.areEqualATypes = function (type1, type2, ctx) {
        var t_name = type1;
        if ((typeof (this.matched[type1]) != "undefined" && this.matched.hasOwnProperty(type1))) {
            t_name = (this.matched[type1]);
        }
        switch (t_name) {
            case "string":
                return type2 == "string";
            case "int":
                return type2 == "int";
            case "double":
                return type2 == "double";
            case "boolean":
                return type2 == "boolean";
            case "enum":
                return type2 == "enum";
            case "char":
                return type2 == "char";
            case "charbuffer":
                return type2 == "charbuffer";
        }
        ;
        if (ctx.isDefinedClass(t_name) && ctx.isDefinedClass(type2)) {
            var c1 = ctx.findClass(t_name);
            var c2 = ctx.findClass(type2);
            var trait1 = c1.hasTrait(type2, ctx);
            if ((c2.is_union == true) && (c1.is_union == false)) {
                return false;
            }
            if ((c2.is_system_union == true) && (c1.is_system_union == false)) {
                return false;
            }
            if ((typeof (trait1) !== "undefined" && trait1 != null)) {
                this.force_add(type2, c1.name, ctx);
                if ((typeof (c1.trait_params[type2]) != "undefined" && c1.trait_params.hasOwnProperty(type2))) {
                    var pms = (c1.trait_params[type2]);
                    for (var i = 0; i < pms.param_names.length; i++) {
                        var pn = pms.param_names[i];
                        var pn_value = (pms.values[pn]);
                        this.add(pn, pn_value, ctx);
                    }
                    ;
                }
            }
            var trait1_1 = c2.hasTrait(t_name, ctx);
            if ((typeof (trait1_1) !== "undefined" && trait1_1 != null)) {
                this.force_add(t_name, c2.name, ctx);
                if ((typeof (c2.trait_params[t_name]) != "undefined" && c2.trait_params.hasOwnProperty(t_name))) {
                    var pms_1 = (c2.trait_params[t_name]);
                    for (var i_1 = 0; i_1 < pms_1.param_names.length; i_1++) {
                        var pn_1 = pms_1.param_names[i_1];
                        var pn_value_1 = (pms_1.values[pn_1]);
                        this.add(pn_1, pn_value_1, ctx);
                    }
                    ;
                }
                else {
                }
            }
            if (c1.isSameOrParentClass(type2, ctx)) {
                return true;
            }
            if (c2.isSameOrParentClass(t_name, ctx)) {
                return true;
            }
        }
        else {
        }
        return t_name == type2;
    };
    ;
    RangerArgMatch.prototype.getTypeName = function (n) {
        var t_name = n;
        if ((typeof (this.matched[t_name]) != "undefined" && this.matched.hasOwnProperty(t_name))) {
            t_name = (this.matched[t_name]);
        }
        if (0 == (t_name.length)) {
            return "";
        }
        return t_name;
    };
    ;
    RangerArgMatch.prototype.getType = function (n) {
        var t_name = n;
        if ((typeof (this.matched[t_name]) != "undefined" && this.matched.hasOwnProperty(t_name))) {
            t_name = (this.matched[t_name]);
        }
        if (0 == (t_name.length)) {
            return 0;
        }
        switch (t_name) {
            case "expression":
                return 16;
            case "block":
                return 16;
            case "arguments":
                return 16;
            case "string":
                return 4;
            case "int":
                return 3;
            case "char":
                return 14;
            case "charbuffer":
                return 15;
            case "boolean":
                return 5;
            case "double":
                return 2;
            case "enum":
                return 13;
        }
        ;
        return 10;
    };
    ;
    RangerArgMatch.prototype.setRvBasedOn = function (arg, node) {
        if (arg.hasFlag("optional")) {
            node.setFlag("optional");
        }
        if (arg.hasFlag("immutable")) {
            node.setFlag("immutable");
        }
        if ((arg.value_type != 7) && (arg.value_type != 6)) {
            if ((typeof (this.matchedLambdas[arg.type_name]) != "undefined" && this.matchedLambdas.hasOwnProperty(arg.type_name))) {
                var lam = this.matchedLambdas[arg.type_name];
                node.eval_type = 17;
                node.expression_value = lam.copy();
                return true;
            }
            node.eval_type = this.getType(arg.type_name);
            node.eval_type_name = this.getTypeName(arg.type_name);
            return true;
        }
        if (arg.value_type == 6) {
            node.eval_type = 6;
            node.eval_array_type = this.getTypeName(arg.array_type);
            return true;
        }
        if (arg.value_type == 7) {
            node.eval_type = 7;
            node.eval_key_type = this.getTypeName(arg.key_type);
            node.eval_array_type = this.getTypeName(arg.array_type);
            return true;
        }
        return false;
    };
    ;
    return RangerArgMatch;
}());
exports.RangerArgMatch = RangerArgMatch;
var DictNode = /** @class */ (function () {
    function DictNode() {
        this.is_property = false;
        this.is_property_value = false;
        this.vref = "";
        this.value_type = 6;
        this.double_value = 0.0;
        this.int_value = 0;
        this.string_value = "";
        this.boolean_value = false;
        this.children = [];
        this.objects = {};
        this.dict_keys = [];
    }
    DictNode.prototype.EncodeString = function (orig_str) {
        var encoded_str = "";
        /** unused:  const str_length : number  = orig_str.length   **/
        var ii = 0;
        var buff = orig_str;
        var cb_len = buff.length;
        while (ii < cb_len) {
            var cc = buff.charCodeAt(ii);
            switch (cc) {
                case 8:
                    encoded_str = (encoded_str + (String.fromCharCode(92))) + (String.fromCharCode(98));
                    break;
                case 9:
                    encoded_str = (encoded_str + (String.fromCharCode(92))) + (String.fromCharCode(116));
                    break;
                case 10:
                    encoded_str = (encoded_str + (String.fromCharCode(92))) + (String.fromCharCode(110));
                    break;
                case 12:
                    encoded_str = (encoded_str + (String.fromCharCode(92))) + (String.fromCharCode(102));
                    break;
                case 13:
                    encoded_str = (encoded_str + (String.fromCharCode(92))) + (String.fromCharCode(114));
                    break;
                case 34:
                    encoded_str = (encoded_str + (String.fromCharCode(92))) + "\"";
                    break;
                case 92:
                    encoded_str = (encoded_str + (String.fromCharCode(92))) + (String.fromCharCode(92));
                    break;
                case 47:
                    encoded_str = (encoded_str + (String.fromCharCode(92))) + (String.fromCharCode(47));
                    break;
                default:
                    encoded_str = encoded_str + (String.fromCharCode(cc));
                    break;
            }
            ;
            ii = 1 + ii;
        }
        ;
        return encoded_str;
    };
    ;
    DictNode.prototype.addString = function (key, value) {
        if (this.value_type == 6) {
            var v = new DictNode();
            v.string_value = value;
            v.value_type = 3;
            v.vref = key;
            v.is_property = true;
            this.dict_keys.push(key);
            this.objects[key] = v;
        }
    };
    ;
    DictNode.prototype.addDouble = function (key, value) {
        if (this.value_type == 6) {
            var v = new DictNode();
            v.double_value = value;
            v.value_type = 1;
            v.vref = key;
            v.is_property = true;
            this.dict_keys.push(key);
            this.objects[key] = v;
        }
    };
    ;
    DictNode.prototype.addInt = function (key, value) {
        if (this.value_type == 6) {
            var v = new DictNode();
            v.int_value = value;
            v.value_type = 2;
            v.vref = key;
            v.is_property = true;
            this.dict_keys.push(key);
            this.objects[key] = v;
        }
    };
    ;
    DictNode.prototype.addBoolean = function (key, value) {
        if (this.value_type == 6) {
            var v = new DictNode();
            v.boolean_value = value;
            v.value_type = 4;
            v.vref = key;
            v.is_property = true;
            this.dict_keys.push(key);
            this.objects[key] = v;
        }
    };
    ;
    DictNode.prototype.addObject = function (key) {
        var v;
        if (this.value_type == 6) {
            var p = new DictNode();
            v = new DictNode();
            p.value_type = 6;
            p.vref = key;
            p.is_property = true;
            v.value_type = 6;
            v.vref = key;
            v.is_property_value = true;
            p.object_value = v;
            this.dict_keys.push(key);
            this.objects[key] = p;
            return v;
        }
        return v;
    };
    ;
    DictNode.prototype.setObject = function (key, value) {
        if (this.value_type == 6) {
            var p = new DictNode();
            p.value_type = 6;
            p.vref = key;
            p.is_property = true;
            value.is_property_value = true;
            value.vref = key;
            p.object_value = value;
            this.dict_keys.push(key);
            this.objects[key] = p;
        }
    };
    ;
    DictNode.prototype.addArray = function (key) {
        var v;
        if (this.value_type == 6) {
            v = new DictNode();
            v.value_type = 5;
            v.vref = key;
            v.is_property = true;
            this.dict_keys.push(key);
            this.objects[key] = v;
            return v;
        }
        return v;
    };
    ;
    DictNode.prototype.push = function (obj) {
        if (this.value_type == 5) {
            this.children.push(obj);
        }
    };
    ;
    DictNode.prototype.getDoubleAt = function (index) {
        if (index < (this.children.length)) {
            var k = this.children[index];
            return k.double_value;
        }
        return 0.0;
    };
    ;
    DictNode.prototype.getStringAt = function (index) {
        if (index < (this.children.length)) {
            var k = this.children[index];
            return k.string_value;
        }
        return "";
    };
    ;
    DictNode.prototype.getIntAt = function (index) {
        if (index < (this.children.length)) {
            var k = this.children[index];
            return k.int_value;
        }
        return 0;
    };
    ;
    DictNode.prototype.getBooleanAt = function (index) {
        if (index < (this.children.length)) {
            var k = this.children[index];
            return k.boolean_value;
        }
        return false;
    };
    ;
    DictNode.prototype.getString = function (key) {
        var res;
        if ((typeof (this.objects[key]) != "undefined" && this.objects.hasOwnProperty(key))) {
            var k = this.objects[key];
            res = k.string_value;
        }
        return res;
    };
    ;
    DictNode.prototype.getDouble = function (key) {
        var res;
        if ((typeof (this.objects[key]) != "undefined" && this.objects.hasOwnProperty(key))) {
            var k = this.objects[key];
            res = k.double_value;
        }
        return res;
    };
    ;
    DictNode.prototype.getInt = function (key) {
        var res;
        if ((typeof (this.objects[key]) != "undefined" && this.objects.hasOwnProperty(key))) {
            var k = this.objects[key];
            res = k.int_value;
        }
        return res;
    };
    ;
    DictNode.prototype.getBoolean = function (key) {
        var res;
        if ((typeof (this.objects[key]) != "undefined" && this.objects.hasOwnProperty(key))) {
            var k = this.objects[key];
            res = k.boolean_value;
        }
        return res;
    };
    ;
    DictNode.prototype.getArray = function (key) {
        var res;
        if ((typeof (this.objects[key]) != "undefined" && this.objects.hasOwnProperty(key))) {
            var obj = this.objects[key];
            if (obj.is_property) {
                res = obj.object_value;
            }
        }
        return res;
    };
    ;
    DictNode.prototype.getArrayAt = function (index) {
        var res;
        if (index < (this.children.length)) {
            res = this.children[index];
        }
        return res;
    };
    ;
    DictNode.prototype.getObject = function (key) {
        var res;
        if ((typeof (this.objects[key]) != "undefined" && this.objects.hasOwnProperty(key))) {
            var obj = this.objects[key];
            if (obj.is_property) {
                res = obj.object_value;
            }
        }
        return res;
    };
    ;
    DictNode.prototype.getObjectAt = function (index) {
        var res;
        if (index < (this.children.length)) {
            res = this.children[index];
        }
        return res;
    };
    ;
    DictNode.prototype.stringify = function () {
        if (this.is_property) {
            if (this.value_type == 7) {
                return (("\"" + this.vref) + "\"") + ":null";
            }
            if (this.value_type == 4) {
                if (this.boolean_value) {
                    return ((("\"" + this.vref) + "\"") + ":") + "true";
                }
                else {
                    return ((("\"" + this.vref) + "\"") + ":") + "false";
                }
            }
            if (this.value_type == 1) {
                return ((("\"" + this.vref) + "\"") + ":") + this.double_value;
            }
            if (this.value_type == 2) {
                return ((("\"" + this.vref) + "\"") + ":") + this.int_value;
            }
            if (this.value_type == 3) {
                return ((((("\"" + this.vref) + "\"") + ":") + "\"") + this.EncodeString(this.string_value)) + "\"";
            }
        }
        else {
            if (this.value_type == 7) {
                return "null";
            }
            if (this.value_type == 1) {
                return "" + this.double_value;
            }
            if (this.value_type == 2) {
                return "" + this.int_value;
            }
            if (this.value_type == 3) {
                return ("\"" + this.EncodeString(this.string_value)) + "\"";
            }
            if (this.value_type == 4) {
                if (this.boolean_value) {
                    return "true";
                }
                else {
                    return "false";
                }
            }
        }
        if (this.value_type == 5) {
            var str = "";
            if (this.is_property) {
                str = (("\"" + this.vref) + "\"") + ":[";
            }
            else {
                str = "[";
            }
            for (var i = 0; i < this.children.length; i++) {
                var item = this.children[i];
                if (i > 0) {
                    str = str + ",";
                }
                str = str + item.stringify();
            }
            ;
            str = str + "]";
            return str;
        }
        if (this.value_type == 6) {
            var str_1 = "";
            if (this.is_property) {
                return ((("\"" + this.vref) + "\"") + ":") + this.object_value.stringify();
            }
            else {
                str_1 = "{";
                for (var i_1 = 0; i_1 < this.dict_keys.length; i_1++) {
                    var key = this.dict_keys[i_1];
                    if (i_1 > 0) {
                        str_1 = str_1 + ",";
                    }
                    var item_1 = this.objects[key];
                    str_1 = str_1 + item_1.stringify();
                }
                ;
                str_1 = str_1 + "}";
                return str_1;
            }
        }
        return "";
    };
    ;
    // typescript static 
    DictNode.createEmptyObject = function () {
        var v = new DictNode();
        v.value_type = 6;
        return v;
    };
    ;
    return DictNode;
}());
exports.DictNode = DictNode;
var RangerSerializeClass = /** @class */ (function () {
    function RangerSerializeClass() {
    }
    RangerSerializeClass.prototype.isSerializedClass = function (cName, ctx) {
        if (ctx.hasClass(cName)) {
            var clDecl = ctx.findClass(cName);
            if (clDecl.is_serialized) {
                return true;
            }
        }
        return false;
    };
    ;
    RangerSerializeClass.prototype.createWRWriter = function (pvar, nn, ctx, wr) {
        wr.out("def key@(lives):DictNode (new DictNode())", true);
        wr.out(("key.addString(\"n\" \"" + pvar.name) + "\")", true);
        if (nn.value_type == 6) {
            if (this.isSerializedClass(nn.array_type, ctx)) {
                wr.out(("def values:DictNode (obj_keys.addArray(\"" + pvar.compiledName) + "\"))", true);
                wr.out(((("for this." + pvar.compiledName) + " item:") + nn.array_type) + " i {", true);
                wr.indent(1);
                wr.out("def obj@(lives):DictNode (item.serializeToDict())", true);
                wr.out("values.push( obj )", true);
                wr.indent(-1);
                wr.out("}", true);
            }
            return;
        }
        if (nn.value_type == 7) {
            if (this.isSerializedClass(nn.array_type, ctx)) {
                wr.out(("def values:DictNode (obj_keys.addObject(\"" + pvar.compiledName) + "\"))", true);
                wr.out(("for this." + pvar.compiledName) + " keyname {", true);
                wr.indent(1);
                wr.out(("def item:DictNode (unwrap (get this." + pvar.compiledName) + " keyname))", true);
                wr.out("def obj@(lives):DictNode (item.serializeToDict())", true);
                wr.out("values.setObject( obj )", true);
                wr.indent(-1);
                wr.out("}", true);
            }
            if (nn.key_type == "string") {
                wr.out(("def values:DictNode (obj_keys.addObject(\"" + pvar.compiledName) + "\"))", true);
                wr.out(("for this." + pvar.compiledName) + " keyname {", true);
                wr.indent(1);
                if (nn.array_type == "string") {
                    wr.out(("values.addString(keyname (unwrap (get this." + pvar.compiledName) + " keyname)))", true);
                }
                if (nn.array_type == "int") {
                    wr.out(("values.addInt(keyname (unwrap (get this." + pvar.compiledName) + " keyname)))", true);
                }
                if (nn.array_type == "boolean") {
                    wr.out(("values.addBoolean(keyname (unwrap (get this." + pvar.compiledName) + " keyname)))", true);
                }
                if (nn.array_type == "double") {
                    wr.out(("values.addDouble(keyname (unwrap (get this." + pvar.compiledName) + " keyname)))", true);
                }
                wr.indent(-1);
                wr.out("}", true);
                return;
            }
            return;
        }
        if (nn.type_name == "string") {
            wr.out(((("obj_keys.addString(\"" + pvar.compiledName) + "\" (this.") + pvar.compiledName) + "))", true);
            return;
        }
        if (nn.type_name == "double") {
            wr.out(((("obj_keys.addDouble(\"" + pvar.compiledName) + "\" (this.") + pvar.compiledName) + "))", true);
            return;
        }
        if (nn.type_name == "int") {
            wr.out(((("obj_keys.addInt(\"" + pvar.compiledName) + "\" (this.") + pvar.compiledName) + "))", true);
            return;
        }
        if (nn.type_name == "boolean") {
            wr.out(((("obj_keys.addBoolean(\"" + pvar.compiledName) + "\" (this.") + pvar.compiledName) + "))", true);
            return;
        }
        if (nn.value_type == 13) {
            wr.out(((("obj_keys.addInt(\"" + pvar.compiledName) + "\" (this.") + pvar.compiledName) + "))", true);
            return;
        }
        if (this.isSerializedClass(nn.type_name, ctx)) {
            wr.out(("def value@(lives):DictNode (this." + pvar.compiledName) + ".serializeToDict())", true);
            wr.out(("obj_keys.setObject(\"" + pvar.compiledName) + "\" value)", true);
        }
    };
    ;
    RangerSerializeClass.prototype.createJSONSerializerFn = function (cl, ctx, wr) {
        var declaredVariable = {};
        wr.out("Import \"ng_DictNode.clj\"", true);
        wr.out(("extension " + cl.name) + " {", true);
        wr.indent(1);
        wr.out(("fn unserializeFromDict@(strong):" + cl.name) + " (dict:DictNode) {", true);
        wr.indent(1);
        wr.out(((("def obj:" + cl.name) + " (new ") + cl.name) + "())", true);
        wr.out("return obj", true);
        wr.indent(-1);
        wr.out("}", true);
        wr.newline();
        wr.out("fn serializeToDict:DictNode () {", true);
        wr.indent(1);
        wr.out("def res:DictNode (new DictNode ())", true);
        wr.out(("res.addString(\"n\" \"" + cl.name) + "\")", true);
        wr.out("def obj_keys:DictNode (res.addObject(\"data\"))", true);
        if ((cl.extends_classes.length) > 0) {
            for (var i = 0; i < cl.extends_classes.length; i++) {
                var pName = cl.extends_classes[i];
                var pC = ctx.findClass(pName);
                for (var i_1 = 0; i_1 < pC.variables.length; i_1++) {
                    var pvar = pC.variables[i_1];
                    declaredVariable[pvar.name] = true;
                    var nn = pvar.nameNode;
                    if (nn.isPrimitive()) {
                        wr.out("; extended ", true);
                        wr.out("def key@(lives):DictNode (new DictNode())", true);
                        wr.out(("key.addString(\"n\" \"" + pvar.name) + "\")", true);
                        wr.out(("key.addString(\"t\" \"" + pvar.value_type) + "\")", true);
                        wr.out("obj_keys.push(key)", true);
                    }
                }
                ;
            }
            ;
        }
        for (var i_2 = 0; i_2 < cl.variables.length; i_2++) {
            var pvar_1 = cl.variables[i_2];
            if ((typeof (declaredVariable[pvar_1.name]) != "undefined" && declaredVariable.hasOwnProperty(pvar_1.name))) {
                continue;
            }
            var nn_1 = pvar_1.nameNode;
            if (nn_1.hasFlag("optional")) {
                wr.out("; optional variable", true);
                wr.out(("if (!null? this." + pvar_1.name) + ") {", true);
                wr.indent(1);
                this.createWRWriter(pvar_1, nn_1, ctx, wr);
                wr.indent(-1);
                wr.out("} {", true);
                wr.indent(1);
                wr.indent(-1);
                wr.out("}", true);
                continue;
            }
            wr.out("; not extended ", true);
            this.createWRWriter(pvar_1, nn_1, ctx, wr);
        }
        ;
        wr.out("return res", true);
        wr.indent(-1);
        wr.out("}", true);
        wr.indent(-1);
        wr.out("}", true);
    };
    ;
    RangerSerializeClass.prototype.createWRWriter2 = function (pvar, nn, ctx, wr) {
        if (nn.value_type == 6) {
            if (this.isSerializedClass(nn.array_type, ctx)) {
                wr.out("def values:JSONArrayObject (json_array)", true);
                wr.out(((("for this." + pvar.compiledName) + " item:") + nn.array_type) + " i {", true);
                wr.indent(1);
                wr.out("def obj@(lives):JSONDataObject (item.toDictionary())", true);
                wr.out("push values obj", true);
                wr.indent(-1);
                wr.out("}", true);
                wr.out(("set res  \"" + pvar.name) + "\" values ", true);
            }
            else {
                wr.out("def values:JSONArrayObject (json_array)", true);
                wr.out(((("for this." + pvar.compiledName) + " item:") + nn.array_type) + " i {", true);
                wr.indent(1);
                wr.out("push values item", true);
                wr.indent(-1);
                wr.out("}", true);
                wr.out(("set res  \"" + pvar.name) + "\" values ", true);
            }
            return;
        }
        if (nn.value_type == 7) {
            if (this.isSerializedClass(nn.array_type, ctx)) {
                wr.out("def values:JSONDataObject (json_object)", true);
                wr.out(("def keyList (keys this." + pvar.compiledName) + ")", true);
                wr.out("for keyList keyname:string index {", true);
                wr.indent(1);
                wr.out(("def item (unwrap (get this." + pvar.compiledName) + " keyname))", true);
                if (ctx.isDefinedClass(nn.array_type)) {
                    wr.out("def obj@(lives):JSONDataObject (item.toDictionary())", true);
                    wr.out("set values keyname obj ", true);
                }
                else {
                    wr.out("set values keyname item ", true);
                }
                wr.indent(-1);
                wr.out("}", true);
                wr.out(("set res  \"" + pvar.name) + "\" values ", true);
            }
            else {
                if (ctx.isDefinedClass(nn.array_type) == false) {
                    wr.out("def values:JSONDataObject (json_object)", true);
                    wr.out(("def keyList (keys this." + pvar.compiledName) + ")", true);
                    wr.out("for keyList keyname:string index {", true);
                    wr.indent(1);
                    wr.out(("def item (unwrap (get this." + pvar.compiledName) + " keyname))", true);
                    wr.out("set values keyname item ", true);
                    wr.indent(-1);
                    wr.out("}", true);
                    wr.out(("set res  \"" + pvar.name) + "\" values ", true);
                }
            }
            return;
        }
        if (nn.hasFlag("optional")) {
            if (ctx.isDefinedClass(nn.type_name) == false) {
                wr.out(((("set res  \"" + pvar.name) + "\" (unwrap this.") + pvar.compiledName) + ") ", true);
            }
            else {
                wr.out(((("set res  \"" + pvar.name) + "\" (call (unwrap this.") + pvar.compiledName) + ") toDictionary ()) ", true);
            }
        }
        else {
            if (ctx.isDefinedClass(nn.type_name) == false) {
                wr.out(((("set res  \"" + pvar.name) + "\" (this.") + pvar.compiledName) + ") ", true);
            }
            else {
                wr.out(((("set res  \"" + pvar.name) + "\" (this.") + pvar.compiledName) + ".toDictionary()) ", true);
            }
        }
    };
    ;
    RangerSerializeClass.prototype.createWRReader2 = function (pvar, nn, ctx, wr) {
        if (nn.value_type == 6) {
            if (this.isSerializedClass(nn.array_type, ctx)) {
                wr.out(("def values:JSONArrayObject (getArray dict \"" + pvar.name) + "\")", true);
                wr.out("if(!null? values) {", true);
                wr.indent(1);
                wr.out("def arr (unwrap values)", true);
                wr.out("arr.forEach({", true);
                wr.indent(1);
                wr.out("case item oo:JSONDataObject {", true);
                wr.indent(1);
                wr.out(("def newObj (" + nn.array_type) + ".fromDictionary(oo))", true);
                wr.out(("push obj." + pvar.name) + " newObj", true);
                wr.indent(-1);
                wr.out("}", true);
                wr.indent(-1);
                wr.out("})", true);
                wr.indent(-1);
                wr.out("}", true);
            }
            else {
                wr.out(("def values:JSONArrayObject (getArray dict \"" + pvar.name) + "\")", true);
                wr.out("if(!null? values) {", true);
                wr.indent(1);
                wr.out("def arr (unwrap values)", true);
                wr.out("arr.forEach({", true);
                wr.indent(1);
                wr.out(("case item oo:" + nn.array_type) + " {", true);
                wr.indent(1);
                wr.out(("push obj." + pvar.name) + " oo", true);
                wr.indent(-1);
                wr.out("}", true);
                wr.indent(-1);
                wr.out("})", true);
                wr.indent(-1);
                wr.out("}", true);
            }
            return;
        }
        if (nn.value_type == 7) {
            if (this.isSerializedClass(nn.array_type, ctx)) {
                wr.out(("def values (getObject dict \"" + pvar.name) + "\")", true);
                wr.out("if(!null? values) {", true);
                wr.indent(1);
                wr.out(("def theObj" + pvar.name) + " (unwrap values)", true);
                wr.out(("def obj_keys (keys theObj" + pvar.name) + ")", true);
                wr.out("obj_keys.forEach({", true);
                wr.indent(1);
                if (ctx.isDefinedClass(nn.array_type)) {
                    wr.out(("def theValue (getObject theObj" + pvar.name) + " item ) ", true);
                    wr.out("if(!null? theValue) {", true);
                    wr.indent(1);
                    wr.out(("def newObj@(lives) (" + nn.array_type) + ".fromDictionary((unwrap theValue)))", true);
                    wr.out(("set obj." + pvar.name) + " item newObj ", true);
                    wr.indent(-1);
                    wr.out("}", true);
                }
                else {
                }
                wr.indent(-1);
                wr.out("})", true);
                wr.indent(-1);
                wr.out("}", true);
            }
            else {
                wr.out(("def values (getObject dict \"" + pvar.name) + "\")", true);
                wr.out("if(!null? values) {", true);
                wr.indent(1);
                wr.out(("def theObj" + pvar.name) + " (unwrap values)", true);
                wr.out(("def obj_keys (keys theObj" + pvar.name) + ")", true);
                wr.out("obj_keys.forEach({", true);
                wr.indent(1);
                if (ctx.isDefinedClass(nn.array_type)) {
                }
                else {
                    switch (nn.array_type) {
                        case "string":
                            wr.out(("def v (getStr theObj" + pvar.name) + " item)", true);
                            wr.out("if(!null? v) {", true);
                            wr.indent(1);
                            wr.out(("set obj." + pvar.name) + " item (unwrap v) ", true);
                            wr.indent(-1);
                            wr.out("}", true);
                            break;
                        case "int":
                            wr.out(("def v (getInt theObj" + pvar.name) + " item)", true);
                            wr.out("if(!null? v) {", true);
                            wr.indent(1);
                            wr.out(("set obj." + pvar.name) + " item (unwrap v) ", true);
                            wr.indent(-1);
                            wr.out("}", true);
                            break;
                        case "double":
                            wr.out(("def v (getDouble theObj" + pvar.name) + " item)", true);
                            wr.out("if(!null? v) {", true);
                            wr.indent(1);
                            wr.out(("set obj." + pvar.name) + " item (unwrap v) ", true);
                            wr.indent(-1);
                            wr.out("}", true);
                            break;
                        case "boolean":
                            wr.out(("def v (getBoolean theObj" + pvar.name) + " item)", true);
                            wr.out("if(!null? v) {", true);
                            wr.indent(1);
                            wr.out(("set obj." + pvar.name) + " item (unwrap v) ", true);
                            wr.indent(-1);
                            wr.out("}", true);
                            break;
                    }
                    ;
                }
                wr.indent(-1);
                wr.out("})", true);
                wr.indent(-1);
                wr.out("}", true);
            }
            return;
        }
        switch (nn.type_name) {
            case "string":
                wr.out(("def v (getStr dict \"" + pvar.name) + "\")", true);
                wr.out("if(!null? v) {", true);
                wr.indent(1);
                wr.out(("obj." + pvar.name) + " = (unwrap v) ", true);
                wr.indent(-1);
                wr.out("}", true);
                break;
            case "int":
                wr.out(("def v (getInt dict \"" + pvar.name) + "\")", true);
                wr.out("if(!null? v) {", true);
                wr.indent(1);
                wr.out(("obj." + pvar.name) + " = (unwrap v) ", true);
                wr.indent(-1);
                wr.out("}", true);
                break;
            case "double":
                wr.out(("def v (getDouble dict \"" + pvar.name) + "\")", true);
                wr.out("if(!null? v) {", true);
                wr.indent(1);
                wr.out(("obj." + pvar.name) + " = (unwrap v) ", true);
                wr.indent(-1);
                wr.out("}", true);
                break;
            case "boolean":
                wr.out(("def v (getBoolean dict \"" + pvar.name) + "\")", true);
                wr.out("if(!null? v) {", true);
                wr.indent(1);
                wr.out(("obj." + pvar.name) + " = (unwrap v) ", true);
                wr.indent(-1);
                wr.out("}", true);
                break;
        }
        ;
        if (ctx.isDefinedClass(nn.type_name)) {
            wr.out(("def theValue (getObject dict \"" + pvar.name) + "\") ", true);
            wr.out("if(!null? theValue) {", true);
            wr.indent(1);
            wr.out(("def newObj@(lives) (" + nn.type_name) + ".fromDictionary((unwrap theValue)))", true);
            wr.out(("obj." + pvar.name) + " = newObj ", true);
            wr.indent(-1);
            wr.out("}", true);
        }
        else {
        }
        if (nn.value_type == 13) {
            wr.out(("def v (getInt dict \"" + pvar.name) + "\")", true);
            wr.out("if(!null? v) {", true);
            wr.indent(1);
            wr.out(("obj." + pvar.name) + " = (unwrap v) ", true);
            wr.indent(-1);
            wr.out("}", true);
        }
    };
    ;
    RangerSerializeClass.prototype.createJSONSerializerFn2 = function (cl, ctx, wr) {
        var use_exceptions = operatorsOf_21.getTargetLang_22(ctx) != "swift3";
        var declaredVariable = {};
        wr.out(("extension " + cl.name) + " {", true);
        wr.indent(1);
        wr.out(("static fn fromDictionary@(strong):" + cl.name) + " (dict:JSONDataObject) {", true);
        wr.indent(1);
        wr.out(((("def obj:" + cl.name) + " (new ") + cl.name) + "())", true);
        if (use_exceptions) {
            wr.out("try {", true);
            wr.indent(1);
        }
        for (var i = 0; i < cl.variables.length; i++) {
            var pvar = cl.variables[i];
            if ((typeof (declaredVariable[pvar.name]) != "undefined" && declaredVariable.hasOwnProperty(pvar.name))) {
                continue;
            }
            var nn = pvar.nameNode;
            this.createWRReader2(pvar, nn, ctx, wr);
        }
        ;
        if (use_exceptions) {
            wr.indent(-1);
            wr.out("} {", true);
            wr.out("}", true);
        }
        wr.out("return obj", true);
        wr.indent(-1);
        wr.out("}", true);
        wr.newline();
        wr.out("fn toDictionary:JSONDataObject () {", true);
        wr.indent(1);
        wr.out("def res:JSONDataObject (json_object)", true);
        if (use_exceptions) {
            wr.out("try {", true);
            wr.indent(1);
        }
        if ((cl.extends_classes.length) > 0) {
            for (var i_1 = 0; i_1 < cl.extends_classes.length; i_1++) {
                var pName = cl.extends_classes[i_1];
                var pC = ctx.findClass(pName);
                for (var i_2 = 0; i_2 < pC.variables.length; i_2++) {
                    var pvar_1 = pC.variables[i_2];
                    declaredVariable[pvar_1.name] = true;
                    /** unused:  const nn_1 : CodeNode  = pvar_1.nameNode   **/
                }
                ;
            }
            ;
        }
        for (var i_3 = 0; i_3 < cl.variables.length; i_3++) {
            var pvar_2 = cl.variables[i_3];
            if ((typeof (declaredVariable[pvar_2.name]) != "undefined" && declaredVariable.hasOwnProperty(pvar_2.name))) {
                continue;
            }
            var nn_2 = pvar_2.nameNode;
            if (nn_2.hasFlag("optional")) {
                wr.out("; optional variable", true);
                wr.out(("if (!null? this." + pvar_2.compiledName) + ") {", true);
                wr.indent(1);
                this.createWRWriter2(pvar_2, nn_2, ctx, wr);
                wr.indent(-1);
                wr.out("}", true);
                continue;
            }
            wr.out("; not extended ", true);
            this.createWRWriter2(pvar_2, nn_2, ctx, wr);
        }
        ;
        if (use_exceptions) {
            wr.indent(-1);
            wr.out("} {", true);
            wr.indent(1);
            wr.out("", true);
            wr.indent(-1);
            wr.out("}", true);
        }
        wr.out("return res", true);
        wr.indent(-1);
        wr.out("}", true);
        wr.indent(-1);
        wr.out("}", true);
    };
    ;
    return RangerSerializeClass;
}());
exports.RangerSerializeClass = RangerSerializeClass;
var RangerImmutableExtension = /** @class */ (function () {
    function RangerImmutableExtension() {
    }
    RangerImmutableExtension.prototype.typeDefOf = function (p) {
        var nn = p.nameNode;
        if (p.value_type == 6) {
            return ("[" + nn.array_type) + "]";
        }
        if (p.value_type == 7) {
            return ((("[" + nn.key_type) + ":") + nn.array_type) + "]";
        }
        if (nn.value_type == 6) {
            return ("[" + nn.array_type) + "]";
        }
        if (nn.value_type == 7) {
            return ((("[" + nn.key_type) + ":") + nn.array_type) + "]";
        }
        return nn.type_name;
    };
    ;
    RangerImmutableExtension.prototype.createImmutableExtension = function (cl, ctx, wr) {
        var declaredVariable = {};
        wr.out(("extension " + cl.name) + " {", true);
        wr.indent(1);
        if ((cl.extends_classes.length) > 0) {
            for (var i = 0; i < cl.extends_classes.length; i++) {
                var pName = cl.extends_classes[i];
                var pC = ctx.findClass(pName);
                for (var i_1 = 0; i_1 < pC.variables.length; i_1++) {
                    var pvar = pC.variables[i_1];
                    declaredVariable[pvar.name] = true;
                    /** unused:  const nn : CodeNode  = pvar.nameNode   **/
                }
                ;
            }
            ;
        }
        wr.out(("fn __CopySelf:" + cl.name) + " () {", true);
        wr.indent(1);
        wr.out(("def res (new " + cl.name) + ")", true);
        for (var ii = 0; ii < cl.variables.length; ii++) {
            var ivar = cl.variables[ii];
            wr.out((("res." + ivar.compiledName) + " = this.") + ivar.compiledName, true);
        }
        ;
        wr.out("return res", true);
        wr.indent(-1);
        wr.out("}", true);
        for (var i_2 = 0; i_2 < cl.variables.length; i_2++) {
            var pvar_1 = cl.variables[i_2];
            if ((typeof (declaredVariable[pvar_1.name]) != "undefined" && declaredVariable.hasOwnProperty(pvar_1.name))) {
                continue;
            }
            /** unused:  const nn_1 : CodeNode  = pvar_1.nameNode   **/
            if (true) {
                wr.out(((((((("fn set_" + pvar_1.name) + ":") + cl.name) + " (new_value_of_") + pvar_1.name) + ":") + this.typeDefOf(pvar_1)) + ") {", true);
                wr.indent(1);
                wr.out("def res (this.__CopySelf())", true);
                for (var ii_1 = 0; ii_1 < cl.variables.length; ii_1++) {
                    var ivar_1 = cl.variables[ii_1];
                    if (ivar_1 == pvar_1) {
                        wr.out((("res." + pvar_1.compiledName) + " = new_value_of_") + pvar_1.name, true);
                    }
                }
                ;
                wr.out("return res", true);
                wr.indent(-1);
                wr.out("}", true);
            }
            else {
            }
        }
        ;
        wr.indent(-1);
        wr.out("}", true);
    };
    ;
    return RangerImmutableExtension;
}());
exports.RangerImmutableExtension = RangerImmutableExtension;
var RangerServiceBuilder = /** @class */ (function () {
    function RangerServiceBuilder() {
    }
    RangerServiceBuilder.prototype.createOpStaticClass = function (ctx, name) {
        var nameWillBe = name;
        var str = "";
        var i = 0;
        var __len = nameWillBe.length;
        while (i < __len) {
            var c = nameWillBe.charCodeAt(i);
            if (c == (".".charCodeAt(0))) {
                str = str + "_";
            }
            else {
                str = str + (nameWillBe.substring(i, (i + 1)));
            }
            i = i + 1;
        }
        ;
        if (ctx.isDefinedClass(str)) {
            return ctx.findClass(str);
        }
        var tpl_code = ("class " + str) + " {\r\n}";
        var code = new SourceCode(tpl_code);
        code.filename = str + ".ranger";
        var parser = new RangerLispParser(code);
        parser.parse(false);
        var classRoot = parser.rootNode.children[0];
        var classNameNode = classRoot.getSecond();
        classNameNode.vref = str;
        var new_class = new RangerAppClassDesc();
        new_class.name = str;
        new_class.is_operator_class = true;
        new_class.nameNode = classNameNode;
        new_class.classNode = classRoot;
        var subCtx = ctx.fork();
        subCtx.setCurrentClass(new_class);
        new_class.ctx = subCtx;
        var root = ctx.getRoot();
        root.addClass(str, new_class);
        classNameNode.clDesc = new_class;
        root.staticClassBodies.push(classRoot);
        return new_class;
    };
    ;
    RangerServiceBuilder.prototype.CreateServices = function (parser, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var root, cl;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(ctx.hasCompilerFlag("client") || ctx.hasCompilerSetting("client"))) return [3 /*break*/, 2];
                        console.log("--> could create Client services for Java here...");
                        root = ctx.getRoot();
                        cl = this.createOpStaticClass(ctx, "RangerAppService");
                        console.log("created " + cl.name);
                        return [4 /*yield*/, operatorsOf_13.forEach_25(root.appServices, (function (item, index) {
                                console.log(" - service " + index);
                            }))];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    ;
    return RangerServiceBuilder;
}());
exports.RangerServiceBuilder = RangerServiceBuilder;
var RangerAppOperatorDesc = /** @class */ (function (_super) {
    __extends(RangerAppOperatorDesc, _super);
    function RangerAppOperatorDesc() {
        var _this = _super.call(this) || this;
        _this.name = "";
        _this.ref_cnt = 0; /** note: unused */
        _this.op_params = [];
        return _this;
    }
    RangerAppOperatorDesc.prototype.isOperator = function () {
        return true;
    };
    ;
    RangerAppOperatorDesc.prototype.isProperty = function () {
        return false;
    };
    ;
    return RangerAppOperatorDesc;
}(RangerAppParamDesc));
exports.RangerAppOperatorDesc = RangerAppOperatorDesc;
var TFiles = /** @class */ (function () {
    function TFiles() {
    }
    // typescript static 
    TFiles.searchEnv = function (env, paths, fileName) {
        for (var i = 0; i < paths.length; i++) {
            var path = paths[i];
            if (operatorsOf_8.filec95exists_9(env, path, fileName)) {
                return path;
            }
        }
        ;
        return "";
    };
    ;
    // typescript static 
    TFiles.search = function (paths, fileName) {
        for (var i = 0; i < paths.length; i++) {
            var path = paths[i];
            if (require("fs").existsSync(path + "/" + fileName)) {
                return path;
            }
        }
        ;
        return "";
    };
    ;
    return TFiles;
}());
exports.TFiles = TFiles;
var TTypes = /** @class */ (function () {
    function TTypes() {
    }
    // typescript static 
    TTypes.nameToValue = function (name) {
        switch (name) {
            case "double":
                return 2;
            case "int":
                return 3;
            case "string":
                return 4;
            case "boolean":
                return 5;
            case "char":
                return 14;
            case "charbuffer":
                return 15;
        }
        ;
        return 0;
    };
    ;
    // typescript static 
    TTypes.isPrimitive = function (valueType) {
        switch (valueType) {
            case 2:
                return true;
            case 4:
                return true;
            case 3:
                return true;
            case 5:
                return true;
            case 14:
                return true;
            case 15:
                return true;
            case 13:
                return true;
        }
        ;
        return false;
    };
    ;
    // typescript static 
    TTypes.valueAsString = function (valueType) {
        switch (valueType) {
            case 2:
                return "double";
            case 4:
                return "string";
            case 3:
                return "int";
            case 5:
                return "boolean";
            case 14:
                return "char";
            case 15:
                return "charbuffer";
            case 0:
                return "<no type>";
            case 1:
                return "<invalid type>";
            case 6:
                return "[]";
            case 7:
                return "[:]";
            case 8:
                return "ImmutableArray";
            case 9:
                return "ImmutableHash";
            case 10:
                return "Object";
            case 11:
                return "VRef";
            case 13:
                return "Enum";
            case 12:
                return "Comment";
            case 16:
                return "Expression";
            case 17:
                return "ExpressionType";
            case 18:
                return "Lambda";
            case 19:
                return "XMLNode";
            case 20:
                return "XMLText";
            case 21:
                return "XMLAttr";
            case 22:
                return "XMLAttr";
            case 23:
                return "Dictionary";
            case 24:
                return "Any";
            case 25:
                return "Class";
            case 26:
                return "GenericClass";
            case 27:
                return "ClassRef";
            case 28:
                return "Method";
            case 29:
                return "ClassVar";
            case 30:
                return "ClassVar";
            case 31:
                return "Literal";
            case 32:
                return "Quasiliteral";
            case 33:
                return "Null";
            case 34:
                return "ArrayLiteral";
            default:
                return "InvalidValueTypeEnum";
                break;
        }
        ;
        return "";
    };
    ;
    // typescript static 
    TTypes.baseTypeAsEval = function (node, ctx, wr) {
        var vType = node.value_type;
        node.eval_type = vType;
        if (TTypes.isPrimitive(node.value_type)) {
            node.eval_type_name = TTypes.valueAsString(node.value_type);
        }
        else {
            var vType_2 = node.type_name;
            node.eval_type_name = vType_2;
        }
        var vType1 = node.array_type;
        var vType2 = node.key_type;
        node.eval_array_type = vType1;
        node.eval_key_type = vType2;
    };
    ;
    return TTypes;
}());
exports.TTypes = TTypes;
var ClassJoinPoint = /** @class */ (function () {
    function ClassJoinPoint() {
    }
    return ClassJoinPoint;
}());
exports.ClassJoinPoint = ClassJoinPoint;
var WalkLater = /** @class */ (function () {
    function WalkLater() {
    }
    return WalkLater;
}());
exports.WalkLater = WalkLater;
var RangerFlowParser = /** @class */ (function () {
    function RangerFlowParser() {
        this.hasRootPath = false; /** note: unused */
        this.rootPath = ""; /** note: unused */
        this._debug = false; /** note: unused */
        this.collectWalkAtEnd = []; /** note: unused */
        this.walkAlso = [];
        this.serializedClasses = [];
        this.immutableClasses = [];
        this.classesWithTraits = [];
        this.collectedIntefaces = [];
        this.definedInterfaces = {}; /** note: unused */
        this.signatureCnt = 0;
        this.argSignatureCnt = 0; /** note: unused */
        this.mainCnt = 0;
        this.isDefinedSignature = {};
        this.isDefinedArgSignature = {};
        this.extendedClasses = {};
        this.allNewRNodes = []; /** note: unused */
        this.infinite_recursion = false;
        this.match_types = {};
    }
    RangerFlowParser.prototype.WalkNodeChildren = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var is_chaining, last_is_assign, chainRoot, innerNode, assignNode, newNode, ch_len, i, item, did_find, fc, name_2, last_line, method_name, mArgs, i_1, item_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (node.hasStringProperty("todo")) {
                            ctx.addTodo(node, node.getStringProperty("todo"));
                        }
                        if (!node.expression) return [3 /*break*/, 5];
                        is_chaining = false;
                        last_is_assign = false;
                        chainRoot = void 0;
                        innerNode = void 0;
                        assignNode = void 0;
                        newNode = void 0;
                        ch_len = node.children.length;
                        for (i = 0; i < node.children.length; i++) {
                            item = node.children[i];
                            did_find = false;
                            if ((item.children.length) > 0) {
                                fc = item.getFirst();
                                name_2 = fc.vref;
                                if (((name_2.length) > 0) && ((name_2.charCodeAt(0)) == (".".charCodeAt(0)))) {
                                    did_find = true;
                                    if (i > 0) {
                                        last_line = node.children[(i - 1)];
                                        if (is_chaining == false) {
                                            last_line.createChainTarget();
                                            is_chaining = true;
                                            if ((typeof (last_line.chainTarget) !== "undefined" && last_line.chainTarget != null)) {
                                                chainRoot = last_line.chainTarget;
                                                innerNode = last_line.chainTarget;
                                                assignNode = last_line;
                                                last_is_assign = true;
                                            }
                                            else {
                                                chainRoot = last_line;
                                                innerNode = last_line;
                                            }
                                        }
                                        method_name = name_2.substring(1, (name_2.length));
                                        mArgs = item.getSecond();
                                        if (last_is_assign) {
                                            assignNode.children.push(fc.copy());
                                            assignNode.children.push(mArgs.copy());
                                        }
                                        else {
                                            newNode = node.newExpressionNode();
                                            newNode.add(node.newVRefNode("call"));
                                            newNode.add(innerNode.copy());
                                            newNode.add(node.newVRefNode(method_name));
                                            newNode.add(mArgs.copy());
                                            innerNode = newNode;
                                        }
                                        item.is_part_of_chain = true;
                                    }
                                }
                            }
                            if ((did_find == false) || (i == (ch_len - 1))) {
                                if (is_chaining && (last_is_assign == false)) {
                                    chainRoot.getChildrenFrom(innerNode);
                                    chainRoot.tag = "chainroot";
                                }
                                is_chaining = false;
                                last_is_assign = false;
                            }
                        }
                        ;
                        i_1 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_1 < node.children.length)) return [3 /*break*/, 4];
                        item_1 = node.children[i_1];
                        if (ctx.expressionLevel() == 0) {
                            ctx.lastBlockOp = item_1;
                        }
                        item_1.parent = node;
                        return [4 /*yield*/, this.WalkNode(item_1, ctx, wr)];
                    case 2:
                        _a.sent();
                        node.copyEvalResFrom(item_1);
                        _a.label = 3;
                    case 3:
                        i_1++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        _a.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.WalkNode = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var regInfo, fc, opBody_2, opTpl, currCnt_1, walk_xml_1, fc_3, pName, fc_4, skip_if, fc_5, fnCtx, exprFc, b_found, opFn, _a, sc, sc_1, params, paramClass, rvClassDef, paramClassDef_4, fc_6, sec_2, parts, method_name_2, classDesc_2, calledItem_3, m, m_1, sec_1_1, third, parts_1_1, method_name_1, classDesc_1_1, calledItem_1_1, calledItem_2, was_called, i, item, mDesc, second, lambdaNode, nn;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        /** unused:  const line_index : number  = node.getLine()   **/
                        if (node.flow_done) {
                            return [2 /*return*/, true];
                        }
                        if (ctx.isPluginOp(node)) {
                            return [2 /*return*/, true];
                        }
                        node.flow_ctx = ctx;
                        node.flow_done = true;
                        this.lastProcessedNode = node;
                        if (node.hasStringProperty("todo")) {
                            ctx.addTodo(node, node.getStringProperty("todo"));
                        }
                        if (node.is_part_of_chain) {
                            return [2 /*return*/, true];
                        }
                        if (node.isPrimitive()) {
                            if (ctx.expressionLevel() == 0) {
                                if (false == ctx.hasCompilerFlag("voidexpr")) {
                                    ctx.addError(node, "Primitive element at top level!");
                                }
                            }
                            this.WriteScalarValue(node, ctx, wr);
                            return [2 /*return*/, true];
                        }
                        if (!(((node.value_type == 11) || (node.value_type == 7)) || (node.value_type == 6))) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.WriteVRef(node, ctx, wr)];
                    case 1:
                        _b.sent();
                        return [2 /*return*/, true];
                    case 2:
                        if (node.value_type == 12) {
                            return [2 /*return*/, true];
                        }
                        if ((node.register_name.length) > 0) {
                            if (ctx.isVarDefined(node.register_name)) {
                                regInfo = ctx.getVariableDef(node.register_name);
                                if ((typeof (regInfo.nameNode) !== "undefined" && regInfo.nameNode != null)) {
                                    node.copyEvalResFrom(regInfo.nameNode);
                                    return [2 /*return*/, true];
                                }
                                else {
                                }
                            }
                            else {
                            }
                            return [2 /*return*/, true];
                        }
                        if (!(node.value_type == 19)) return [3 /*break*/, 5];
                        fc = node;
                        if (!(fc.value_type == 19)) return [3 /*break*/, 5];
                        opBody_2 = CodeNode.blockNode();
                        opTpl = CodeNode.fromList([CodeNode.vref1("defn"), CodeNode.vref1("tmp_create"), CodeNode.expressionNode()]);
                        currCnt_1 = 1;
                        walk_xml_1 = (function (xmlNode, regName) {
                        });
                        walk_xml_1 = (function (xmlNode, regName) { return __awaiter(_this, void 0, void 0, function () {
                            var rootClassDef, match_1;
                            var _this = this;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        rootClassDef = ctx.findClass(xmlNode.vref);
                                        if (!rootClassDef.is_system) return [3 /*break*/, 3];
                                        opBody_2.children.push(CodeNode.fromList([CodeNode.vref1("def"), CodeNode.vref1(regName), CodeNode.fromList([CodeNode.vref1("create"), CodeNode.vref1(xmlNode.vref)])]));
                                        return [4 /*yield*/, operatorsOf.forEach_15(xmlNode.attrs, (function (item, index) {
                                                if ((item.children.length) > 0) {
                                                    var fc_1 = item.children[0];
                                                    opBody_2.children.push(CodeNode.fromList([CodeNode.vref1("attr"), CodeNode.vref1(regName), CodeNode.vref1(item.vref), fc_1.copy()]));
                                                    return;
                                                }
                                                if ((item.string_value.length) > 0) {
                                                    opBody_2.children.push(CodeNode.fromList([CodeNode.vref1("attr"), CodeNode.vref1(regName), CodeNode.vref1(item.vref), CodeNode.newStr(item.string_value)]));
                                                }
                                            }))];
                                    case 1:
                                        _a.sent();
                                        return [4 /*yield*/, operatorsOf.forEach_15(xmlNode.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                                var itemCopy, theNode, t, chNode_1, regN;
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0:
                                                            if (!(item.value_type != 19)) return [3 /*break*/, 2];
                                                            if (!item.expression) return [3 /*break*/, 2];
                                                            itemCopy = item.copy();
                                                            theNode = item;
                                                            ctx.setTestCompile();
                                                            return [4 /*yield*/, this.WalkNode(itemCopy, ctx, wr)];
                                                        case 1:
                                                            _a.sent();
                                                            ctx.unsetTestCompile();
                                                            if (ctx.hasClass(itemCopy.eval_array_type)) {
                                                                t = CodeNode.vref1("tmp");
                                                                t.setFlag("temp");
                                                                opBody_2.children.push(CodeNode.fromList([CodeNode.vref1("forEach"), theNode.copy(), CodeNode.blockFromList([CodeNode.fromList([CodeNode.vref1("def"), t, CodeNode.vref1("item")]), CodeNode.fromList([CodeNode.vref1("push"), CodeNode.vref1(regName), CodeNode.vref1("tmp")])])]));
                                                            }
                                                            else {
                                                                if (ctx.hasClass(itemCopy.eval_type_name)) {
                                                                    opBody_2.children.push(CodeNode.fromList([CodeNode.vref1("push"), CodeNode.vref1(regName), theNode.copy()]));
                                                                }
                                                            }
                                                            return [3 /*break*/, 2];
                                                        case 2:
                                                            if (!(item.value_type == 19)) return [3 /*break*/, 4];
                                                            if (!ctx.hasClass(item.vref)) return [3 /*break*/, 4];
                                                            chNode_1 = item;
                                                            currCnt_1 = currCnt_1 + 1;
                                                            regN = "r" + currCnt_1;
                                                            return [4 /*yield*/, walk_xml_1(chNode_1, regN)];
                                                        case 3:
                                                            _a.sent();
                                                            opBody_2.children.push(CodeNode.fromList([CodeNode.vref1("push"), CodeNode.vref1(regName), CodeNode.vref1(regN)]));
                                                            _a.label = 4;
                                                        case 4: return [2 /*return*/];
                                                    }
                                                });
                                            }); }))];
                                    case 2:
                                        _a.sent();
                                        return [3 /*break*/, 6];
                                    case 3:
                                        match_1 = new RangerArgMatch();
                                        opBody_2.children.push(CodeNode.fromList([CodeNode.vref1("def"), CodeNode.vref1(regName), CodeNode.fromList([CodeNode.vref1("new"), CodeNode.vref1(xmlNode.vref)])]));
                                        return [4 /*yield*/, operatorsOf.forEach_15(xmlNode.attrs, (function (item, index) {
                                                if ((item.children.length) > 0) {
                                                    var fc_2 = item.children[0];
                                                    opBody_2.children.push(CodeNode.fromList([CodeNode.vref1("="), CodeNode.vref1(((regName + ".") + item.vref)), fc_2.copy()]));
                                                    return;
                                                }
                                                if ((item.string_value.length) > 0) {
                                                    opBody_2.children.push(CodeNode.fromList([CodeNode.vref1("="), CodeNode.vref1(((regName + ".") + item.vref)), CodeNode.newStr(item.string_value)]));
                                                }
                                                if (item.parsed_type == 3) {
                                                    opBody_2.children.push(CodeNode.fromList([CodeNode.vref1("="), CodeNode.vref1(((regName + ".") + item.vref)), CodeNode.newInt(item.int_value)]));
                                                }
                                            }))];
                                    case 4:
                                        _a.sent();
                                        return [4 /*yield*/, operatorsOf.forEach_15(xmlNode.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                                var itemCopy_1_1, theNode_1_1, paramClassDef_3_1, chNode_3_1;
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0:
                                                            if (!(item.value_type != 19)) return [3 /*break*/, 2];
                                                            if (!item.expression) return [3 /*break*/, 2];
                                                            itemCopy_1_1 = item.copy();
                                                            theNode_1_1 = item;
                                                            ctx.setTestCompile();
                                                            return [4 /*yield*/, this.WalkNode(itemCopy_1_1, ctx, wr)];
                                                        case 1:
                                                            _a.sent();
                                                            ctx.unsetTestCompile();
                                                            if (ctx.hasClass(itemCopy_1_1.eval_array_type)) {
                                                                /** unused:  const paramClassDef_2 : RangerAppClassDesc  = ctx.findClass(itemCopy_1.eval_array_type)   **/
                                                                /** unused:  const chNode_2 : CodeNode  = item   **/
                                                                operatorsOf.forEach_11(rootClassDef.variables, (function (item, index) {
                                                                    if (match_1.areEqualATypes(item.nameNode.array_type, itemCopy_1_1.eval_array_type, ctx)) {
                                                                        var t_1 = CodeNode.vref1("tmp");
                                                                        t_1.setFlag("temp");
                                                                        opBody_2.children.push(CodeNode.fromList([CodeNode.vref1("forEach"), theNode_1_1.copy(), CodeNode.blockFromList([CodeNode.fromList([CodeNode.vref1("def"), t_1, CodeNode.vref1("item")]), CodeNode.fromList([CodeNode.vref1("push"), CodeNode.vref1(((regName + ".") + item.name)), CodeNode.vref1("tmp")])])]));
                                                                    }
                                                                }));
                                                            }
                                                            else {
                                                                console.log("could not find class" + itemCopy_1_1.eval_array_type);
                                                            }
                                                            _a.label = 2;
                                                        case 2:
                                                            if (item.value_type == 19) {
                                                                if (ctx.hasClass(item.vref)) {
                                                                    paramClassDef_3_1 = ctx.findClass(item.vref);
                                                                    chNode_3_1 = item;
                                                                    operatorsOf.forEach_11(rootClassDef.variables, (function (item, index) {
                                                                        if (match_1.areEqualATypes(item.nameNode.array_type, chNode_3_1.vref, ctx)) {
                                                                            currCnt_1 = currCnt_1 + 1;
                                                                            var regN_1 = "r" + currCnt_1;
                                                                            walk_xml_1(chNode_3_1, regN_1);
                                                                            if (paramClassDef_3_1.is_immutable) {
                                                                                opBody_2.children.push(CodeNode.fromList([CodeNode.vref1("="), CodeNode.vref1(((regName + ".") + item.name)), CodeNode.fromList([CodeNode.vref1("push"), CodeNode.vref1(((regName + ".") + item.name)), CodeNode.vref1(regN_1)])]));
                                                                            }
                                                                            else {
                                                                                opBody_2.children.push(CodeNode.fromList([CodeNode.vref1("push"), CodeNode.vref1(((regName + ".") + item.name)), CodeNode.vref1(regN_1)]));
                                                                            }
                                                                        }
                                                                    }));
                                                                }
                                                            }
                                                            return [2 /*return*/];
                                                    }
                                                });
                                            }); }))];
                                    case 5:
                                        _a.sent();
                                        _a.label = 6;
                                    case 6: return [2 /*return*/];
                                }
                            });
                        }); });
                        return [4 /*yield*/, walk_xml_1(fc, "r1")];
                    case 3:
                        _b.sent();
                        opBody_2.children.push(CodeNode.fromList([CodeNode.vref1("ret"), CodeNode.vref1("r1")]));
                        opTpl.children.push(opBody_2);
                        node.value_type = 0;
                        node.getChildrenFrom(CodeNode.fromList([CodeNode.vref1("tmp_create")]));
                        node.value_type = 0;
                        node.expression = true;
                        return [4 /*yield*/, this.TransformOpFn([opTpl], node, ctx, wr)];
                    case 4:
                        _b.sent();
                        return [2 /*return*/, true];
                    case 5:
                        if ((node.children.length) > 0) {
                            fc_3 = node.getFirst();
                            if ((fc_3.ns.length) > 1) {
                                if ((fc_3.ns[0]) == "plugin") {
                                    if (node.is_plugin) {
                                        return [2 /*return*/, true];
                                    }
                                    node.is_plugin = true;
                                    pName = fc_3.ns[1];
                                    ctx.addPluginNode(pName, node);
                                    return [2 /*return*/, true];
                                }
                            }
                        }
                        if (!((node.children.length) == 1)) return [3 /*break*/, 10];
                        fc_4 = node.children[0];
                        if (!ctx.isVarDefined(fc_4.vref)) return [3 /*break*/, 10];
                        fc_4.parent = node;
                        if (!(typeof (fc_4.evalCtx) !== "undefined" && fc_4.evalCtx != null)) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.WalkNode(fc_4, fc_4.evalCtx, wr)];
                    case 6:
                        _b.sent();
                        return [3 /*break*/, 9];
                    case 7: return [4 /*yield*/, this.WalkNode(fc_4, ctx, wr)];
                    case 8:
                        _b.sent();
                        _b.label = 9;
                    case 9:
                        node.copyEvalResFrom(fc_4);
                        return [2 /*return*/, true];
                    case 10:
                        skip_if = ["Extends", "operator", "extends", "operators", "systemclass", "systemunion", "union", "flag", "trait", "enum", "Import"];
                        if (!((node.children.length) > 0)) return [3 /*break*/, 60];
                        fc_5 = node.children[0];
                        if ((skip_if.indexOf(fc_5.vref)) >= 0) {
                            return [2 /*return*/, true];
                        }
                        if (!(fc_5.vref == "#")) return [3 /*break*/, 12];
                        fnCtx = ctx.findFunctionCtx();
                        return [4 /*yield*/, this.DefineArrowOpFn(node, fnCtx, wr)];
                    case 11:
                        _b.sent();
                        node.value_type = 11;
                        node.expression = false;
                        node.is_block_node = false;
                        node.ns.length = 0;
                        node.ns.push(node.vref);
                        node.children.length = 0;
                        node.paramDesc = undefined;
                        node.hasParamDesc = false;
                        return [2 /*return*/, true];
                    case 12:
                        if (!(fc_5.expression && ((fc_5.children.length) > 0))) return [3 /*break*/, 14];
                        exprFc = fc_5.children[0];
                        if (!(exprFc.vref == "#")) return [3 /*break*/, 14];
                        return [4 /*yield*/, this.DefineArrowOpFn(fc_5, ctx, wr)];
                    case 13:
                        _b.sent();
                        _b.label = 14;
                    case 14:
                        b_found = true;
                        return [4 /*yield*/, ctx.getOpFns(fc_5.vref)];
                    case 15:
                        opFn = _b.sent();
                        if (!((opFn.length) > 0)) return [3 /*break*/, 17];
                        return [4 /*yield*/, this.TransformOpFn(opFn, node, ctx, wr)];
                    case 16:
                        _b.sent();
                        return [2 /*return*/, true];
                    case 17:
                        _a = fc_5.vref;
                        switch (_a) {
                            case "page": return [3 /*break*/, 18];
                            case "def": return [3 /*break*/, 19];
                            case "var": return [3 /*break*/, 21];
                            case "let": return [3 /*break*/, 23];
                            case "property": return [3 /*break*/, 25];
                            case "CreateClass": return [3 /*break*/, 27];
                            case "class": return [3 /*break*/, 29];
                            case "defn": return [3 /*break*/, 31];
                            case "fn": return [3 /*break*/, 32];
                            case "sfn": return [3 /*break*/, 37];
                            case "static": return [3 /*break*/, 39];
                            case "=": return [3 /*break*/, 41];
                            case "constructor": return [3 /*break*/, 43];
                            case "Constructor": return [3 /*break*/, 45];
                            case "new": return [3 /*break*/, 47];
                            case "[]": return [3 /*break*/, 49];
                            case "call": return [3 /*break*/, 51];
                            case "fun": return [3 /*break*/, 53];
                            case "extension": return [3 /*break*/, 55];
                            case "service": return [3 /*break*/, 57];
                        }
                        return [3 /*break*/, 58];
                    case 18:
                        sc = node.getSecond();
                        ctx.addPage(sc.vref, node);
                        return [3 /*break*/, 59];
                    case 19: return [4 /*yield*/, operatorsOfRangerFlowParser_26.EnterVarDef_27(this, node, ctx, wr)];
                    case 20:
                        _b.sent();
                        return [3 /*break*/, 59];
                    case 21: return [4 /*yield*/, operatorsOf_26.EnterVarDef_27(this, node, ctx, wr)];
                    case 22:
                        _b.sent();
                        return [3 /*break*/, 59];
                    case 23: return [4 /*yield*/, operatorsOf_26.EnterVarDef_27(this, node, ctx, wr)];
                    case 24:
                        _b.sent();
                        return [3 /*break*/, 59];
                    case 25: return [4 /*yield*/, this.GetProperty(node, ctx, wr)];
                    case 26:
                        _b.sent();
                        return [3 /*break*/, 59];
                    case 27: return [4 /*yield*/, this.EnterClass(node, ctx, wr)];
                    case 28:
                        _b.sent();
                        return [3 /*break*/, 59];
                    case 29: return [4 /*yield*/, this.EnterClass(node, ctx, wr)];
                    case 30:
                        _b.sent();
                        return [3 /*break*/, 59];
                    case 31:
                        this.DefineOpFn(node, ctx, wr);
                        return [3 /*break*/, 59];
                    case 32:
                        if (!ctx.isInMethod()) return [3 /*break*/, 34];
                        return [4 /*yield*/, this.EnterLambdaMethod(node, ctx, wr)];
                    case 33:
                        _b.sent();
                        return [3 /*break*/, 36];
                    case 34: return [4 /*yield*/, this.EnterMethod(node, ctx, wr)];
                    case 35:
                        _b.sent();
                        _b.label = 36;
                    case 36: return [3 /*break*/, 59];
                    case 37: return [4 /*yield*/, this.EnterStaticMethod(node, ctx, wr)];
                    case 38:
                        _b.sent();
                        return [3 /*break*/, 59];
                    case 39: return [4 /*yield*/, this.EnterStaticMethod(node, ctx, wr)];
                    case 40:
                        _b.sent();
                        return [3 /*break*/, 59];
                    case 41: return [4 /*yield*/, this.cmdAssign(node, ctx, wr)];
                    case 42:
                        _b.sent();
                        return [3 /*break*/, 59];
                    case 43: return [4 /*yield*/, this.Constructor(node, ctx, wr)];
                    case 44:
                        _b.sent();
                        return [3 /*break*/, 59];
                    case 45: return [4 /*yield*/, this.Constructor(node, ctx, wr)];
                    case 46:
                        _b.sent();
                        return [3 /*break*/, 59];
                    case 47: return [4 /*yield*/, this.cmdNew(node, ctx, wr)];
                    case 48:
                        _b.sent();
                        return [3 /*break*/, 59];
                    case 49: return [4 /*yield*/, this.cmdArray(node, ctx, wr)];
                    case 50:
                        _b.sent();
                        return [3 /*break*/, 59];
                    case 51: return [4 /*yield*/, this.cmdCall(node, ctx, wr)];
                    case 52:
                        _b.sent();
                        return [3 /*break*/, 59];
                    case 53: return [4 /*yield*/, this.EnterLambdaMethod(node, ctx, wr)];
                    case 54:
                        _b.sent();
                        return [3 /*break*/, 59];
                    case 55: return [4 /*yield*/, this.EnterClass(node, ctx, wr)];
                    case 56:
                        _b.sent();
                        return [3 /*break*/, 59];
                    case 57:
                        try {
                            sc_1 = node.getSecond();
                            params = node.getThird();
                            ctx.addService(sc_1.vref, node);
                            paramClass = params.getFirst();
                            rvClassDef = ctx.findClass(sc_1.type_name);
                            paramClassDef_4 = ctx.findClass(paramClass.type_name);
                            node.appGUID = (sc_1.vref + "_") + (require('crypto').createHash('sha256').update((rvClassDef.node.getCode() + paramClassDef_4.node.getCode())).digest('hex'));
                        }
                        catch (e) {
                            ctx.addError(node, "invalid service definition");
                        }
                        return [3 /*break*/, 59];
                    case 58:
                        b_found = false;
                        return [3 /*break*/, 59];
                    case 59:
                        ;
                        if (b_found) {
                            return [2 /*return*/, true];
                        }
                        _b.label = 60;
                    case 60: return [4 /*yield*/, this.matchNode(node, ctx, wr)];
                    case 61:
                        if (_b.sent()) {
                            return [2 /*return*/, true];
                        }
                        if (!((node.children.length) > 0)) return [3 /*break*/, 73];
                        fc_6 = node.children[0];
                        if (!(fc_6.expression && ((node.children.length) == 2))) return [3 /*break*/, 67];
                        sec_2 = node.getSecond();
                        if (!(((sec_2.vref.length) > 0) && ((sec_2.vref[0]) == "."))) return [3 /*break*/, 67];
                        return [4 /*yield*/, this.WalkNode(fc_6, ctx, wr)];
                    case 62:
                        _b.sent();
                        if (!(((fc_6.eval_type_name.length) > 0) && ctx.isDefinedClass(fc_6.eval_type_name))) return [3 /*break*/, 67];
                        parts = (sec_2.vref.substring(1, (sec_2.vref.length))).split(".");
                        method_name_2 = parts[0];
                        classDesc_2 = ctx.findClass(fc_6.eval_type_name);
                        calledItem_3 = CodeNode.fromList([CodeNode.vref1("property"), fc_6.copy(), CodeNode.vref1(method_name_2)]);
                        return [4 /*yield*/, operatorsOf.forEach_12(parts, (function (item, index) {
                                if (index > 0) {
                                    try {
                                        var p = classDesc_2.findVariable(method_name_2);
                                        classDesc_2 = ctx.findClass(p.nameNode.type_name);
                                        calledItem_3 = CodeNode.fromList([CodeNode.vref1("property"), calledItem_3.copy(), CodeNode.vref1(item)]);
                                        method_name_2 = item;
                                    }
                                    catch (e) {
                                        ctx.addError(sec_2, "invalid property");
                                    }
                                }
                            }))];
                    case 63:
                        _b.sent();
                        m = classDesc_2.findVariable(method_name_2);
                        if (!(typeof (m) !== "undefined" && m != null)) return [3 /*break*/, 65];
                        node.getChildrenFrom(calledItem_3);
                        node.flow_done = false;
                        return [4 /*yield*/, this.WalkNode(node, ctx, wr)];
                    case 64:
                        _b.sent();
                        return [2 /*return*/, true];
                    case 65:
                        m_1 = classDesc_2.findMethod(method_name_2);
                        if (!(typeof (m_1) !== "undefined" && m_1 != null)) return [3 /*break*/, 67];
                        node.getChildrenFrom(calledItem_3);
                        node.flow_done = false;
                        return [4 /*yield*/, this.transformMethodToLambda(node, m_1, ctx, wr)];
                    case 66:
                        _b.sent();
                        return [2 /*return*/, true];
                    case 67:
                        if (!(fc_6.expression && ((node.children.length) == 3))) return [3 /*break*/, 71];
                        sec_1_1 = node.getSecond();
                        third = node.getThird();
                        if (!(((sec_1_1.vref.length) > 0) && ((sec_1_1.vref[0]) == "."))) return [3 /*break*/, 71];
                        return [4 /*yield*/, this.WalkNode(fc_6, ctx, wr)];
                    case 68:
                        _b.sent();
                        parts_1_1 = (sec_1_1.vref.substring(1, (sec_1_1.vref.length))).split(".");
                        method_name_1 = parts_1_1[((parts_1_1.length) - 1)];
                        classDesc_1_1 = ctx.findClass(fc_6.eval_type_name);
                        calledItem_1_1 = fc_6.copy();
                        return [4 /*yield*/, operatorsOf.forEach_12(parts_1_1, (function (item, index) {
                                if (index < ((parts_1_1.length) - 1)) {
                                    try {
                                        calledItem_1_1 = CodeNode.fromList([CodeNode.vref1("property"), calledItem_1_1.copy(), CodeNode.vref1(item)]);
                                        var p_1 = classDesc_1_1.findVariable(item);
                                        classDesc_1_1 = ctx.findClass(p_1.nameNode.type_name);
                                    }
                                    catch (e) {
                                        ctx.addError(sec_1_1, "invalid property " + item);
                                    }
                                }
                            }))];
                    case 69:
                        _b.sent();
                        calledItem_2 = CodeNode.fromList([CodeNode.vref1("call"), calledItem_1_1, CodeNode.vref1(method_name_1), third.copy()]);
                        node.getChildrenFrom(calledItem_2);
                        node.flow_done = false;
                        return [4 /*yield*/, this.WalkNode(node, ctx, wr)];
                    case 70:
                        _b.sent();
                        return [2 /*return*/, true];
                    case 71:
                        if (!(fc_6.value_type == 11)) return [3 /*break*/, 73];
                        was_called = true;
                        switch (fc_6.vref) {
                            case "Enum":
                                was_called = true;
                                break;
                            default:
                                was_called = false;
                                break;
                        }
                        ;
                        if (was_called) {
                            return [2 /*return*/, true];
                        }
                        if (!((node.children.length) > 1)) return [3 /*break*/, 73];
                        return [4 /*yield*/, this.cmdLocalCall(node, ctx, wr)];
                    case 72:
                        if (_b.sent()) {
                            return [2 /*return*/, true];
                        }
                        _b.label = 73;
                    case 73:
                        if (!node.expression) return [3 /*break*/, 84];
                        i = 0;
                        _b.label = 74;
                    case 74:
                        if (!(i < node.children.length)) return [3 /*break*/, 83];
                        item = node.children[i];
                        if (ctx.expressionLevel() == 0) {
                            ctx.lastBlockOp = item;
                        }
                        item.parent = node;
                        if (!(typeof (item.evalCtx) !== "undefined" && item.evalCtx != null)) return [3 /*break*/, 76];
                        return [4 /*yield*/, this.WalkNode(item, item.evalCtx, wr)];
                    case 75:
                        _b.sent();
                        return [3 /*break*/, 78];
                    case 76: return [4 /*yield*/, this.WalkNode(item, ctx, wr)];
                    case 77:
                        _b.sent();
                        _b.label = 78;
                    case 78:
                        node.copyEvalResFrom(item);
                        if ((i == 0) && ((node.children.length) == 2)) {
                            if ((item.eval_type == 28) && ((typeof (item.paramDesc) !== "undefined" && item.paramDesc != null))) {
                                mDesc = item.paramDesc;
                                node.eval_type = mDesc.nameNode.value_type;
                                node.eval_type_name = mDesc.nameNode.type_name;
                                node.eval_array_type = mDesc.nameNode.array_type;
                                node.eval_key_type = mDesc.nameNode.eval_key_type;
                                node.is_direct_method_call = true;
                                return [2 /*return*/, true];
                            }
                        }
                        if (!((((typeof (item.expression_value) !== "undefined" && item.expression_value != null)) || (item.value_type == 17)) || (item.eval_type == 17))) return [3 /*break*/, 82];
                        if (!((i == 0) && ((node.children.length) == 2))) return [3 /*break*/, 82];
                        node.has_lambda_call = true;
                        second = node.children[1];
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(second, ctx, wr)];
                    case 79:
                        _b.sent();
                        ctx.unsetInExpr();
                        if (!(typeof (item.expression_value) !== "undefined" && item.expression_value != null)) return [3 /*break*/, 81];
                        lambdaNode = item.expression_value;
                        nn = lambdaNode.children[0];
                        node.eval_type = nn.typeNameAsType(ctx);
                        node.eval_type_name = nn.type_name;
                        node.eval_array_type = nn.array_type;
                        node.eval_key_type = nn.key_type;
                        if (node.eval_type == 17) {
                            node.expression_value = nn.expression_value.copy();
                        }
                        if (nn.hasFlag("optional")) {
                            node.setFlag("optional");
                        }
                        return [4 /*yield*/, this.testLambdaCallArgs(lambdaNode, second, ctx, wr)];
                    case 80:
                        _b.sent();
                        _b.label = 81;
                    case 81: return [3 /*break*/, 83];
                    case 82:
                        i++;
                        return [3 /*break*/, 74];
                    case 83:
                        ;
                        return [2 /*return*/, true];
                    case 84:
                        ctx.addError(node, "Could not understand this part");
                        return [2 /*return*/, true];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.getVoidNameSignature = function () {
        var s = "void";
        if ((typeof (this.isDefinedSignature[s]) != "undefined" && this.isDefinedSignature.hasOwnProperty(s))) {
            var cc = (this.isDefinedSignature[s]);
            return "void_" + cc;
        }
        this.signatureCnt = this.signatureCnt + 1;
        this.isDefinedSignature[s] = this.signatureCnt;
        return "void_" + this.signatureCnt;
    };
    ;
    RangerFlowParser.prototype.getNameSignature = function (node) {
        var s = node.type_name + node.buildTypeSignature();
        if ((typeof (this.isDefinedSignature[s]) != "undefined" && this.isDefinedSignature.hasOwnProperty(s))) {
            var cc = (this.isDefinedSignature[s]);
            if (cc == 1) {
                return node.type_name;
            }
            return "_" + cc;
        }
        this.signatureCnt = this.signatureCnt + 1;
        this.isDefinedSignature[s] = this.signatureCnt;
        if (this.signatureCnt == 1) {
            return node.type_name;
        }
        return (node.type_name + "_") + this.signatureCnt;
    };
    ;
    RangerFlowParser.prototype.getArgsSignature = function (node) {
        var exp_s = "";
        for (var i = 0; i < node.children.length; i++) {
            var arg = node.children[i];
            exp_s = exp_s + arg.buildTypeSignature();
            exp_s = exp_s + ",";
        }
        ;
        if ((typeof (this.isDefinedArgSignature[exp_s]) != "undefined" && this.isDefinedArgSignature.hasOwnProperty(exp_s))) {
            var cc = (this.isDefinedArgSignature[exp_s]);
            if (cc == 1) {
                return "";
            }
            return "_" + cc;
        }
        this.signatureCnt = this.signatureCnt + 1;
        this.isDefinedArgSignature[exp_s] = this.signatureCnt;
        if (this.signatureCnt == 1) {
            return "";
        }
        return "_" + this.signatureCnt;
    };
    ;
    RangerFlowParser.prototype.getThisName = function () {
        return "this";
    };
    ;
    RangerFlowParser.prototype.GetProperty = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var obj, prop, currC, varDef, vNameNode, mDef;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if ((node.children.length) != 3) {
                            ctx.addError(node, "Invalid property descriptor");
                            return [2 /*return*/];
                        }
                        obj = node.getSecond();
                        prop = node.getThird();
                        return [4 /*yield*/, this.WalkNode(obj, ctx, wr)];
                    case 1:
                        _a.sent();
                        if (ctx.isDefinedClass(obj.eval_type_name)) {
                            try {
                                currC = ctx.findClass(obj.eval_type_name);
                                varDef = currC.findVariable(prop.vref);
                                if ((typeof (varDef) !== "undefined" && varDef != null)) {
                                    prop.flow_done = true;
                                    prop.eval_type = 11;
                                    node.hasParamDesc = true;
                                    node.ownParamDesc = varDef;
                                    node.paramDesc = varDef;
                                    varDef.ref_cnt = 1 + varDef.ref_cnt;
                                    vNameNode = varDef.nameNode;
                                    if ((typeof (vNameNode) !== "undefined" && vNameNode != null)) {
                                        if (vNameNode.hasFlag("optional")) {
                                            node.setFlag("optional");
                                        }
                                        node.eval_type = vNameNode.typeNameAsType(ctx);
                                        node.eval_type_name = vNameNode.type_name;
                                        if (vNameNode.value_type == 6) {
                                            node.eval_type = 6;
                                            node.eval_array_type = vNameNode.array_type;
                                        }
                                        if (vNameNode.value_type == 7) {
                                            node.eval_type = 7;
                                            node.eval_key_type = vNameNode.key_type;
                                            node.eval_array_type = vNameNode.array_type;
                                        }
                                    }
                                    return [2 /*return*/];
                                }
                                mDef = currC.findMethod(prop.vref);
                                if ((typeof (mDef) !== "undefined" && mDef != null)) {
                                    node.eval_type = 28;
                                    node.hasParamDesc = true;
                                    node.ownParamDesc = mDef;
                                    node.paramDesc = mDef;
                                    mDef.ref_cnt = 1 + mDef.ref_cnt;
                                    return [2 /*return*/];
                                }
                                ctx.addError(node, "Did not find property from class " + currC.name);
                            }
                            catch (e) {
                                ctx.addError(node, "Not valid property access");
                            }
                        }
                        else {
                            ctx.addError(obj, "Can not access property of a non-class value");
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.WriteVRef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var rootObjName, enumName, ee, e, cd, thisClassDesc, captDef, cd_1, vDef, vNameNode, m, m_1, class_or_this, m_2, udesc, desc, opList;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (node.vref == "_") {
                            return [2 /*return*/];
                        }
                        if (node.vref == "#") {
                            return [2 /*return*/];
                        }
                        rootObjName = node.ns[0];
                        if (ctx.isInStatic()) {
                            if (rootObjName == "this") {
                                ctx.addError(node, "This can not be used in static context");
                            }
                        }
                        if (ctx.isEnumDefined(rootObjName)) {
                            enumName = node.ns[1];
                            ee = ctx.getEnum(rootObjName);
                            e = ee;
                            if ((typeof (e.values[enumName]) != "undefined" && e.values.hasOwnProperty(enumName))) {
                                node.eval_type = 13;
                                node.eval_type_name = rootObjName;
                                node.int_value = (e.values[enumName]);
                            }
                            else {
                                ctx.addError(node, (("Undefined Enum " + rootObjName) + ".") + enumName);
                                node.eval_type = 1;
                            }
                            return [2 /*return*/];
                        }
                        if (node.vref == this.getThisName()) {
                            cd = ctx.getCurrentClass();
                            thisClassDesc = cd;
                            node.eval_type = 10;
                            node.eval_type_name = thisClassDesc.name;
                            node.ref_type = 4;
                            return [2 /*return*/];
                        }
                        if (ctx.isCapturing()) {
                            if (ctx.isVarDefined(rootObjName)) {
                                if (ctx.isLocalToCapture(rootObjName) == false) {
                                    captDef = ctx.getVariableDef(rootObjName);
                                    cd_1 = ctx.getCurrentClass();
                                    cd_1.capturedLocals.push(captDef);
                                    captDef.is_captured = true;
                                    ctx.addCapturedVariable(rootObjName);
                                }
                            }
                        }
                        if (!((rootObjName == "this") || ctx.isVarDefined(rootObjName))) return [3 /*break*/, 1];
                        vDef = this.findParamDesc(node, ctx, wr);
                        if ((typeof (vDef) !== "undefined" && vDef != null)) {
                            node.hasParamDesc = true;
                            node.ownParamDesc = vDef;
                            node.paramDesc = vDef;
                            vDef.ref_cnt = 1 + vDef.ref_cnt;
                            vNameNode = vDef.nameNode;
                            if (ctx.isDefinedClass(node.type_name)) {
                                m = ctx.getCurrentMethod();
                                m.addClassUsage(ctx.findClass(node.type_name), ctx);
                            }
                            if (ctx.isDefinedClass(node.eval_type_name)) {
                                m_1 = ctx.getCurrentMethod();
                                m_1.addClassUsage(ctx.findClass(node.eval_type_name), ctx);
                            }
                            if ((typeof (vNameNode) !== "undefined" && vNameNode != null)) {
                                if (vNameNode.hasFlag("optional")) {
                                    node.setFlag("optional");
                                }
                                node.eval_type = vNameNode.typeNameAsType(ctx);
                                node.eval_type_name = vNameNode.type_name;
                                if (vNameNode.value_type == 6) {
                                    node.eval_type = 6;
                                    node.eval_array_type = vNameNode.array_type;
                                }
                                if (vNameNode.value_type == 7) {
                                    node.eval_type = 7;
                                    node.eval_key_type = vNameNode.key_type;
                                    node.eval_array_type = vNameNode.array_type;
                                }
                            }
                        }
                        else {
                            ctx.addError(node, "Undefined variable");
                        }
                        return [3 /*break*/, 4];
                    case 1:
                        class_or_this = rootObjName == this.getThisName();
                        if (ctx.isDefinedClass(rootObjName)) {
                            class_or_this = true;
                            node.eval_type = 25;
                            node.eval_type_name = rootObjName;
                            m_2 = ctx.getCurrentMethod();
                            m_2.addClassUsage(ctx.findClass(rootObjName), ctx);
                        }
                        if (ctx.hasTemplateNode(rootObjName)) {
                            class_or_this = true;
                        }
                        if (!(false == class_or_this)) return [3 /*break*/, 3];
                        udesc = ctx.getCurrentClass();
                        desc = udesc;
                        return [4 /*yield*/, ctx.getOpFns(node.vref)];
                    case 2:
                        opList = _a.sent();
                        if (((((opList.length) > 0) || (node.vref == "fun")) || (node.vref == "fn")) || node.hasFlag("keyword")) {
                        }
                        else {
                            ctx.addError(node, (((("WriteVREF -> Undefined variable " + node.vref) + " in class ") + desc.name) + " node : ") + node.getCode());
                            ctx.addError(node, (((("WriteVREF -> Undefined variable " + rootObjName) + " in class ") + desc.name) + " node : ") + node.parent.getCode());
                            if ((typeof (node.parent.parent) !== "undefined" && node.parent.parent != null)) {
                                ctx.addError(node, (((("WriteVREF -> Undefined variable " + rootObjName) + " in class ") + desc.name) + " node : ") + node.parent.parent.getCode());
                            }
                        }
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.EnterFn = function (node, ctx, wr, callback) {
        return __awaiter(this, void 0, void 0, function () {
            var idx_26, currClass, e_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        if ((node.children.length) < 4) {
                            ctx.addError(node, "Function has too few arguments");
                            return [2 /*return*/];
                        }
                        idx_26 = 0;
                        return [4 /*yield*/, operatorsOf.forEach_15(node.children, (function (item, index) {
                                if (item.vref == "static") {
                                    idx_26 = idx_26 + 1;
                                }
                            }))];
                    case 1:
                        _a.sent();
                        currClass = ctx.getCurrentClass();
                        if (typeof (currClass) === "undefined") {
                            ctx.addError(node, "Current class was not defined when entering method");
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, callback(node, ctx, wr, node.children[(idx_26 + 1)], node.children[(idx_26 + 2)], node.children[(idx_26 + 3)], currClass)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_6 = _a.sent();
                        ctx.addError(node, "Error parsing function " + ((e_6.toString())));
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.Constructor = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fnBody, udesc, desc, m, subCtx, i, v, i_1, n, p, defNode, nNode;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.shouldHaveChildCnt(3, node, ctx, "Method expexts four arguments");
                        fnBody = node.children[2];
                        udesc = ctx.getCurrentClass();
                        desc = udesc;
                        m = desc.constructor_fn;
                        subCtx = m.fnCtx;
                        subCtx.is_function = true;
                        subCtx.currentMethod = m;
                        subCtx.setInMethod();
                        for (i = 0; i < m.params.length; i++) {
                            v = m.params[i];
                            subCtx.defineVariable(v.name, v);
                        }
                        ;
                        return [4 /*yield*/, this.WalkNodeChildren(fnBody, subCtx, wr)];
                    case 1:
                        _a.sent();
                        subCtx.unsetInMethod();
                        if (fnBody.didReturnAtIndex >= 0) {
                            ctx.addError(node, "constructor should not return any values!");
                        }
                        for (i_1 = 0; i_1 < subCtx.localVarNames.length; i_1++) {
                            n = subCtx.localVarNames[i_1];
                            p = subCtx.localVariables[n];
                            if (p.set_cnt > 0) {
                                if (p.is_immutable) {
                                    ctx.addError(node, "Immutable variable was assigned a value");
                                }
                                defNode = p.node;
                                defNode.setFlag("mutable");
                                nNode = p.nameNode;
                                nNode.setFlag("mutable");
                            }
                        }
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.WriteScalarValue = function (node, ctx, wr) {
        TTypes.baseTypeAsEval(node, ctx, wr);
        node.evalTypeClass = TFactory.new_scalar_signature(node, ctx, wr);
    };
    ;
    RangerFlowParser.prototype.cmdNew = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var expr, obj, params, currC, b_template, expects_error, err_cnt, i, arg, currM, fnDescr, i_1, param, has_default, argNode, _a, pNode, cnt_now, cnt_now_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if ((node.children.length) < 2) {
                            ctx.addError(node, "the new operator expects at lest two arguments");
                            return [2 /*return*/];
                        }
                        if ((node.children.length) < 3) {
                            expr = new CodeNode(node.code, node.sp, node.ep);
                            expr.expression = true;
                            node.children.push(expr);
                        }
                        obj = node.getSecond();
                        params = node.getThird();
                        b_template = false;
                        expects_error = false;
                        err_cnt = ctx.getErrorCount();
                        if (node.hasBooleanProperty("error")) {
                            expects_error = true;
                        }
                        if (!obj.has_vref_annotation) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.CheckVRefTypeAnnotationOf(obj, ctx, wr)];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2: return [4 /*yield*/, this.WalkNode(obj, ctx, wr)];
                    case 3:
                        _b.sent();
                        i = 0;
                        _b.label = 4;
                    case 4:
                        if (!(i < params.children.length)) return [3 /*break*/, 7];
                        arg = params.children[i];
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(arg, ctx, wr)];
                    case 5:
                        _b.sent();
                        ctx.unsetInExpr();
                        _b.label = 6;
                    case 6:
                        i++;
                        return [3 /*break*/, 4];
                    case 7:
                        ;
                        node.eval_type = 10;
                        node.eval_type_name = obj.vref;
                        if (b_template == false) {
                            currC = ctx.findClass(obj.vref);
                            currM = ctx.getCurrentMethod();
                            currM.addClassUsage(currC, ctx);
                        }
                        node.hasNewOper = true;
                        node.clDesc = currC;
                        fnDescr = currC.constructor_fn;
                        if (!(typeof (fnDescr) !== "undefined" && fnDescr != null)) return [3 /*break*/, 12];
                        if ((fnDescr.params.length) > (params.children.length)) {
                            ctx.addError(node, "Not enough arguments for class constructor " + fnDescr.node.getLineAsString());
                            return [2 /*return*/];
                        }
                        i_1 = 0;
                        _b.label = 8;
                    case 8:
                        if (!(i_1 < fnDescr.params.length)) return [3 /*break*/, 11];
                        param = fnDescr.params[i_1];
                        has_default = false;
                        if (param.nameNode.hasFlag("default")) {
                            has_default = true;
                        }
                        if (param.nameNode.hasFlag("keyword")) {
                            return [3 /*break*/, 10];
                        }
                        if ((params.children.length) <= i_1) {
                            if (has_default) {
                                return [3 /*break*/, 10];
                            }
                            ctx.addError(node, "Missing arguments for function");
                            ctx.addError(param.nameNode, "To fix the previous error: Check original function declaration");
                        }
                        argNode = params.children[i_1];
                        _a = false;
                        return [4 /*yield*/, this.areEqualTypes((param.nameNode), argNode, ctx, wr)];
                    case 9:
                        if (_a == (_b.sent())) {
                            ctx.addError(argNode, ("ERROR, invalid argument type for " + currC.name) + " constructor ");
                        }
                        pNode = param.nameNode;
                        if (pNode.hasFlag("optional")) {
                            if (false == argNode.hasFlag("optional")) {
                                ctx.addError(node, "new parameter optionality does not match, expected optional parameter" + argNode.getCode());
                            }
                        }
                        if (argNode.hasFlag("optional")) {
                            if (false == pNode.hasFlag("optional")) {
                                ctx.addError(node, "new parameter optionality does not match, expected non-optional, optional given" + argNode.getCode());
                            }
                        }
                        _b.label = 10;
                    case 10:
                        i_1++;
                        return [3 /*break*/, 8];
                    case 11:
                        ;
                        _b.label = 12;
                    case 12:
                        if (expects_error) {
                            cnt_now = ctx.getErrorCount();
                            if (cnt_now == err_cnt) {
                                ctx.addParserError(node, (("LANGUAGE_PARSER_ERROR: expected generated error, err counts : " + err_cnt) + " : ") + cnt_now);
                            }
                        }
                        else {
                            cnt_now_1 = ctx.getErrorCount();
                            if (cnt_now_1 > err_cnt) {
                                ctx.addParserError(node, (("LANGUAGE_PARSER_ERROR: did not expect generated error, err counts : " + err_cnt) + " : ") + cnt_now_1);
                            }
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.transformParams = function (list, fnArgs, ctx) {
        var res = [];
        for (var i = 0; i < list.length; i++) {
            var item = list[i];
            if (item.is_block_node) {
                /** unused:  const newNode : CodeNode  = new CodeNode(item.code, item.sp, item.ep)   **/
                var fnArg = fnArgs[i];
                var nn = fnArg.nameNode;
                if (typeof (nn.expression_value) === "undefined") {
                    ctx.addError(item, "Parameter is not lambda expression");
                    break;
                }
                var fnDef = nn.expression_value;
                var match = new RangerArgMatch();
                var copyOf = fnDef.rebuildWithType(match, false);
                var fc = copyOf.children[0];
                fc.vref = "fun";
                var itemCopy = item.rebuildWithType(match, false);
                copyOf.children.push(itemCopy);
                var cnt = item.children.length;
                while (cnt > 0) {
                    item.children.pop();
                    cnt = cnt - 1;
                }
                ;
                for (var i_1 = 0; i_1 < copyOf.children.length; i_1++) {
                    var ch = copyOf.children[i_1];
                    item.children.push(ch);
                }
                ;
            }
            res.push(item);
        }
        ;
        return res;
    };
    ;
    RangerFlowParser.prototype.transformParams2 = function (list, fnArgs, ctx) {
        var res = [];
        for (var i = 0; i < list.length; i++) {
            var item = list[i];
            if (item.is_block_node) {
                console.log("Transforming --> " + item.getCode());
                /** unused:  const newNode : CodeNode  = new CodeNode(item.code, item.sp, item.ep)   **/
                var nn = fnArgs[i];
                if (typeof (nn.expression_value) === "undefined") {
                    ctx.addError(item, "Parameter is not lambda expression");
                    break;
                }
                var fnDef = nn.expression_value;
                var match = new RangerArgMatch();
                var copyOf = fnDef.rebuildWithType(match, false);
                var fc = copyOf.children[0];
                fc.vref = "fun";
                var itemCopy = item.rebuildWithType(match, false);
                copyOf.children.push(itemCopy);
                var cnt = item.children.length;
                while (cnt > 0) {
                    item.children.pop();
                    cnt = cnt - 1;
                }
                ;
                for (var i_1 = 0; i_1 < copyOf.children.length; i_1++) {
                    var ch = copyOf.children[i_1];
                    item.children.push(ch);
                }
                ;
            }
            res.push(item);
        }
        ;
        return res;
    };
    ;
    RangerFlowParser.prototype.CreateCTTI = function (node, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var root, wr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        root = ctx.getRoot();
                        wr = new CodeWriter();
                        return [4 /*yield*/, operatorsOf_13.forEach_14(root.definedClasses, (function (item, index) {
                                if (item.isNormalClass()) {
                                    wr.raw(((("\n      operators {\n        class_name _:string ( " + item.name) + "@(keyword) ) {\n          templates {\n            * ( '\"") + item.name) + "\"' )\n          }\n        }\n      }    \n          ", true);
                                }
                            }))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, root.pushAndCollectCode(wr.getCode(), orig_wr)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.CreateRTTI = function (node, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var root, wr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        root = ctx.getRoot();
                        wr = new CodeWriter();
                        wr.out("operator type:void all {", true);
                        wr.indent(1);
                        wr.out("fn rtti_get_classes:[string] () {", true);
                        wr.indent(1);
                        wr.out("return ([] ", false);
                        return [4 /*yield*/, operatorsOf_13.forEach_14(root.definedClasses, (function (item, index) {
                                if (item.isNormalClass()) {
                                    wr.out(("'" + item.name) + "' ", false);
                                }
                            }))];
                    case 1:
                        _a.sent();
                        wr.out(")", true);
                        wr.indent(-1);
                        wr.out("}", true);
                        wr.out("fn rtti_get_fields:[RTTIClassField] (className:string) {", true);
                        wr.indent(1);
                        wr.out("def fields:[RTTIClassField]", true);
                        return [4 /*yield*/, operatorsOf_13.forEach_14(root.definedClasses, (function (item, index) {
                                if (item.isNormalClass()) {
                                    wr.out(("if(className == '" + item.name) + "') {", true);
                                    wr.indent(1);
                                    operatorsOf.forEach_11(item.variables, (function (item, index) {
                                        wr.out("def f (new RTTIClassField)", true);
                                        wr.out(("f.name = `" + item.compiledName) + "`", true);
                                        wr.out(("f.type_name = `" + item.nameNode.type_name) + "`", true);
                                        wr.out("push fields f", true);
                                    }));
                                    wr.indent(-1);
                                    wr.out("}", true);
                                }
                            }))];
                    case 2:
                        _a.sent();
                        wr.out("return fields", true);
                        wr.indent(-1);
                        wr.out("}", true);
                        wr.indent(-1);
                        wr.out("}", true);
                        return [4 /*yield*/, root.pushAndCollectCode(wr.getCode(), orig_wr)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.SolveAsyncFuncs = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var root, notUsedFunctionCnt, add_dce_fn, use_dce, mainFn_1, dc_4, verbose_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        root = ctx.getRoot();
                        return [4 /*yield*/, operatorsOf_13.forEach_14(root.definedClasses, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, operatorsOf.forEach_29(item.static_methods, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                                var set_async, visited;
                                                var _this = this;
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0:
                                                            set_async = (function (f) {
                                                            });
                                                            visited = [];
                                                            set_async = (function (f) { return __awaiter(_this, void 0, void 0, function () {
                                                                return __generator(this, function (_a) {
                                                                    switch (_a.label) {
                                                                        case 0:
                                                                            if ((visited.indexOf(f)) >= 0) {
                                                                                return [2 /*return*/];
                                                                            }
                                                                            visited.push(f);
                                                                            if ((typeof (f.nameNode) !== "undefined" && f.nameNode != null)) {
                                                                                f.nameNode.setFlag("async");
                                                                            }
                                                                            return [4 /*yield*/, operatorsOf.forEach_29(f.isCalledBy, (function (item, index) {
                                                                                    set_async(item);
                                                                                }))];
                                                                        case 1:
                                                                            _a.sent();
                                                                            if (!(typeof (f.insideFn) !== "undefined" && f.insideFn != null)) return [3 /*break*/, 3];
                                                                            return [4 /*yield*/, set_async(f.insideFn)];
                                                                        case 2:
                                                                            _a.sent();
                                                                            _a.label = 3;
                                                                        case 3: return [2 /*return*/];
                                                                    }
                                                                });
                                                            }); });
                                                            if (!(typeof (item.nameNode) !== "undefined" && item.nameNode != null)) return [3 /*break*/, 4];
                                                            if (!item.nameNode.hasFlag("async")) return [3 /*break*/, 4];
                                                            return [4 /*yield*/, operatorsOf.forEach_29(item.isCalledBy, (function (item, index) {
                                                                    set_async(item);
                                                                }))];
                                                        case 1:
                                                            _a.sent();
                                                            return [4 /*yield*/, item.forOtherVersions(ctx, (function (item) {
                                                                    set_async(item);
                                                                }))];
                                                        case 2:
                                                            _a.sent();
                                                            if (!(typeof (item.insideFn) !== "undefined" && item.insideFn != null)) return [3 /*break*/, 4];
                                                            return [4 /*yield*/, set_async(item.insideFn)];
                                                        case 3:
                                                            _a.sent();
                                                            _a.label = 4;
                                                        case 4: return [4 /*yield*/, operatorsOf.forEach_29(item.myLambdas, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                                                return __generator(this, function (_a) {
                                                                    switch (_a.label) {
                                                                        case 0:
                                                                            if (!(typeof (item.nameNode) !== "undefined" && item.nameNode != null)) return [3 /*break*/, 3];
                                                                            if (!item.nameNode.hasFlag("async")) return [3 /*break*/, 3];
                                                                            return [4 /*yield*/, operatorsOf.forEach_29(item.isCalledBy, (function (item, index) {
                                                                                    set_async(item);
                                                                                }))];
                                                                        case 1:
                                                                            _a.sent();
                                                                            if (!(typeof (item.insideFn) !== "undefined" && item.insideFn != null)) return [3 /*break*/, 3];
                                                                            return [4 /*yield*/, set_async(item.insideFn)];
                                                                        case 2:
                                                                            _a.sent();
                                                                            _a.label = 3;
                                                                        case 3: return [2 /*return*/];
                                                                    }
                                                                });
                                                            }); }))];
                                                        case 5:
                                                            _a.sent();
                                                            return [2 /*return*/];
                                                    }
                                                });
                                            }); }))];
                                        case 1:
                                            _a.sent();
                                            return [4 /*yield*/, operatorsOf_13.forEach_30(item.method_variants, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                                    var _this = this;
                                                    return __generator(this, function (_a) {
                                                        switch (_a.label) {
                                                            case 0: return [4 /*yield*/, operatorsOf.forEach_29(item.variants, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                                                    var set_async_1, visited_1;
                                                                    var _this = this;
                                                                    return __generator(this, function (_a) {
                                                                        switch (_a.label) {
                                                                            case 0:
                                                                                set_async_1 = (function (f) {
                                                                                });
                                                                                visited_1 = [];
                                                                                set_async_1 = (function (f) { return __awaiter(_this, void 0, void 0, function () {
                                                                                    return __generator(this, function (_a) {
                                                                                        switch (_a.label) {
                                                                                            case 0:
                                                                                                if ((visited_1.indexOf(f)) >= 0) {
                                                                                                    return [2 /*return*/];
                                                                                                }
                                                                                                visited_1.push(f);
                                                                                                if ((typeof (f.nameNode) !== "undefined" && f.nameNode != null)) {
                                                                                                    f.nameNode.setFlag("async");
                                                                                                }
                                                                                                return [4 /*yield*/, f.forOtherVersions(ctx, (function (item) {
                                                                                                        set_async_1(item);
                                                                                                    }))];
                                                                                            case 1:
                                                                                                _a.sent();
                                                                                                return [4 /*yield*/, operatorsOf.forEach_29(f.isCalledBy, (function (item, index) {
                                                                                                        set_async_1(item);
                                                                                                    }))];
                                                                                            case 2:
                                                                                                _a.sent();
                                                                                                if (!(typeof (f.insideFn) !== "undefined" && f.insideFn != null)) return [3 /*break*/, 4];
                                                                                                return [4 /*yield*/, set_async_1(f.insideFn)];
                                                                                            case 3:
                                                                                                _a.sent();
                                                                                                _a.label = 4;
                                                                                            case 4: return [2 /*return*/];
                                                                                        }
                                                                                    });
                                                                                }); });
                                                                                if (!(typeof (item.nameNode) !== "undefined" && item.nameNode != null)) return [3 /*break*/, 4];
                                                                                if (!item.nameNode.hasFlag("async")) return [3 /*break*/, 4];
                                                                                return [4 /*yield*/, operatorsOf.forEach_29(item.isCalledBy, (function (item, index) {
                                                                                        set_async_1(item);
                                                                                    }))];
                                                                            case 1:
                                                                                _a.sent();
                                                                                return [4 /*yield*/, item.forOtherVersions(ctx, (function (item) {
                                                                                        set_async_1(item);
                                                                                    }))];
                                                                            case 2:
                                                                                _a.sent();
                                                                                if (!(typeof (item.insideFn) !== "undefined" && item.insideFn != null)) return [3 /*break*/, 4];
                                                                                return [4 /*yield*/, set_async_1(item.insideFn)];
                                                                            case 3:
                                                                                _a.sent();
                                                                                _a.label = 4;
                                                                            case 4: return [4 /*yield*/, operatorsOf.forEach_29(item.myLambdas, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                                                                    return __generator(this, function (_a) {
                                                                                        switch (_a.label) {
                                                                                            case 0:
                                                                                                if (!(typeof (item.nameNode) !== "undefined" && item.nameNode != null)) return [3 /*break*/, 3];
                                                                                                if (!item.nameNode.hasFlag("async")) return [3 /*break*/, 3];
                                                                                                return [4 /*yield*/, operatorsOf.forEach_29(item.isCalledBy, (function (item, index) {
                                                                                                        set_async_1(item);
                                                                                                    }))];
                                                                                            case 1:
                                                                                                _a.sent();
                                                                                                if (!(typeof (item.insideFn) !== "undefined" && item.insideFn != null)) return [3 /*break*/, 3];
                                                                                                return [4 /*yield*/, set_async_1(item.insideFn)];
                                                                                            case 2:
                                                                                                _a.sent();
                                                                                                _a.label = 3;
                                                                                            case 3: return [2 /*return*/];
                                                                                        }
                                                                                    });
                                                                                }); }))];
                                                                            case 5:
                                                                                _a.sent();
                                                                                return [2 /*return*/];
                                                                        }
                                                                    });
                                                                }); }))];
                                                            case 1:
                                                                _a.sent();
                                                                return [2 /*return*/];
                                                        }
                                                    });
                                                }); }))];
                                        case 2:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        notUsedFunctionCnt = 0;
                        return [4 /*yield*/, operatorsOf_13.forEach_14(root.definedClasses, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, operatorsOf_13.forEach_30(item.method_variants, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0: return [4 /*yield*/, operatorsOf.forEach_29(item.variants, (function (item, index) {
                                                                if ((item.isCalledBy.length) == 0) {
                                                                    if ((typeof (item.container_class) !== "undefined" && item.container_class != null)) {
                                                                        var cc = item.container_class;
                                                                        if (((cc.extends_classes.length) > 0) || cc.is_inherited) {
                                                                            var eC = cc.extends_classes[0];
                                                                            ctx.findClass(eC);
                                                                        }
                                                                        else {
                                                                            notUsedFunctionCnt = notUsedFunctionCnt + 1;
                                                                            item.is_unsed = true;
                                                                        }
                                                                    }
                                                                }
                                                            }))];
                                                        case 1:
                                                            _a.sent();
                                                            return [2 /*return*/];
                                                    }
                                                });
                                            }); }))];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 2:
                        _a.sent();
                        add_dce_fn = (function (theFn) { return __awaiter(_this, void 0, void 0, function () {
                            var set_called;
                            var _this = this;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        set_called = (function (f) {
                                        });
                                        set_called = (function (f) { return __awaiter(_this, void 0, void 0, function () {
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0:
                                                        if (f.is_called_from_main) {
                                                            return [2 /*return*/];
                                                        }
                                                        f.is_called_from_main = true;
                                                        operatorsOf.forEach_31(f.isUsingClasses, (function (item, index) {
                                                            item.is_used_by_main = true;
                                                            if ((typeof (item.constructor_fn) !== "undefined" && item.constructor_fn != null)) {
                                                                set_called(item.constructor_fn);
                                                            }
                                                        }));
                                                        return [4 /*yield*/, f.forOtherVersions(ctx, (function (item) {
                                                                set_called(item);
                                                            }))];
                                                    case 1:
                                                        _a.sent();
                                                        return [4 /*yield*/, operatorsOf.forEach_29(f.isCalling, (function (item, index) {
                                                                set_called(item);
                                                            }))];
                                                    case 2:
                                                        _a.sent();
                                                        return [4 /*yield*/, operatorsOf.forEach_29(f.myLambdas, (function (item, index) {
                                                                set_called(item);
                                                            }))];
                                                    case 3:
                                                        _a.sent();
                                                        if (!(typeof (f.container_class) !== "undefined" && f.container_class != null)) return [3 /*break*/, 5];
                                                        if (!(typeof (f.container_class.constructor_fn) !== "undefined" && f.container_class.constructor_fn != null)) return [3 /*break*/, 5];
                                                        return [4 /*yield*/, set_called(f.container_class.constructor_fn)];
                                                    case 4:
                                                        _a.sent();
                                                        _a.label = 5;
                                                    case 5: return [2 /*return*/];
                                                }
                                            });
                                        }); });
                                        return [4 /*yield*/, set_called(theFn)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        use_dce = false;
                        if (!ctx.hasCompilerFlag("dead4main")) return [3 /*break*/, 5];
                        return [4 /*yield*/, operatorsOf_13.forEach_14(root.definedClasses, (function (item, index) {
                                var cl = item;
                                for (var i = 0; i < cl.static_methods.length; i++) {
                                    var variant = cl.static_methods[i];
                                    ctx.disableCurrentClass();
                                    if (variant.nameNode.hasFlag("main") && (variant.nameNode.code.filename == ctx.getRootFile())) {
                                        mainFn_1 = variant;
                                        mainFn_1.addClassUsage(cl, ctx);
                                    }
                                }
                                ;
                            }))];
                    case 3:
                        _a.sent();
                        if (!(typeof (mainFn_1) !== "undefined" && mainFn_1 != null)) return [3 /*break*/, 5];
                        return [4 /*yield*/, add_dce_fn(mainFn_1)];
                    case 4:
                        _a.sent();
                        use_dce = true;
                        _a.label = 5;
                    case 5:
                        if (!ctx.hasCompilerSetting("dceclass")) return [3 /*break*/, 7];
                        dc_4 = ctx.getCompilerSetting("dceclass");
                        console.log("DCE : " + dc_4);
                        return [4 /*yield*/, operatorsOf_13.forEach_14(root.definedClasses, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                var cl_1, i_1, variant_1;
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            cl_1 = item;
                                            if (!(cl_1.name == dc_4)) return [3 /*break*/, 6];
                                            use_dce = true;
                                            cl_1.is_used_by_main = true;
                                            i_1 = 0;
                                            _a.label = 1;
                                        case 1:
                                            if (!(i_1 < cl_1.static_methods.length)) return [3 /*break*/, 4];
                                            variant_1 = cl_1.static_methods[i_1];
                                            return [4 /*yield*/, add_dce_fn(variant_1)];
                                        case 2:
                                            _a.sent();
                                            _a.label = 3;
                                        case 3:
                                            i_1++;
                                            return [3 /*break*/, 1];
                                        case 4:
                                            ;
                                            return [4 /*yield*/, operatorsOf_13.forEach_30(item.method_variants, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                                    return __generator(this, function (_a) {
                                                        switch (_a.label) {
                                                            case 0: return [4 /*yield*/, operatorsOf.forEach_29(item.variants, (function (item, index) {
                                                                    add_dce_fn(item);
                                                                }))];
                                                            case 1:
                                                                _a.sent();
                                                                return [2 /*return*/];
                                                        }
                                                    });
                                                }); }))];
                                        case 5:
                                            _a.sent();
                                            _a.label = 6;
                                        case 6: return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7:
                        if (!use_dce) return [3 /*break*/, 9];
                        verbose_1 = ctx.hasCompilerFlag("verbose");
                        return [4 /*yield*/, operatorsOf_13.forEach_14(root.definedClasses, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if ((item.is_used_by_main == false) && verbose_1) {
                                                console.log("class not used by main : " + item.name);
                                            }
                                            item.static_methods = operatorsOf.filter_32(item.static_methods, (function (item, index) {
                                                var cc_1 = item.container_class;
                                                if (item.is_called_from_main == false) {
                                                    if (verbose_1) {
                                                        console.log((("removing as dead " + item.name) + " from ") + cc_1.name);
                                                    }
                                                }
                                                return item.is_called_from_main;
                                            }));
                                            return [4 /*yield*/, operatorsOf_13.forEach_30(item.method_variants, (function (item, index) {
                                                    item.variants = operatorsOf.filter_32(item.variants, (function (item, index) {
                                                        var cc_2 = item.container_class;
                                                        if (item.is_called_from_main == false) {
                                                            if (verbose_1) {
                                                                console.log((("removing as dead " + item.name) + " from ") + cc_2.name);
                                                            }
                                                        }
                                                        return item.is_called_from_main;
                                                    }));
                                                }))];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 8:
                        _a.sent();
                        _a.label = 9;
                    case 9:
                        if (!ctx.hasCompilerFlag("deadcode")) return [3 /*break*/, 11];
                        return [4 /*yield*/, operatorsOf_13.forEach_14(root.definedClasses, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, operatorsOf_13.forEach_30(item.method_variants, (function (item, index) {
                                                item.variants = operatorsOf.filter_32(item.variants, (function (item, index) {
                                                    return item.is_unsed == false;
                                                }));
                                            }))];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 10:
                        _a.sent();
                        _a.label = 11;
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.cmdCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var obj, method, callArgs, possible_cmd, altVersion, origCopy, i, ca, obj_2, method_2, callArgs_2, cl, m, currM, i_1, callArg, nn;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        obj = node.getSecond();
                        method = node.getThird();
                        callArgs = node.children[3];
                        possible_cmd = method.vref;
                        altVersion = node.newExpressionNode();
                        origCopy = node.copy();
                        altVersion.add(node.newVRefNode(possible_cmd));
                        altVersion.add(obj.copy());
                        for (i = 0; i < callArgs.children.length; i++) {
                            ca = callArgs.children[i];
                            altVersion.add(ca.copy());
                        }
                        ;
                        altVersion.parent = node;
                        node.getChildrenFrom(altVersion);
                        return [4 /*yield*/, this.stdParamMatch(node, ctx, wr, false)];
                    case 1:
                        if (_a.sent()) {
                            return [2 /*return*/, true];
                        }
                        else {
                            node.getChildrenFrom(origCopy);
                        }
                        obj_2 = node.getSecond();
                        method_2 = node.getThird();
                        callArgs_2 = node.children[3];
                        return [4 /*yield*/, this.WalkNode(obj_2, ctx, wr)];
                    case 2:
                        _a.sent();
                        if (!ctx.isDefinedClass(obj_2.eval_type_name)) return [3 /*break*/, 9];
                        cl = ctx.findClass(obj_2.eval_type_name);
                        m = cl.findMethod(method_2.vref);
                        if (!(typeof (m) !== "undefined" && m != null)) return [3 /*break*/, 7];
                        node.has_call = true;
                        currM = ctx.getCurrentMethod();
                        currM.addCallTo(m);
                        ctx.setInExpr();
                        i_1 = 0;
                        _a.label = 3;
                    case 3:
                        if (!(i_1 < callArgs_2.children.length)) return [3 /*break*/, 6];
                        callArg = callArgs_2.children[i_1];
                        return [4 /*yield*/, this.WalkNode(callArg, ctx, wr)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        i_1++;
                        return [3 /*break*/, 3];
                    case 6:
                        ;
                        ctx.unsetInExpr();
                        nn = m.nameNode;
                        node.eval_type = nn.typeNameAsType(ctx);
                        node.eval_type_name = nn.type_name;
                        node.eval_array_type = nn.array_type;
                        node.eval_key_type = nn.key_type;
                        if (m.nameNode.hasFlag("throws")) {
                            if (false == ctx.isTryBlock()) {
                                ctx.addError(obj_2, ("The method " + m.name) + " potentially throws an exception, try { } block is required");
                            }
                        }
                        if (nn.value_type == 17) {
                            node.expression_value = nn.expression_value.copy();
                        }
                        if (nn.hasFlag("optional")) {
                            node.setFlag("optional");
                        }
                        return [2 /*return*/, true];
                    case 7:
                        ctx.addError(node, (("Class " + obj_2.eval_type_name) + " does not have method ") + method_2.vref);
                        return [2 /*return*/, false];
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        ctx.addError(node, "can not call non-class type");
                        _a.label = 10;
                    case 10: return [2 /*return*/, true];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.matchLambdaArgs = function (n1, n2, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var chLen1, chLen2, rv1, args1, rv2, args2, rvExpr1, rvExpr2, argsExpr1, argsExpr2, all_matched;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        chLen1 = n1.children.length;
                        chLen2 = n2.children.length;
                        if (chLen1 < 2) {
                            ctx.addError(n1, "Invalid Lambda definition, missing args or return value");
                            ctx.addError(n2, "^ Invalid Lambda definition, missing args or return value");
                            return [2 /*return*/, false];
                        }
                        if (chLen2 < 2) {
                            ctx.addError(n1, "Invalid Lambda definition, missing args or return value");
                            ctx.addError(n2, "^ Invalid Lambda definition, missing args or return value");
                            return [2 /*return*/, false];
                        }
                        rv1 = n1.getFirst();
                        args1 = n1.getSecond();
                        rv2 = n2.getFirst();
                        args2 = n2.getSecond();
                        rvExpr1 = n1.newExpressionNode();
                        (rvExpr1).push(rv1.copy());
                        rvExpr2 = n2.newExpressionNode();
                        (rvExpr2).push(rv2.copy());
                        argsExpr1 = args1.copy();
                        argsExpr2 = args2.copy();
                        all_matched = true;
                        if (ctx.hasCompilerFlag("notreallyexistingflag")) {
                            all_matched = false;
                        }
                        if ((argsExpr1.children.length) != (argsExpr2.children.length)) {
                            ctx.addError(n2, "Invalid parameter count for the lambda expression");
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, operatorsOf.forEach_15(argsExpr1.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                var item2, _a;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            item2 = argsExpr2.children[index];
                                            if (item2.value_type != item.value_type) {
                                                all_matched = false;
                                            }
                                            if (item2.type_name != item.type_name) {
                                                all_matched = false;
                                            }
                                            if (item2.array_type != item.array_type) {
                                                all_matched = false;
                                            }
                                            if (item2.key_type != item.key_type) {
                                                all_matched = false;
                                            }
                                            if (!(all_matched && (item.value_type == 17))) return [3 /*break*/, 2];
                                            _a = false;
                                            return [4 /*yield*/, this.matchLambdaArgs((item.expression_value), (item2.expression_value), ctx, wr)];
                                        case 1:
                                            if (_a == (_b.sent())) {
                                                all_matched = false;
                                            }
                                            _b.label = 2;
                                        case 2: return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        if (all_matched == false) {
                            ctx.addError(n2, "Invalid lambda argument types");
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, operatorsOf.forEach_15(rvExpr1.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                var item2_1, _a;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            item2_1 = rvExpr2.children[index];
                                            if (item2_1.value_type != item.value_type) {
                                                all_matched = false;
                                            }
                                            if (item2_1.type_name != item.type_name) {
                                                all_matched = false;
                                            }
                                            if (item2_1.array_type != item.array_type) {
                                                all_matched = false;
                                            }
                                            if (item2_1.key_type != item.key_type) {
                                                all_matched = false;
                                            }
                                            if (!(all_matched && (item.value_type == 17))) return [3 /*break*/, 2];
                                            _a = false;
                                            return [4 /*yield*/, this.matchLambdaArgs((item.expression_value), (item2_1.expression_value), ctx, wr)];
                                        case 1:
                                            if (_a == (_b.sent())) {
                                                all_matched = false;
                                            }
                                            _b.label = 2;
                                        case 2: return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 2:
                        _a.sent();
                        if (ctx.hasCompilerFlag("notreallyexistingflag")) {
                            all_matched = false;
                        }
                        if (all_matched == false) {
                            ctx.addError(n2, "Invalid lambda return value type");
                            return [2 /*return*/, false];
                        }
                        return [2 /*return*/, true];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.testLambdaCallArgs = function (lambda_expression, callParams, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var lambdaArgs, all_matched;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        lambdaArgs = lambda_expression.children[1];
                        all_matched = true;
                        if ((callParams.children.length) != (lambdaArgs.children.length)) {
                            ctx.addError(callParams, "Invalid parameter count for the lambda expression ");
                            ctx.addError(callParams, " ^ expected : " + lambdaArgs.getCode());
                            all_matched = false;
                        }
                        return [4 /*yield*/, operatorsOf.forEach_15(lambdaArgs.children, (function (item, index) {
                                var item2 = callParams.children[index];
                                if (item2.eval_type_name != item.type_name) {
                                    if (item.type_name != "Any") {
                                        ctx.addError(item2, "Argument of wrong type given for the lambda parameter " + index);
                                        all_matched = false;
                                    }
                                }
                                if (item2.eval_array_type != item.array_type) {
                                    ctx.addError(item2, "Argument of wrong type given for the lambda parameter " + index);
                                    all_matched = false;
                                }
                                if (item2.eval_key_type != item.key_type) {
                                    ctx.addError(item2, "Argument of wrong type given for the lambda parameter " + index);
                                    all_matched = false;
                                }
                            }))];
                    case 1:
                        _a.sent();
                        if (all_matched == false) {
                            ctx.addError(callParams, "Invalid types for lambda call");
                        }
                        return [2 /*return*/, all_matched];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.cmdLocalCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fnNode, udesc, desc, expects_error, err_cnt, chlen, i, innerNode, newNode, sc, chain_cnt, b_valid, fc, args, name_3, method_name, newNode_1, rootName, vDef2, vFnDef_1, currM, subCtx, p, callParams_2, keyword_cnt_1, nodeList, _loop_1, this_1, arg, i_1, cp_len, lastCallParam, i_2, param, argNode, _a, pNode, nn, cnt_now, cnt_now_1, fnDescr, currM_2, subCtx_1, p_1, i_3, arg_1, i_4, param_1, argNode_1, _b, nn_1, cnt_now_2, cnt_now_3, d, cnNode1, callParams_1, i_5, arg_2, lambdaDef, cnt_now_4, cnt_now_5;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        fnNode = node.getFirst();
                        udesc = ctx.getCurrentClass();
                        desc = udesc;
                        expects_error = false;
                        err_cnt = ctx.getErrorCount();
                        if (node.hasBooleanProperty("error")) {
                            expects_error = true;
                        }
                        chlen = node.children.length;
                        if (!(chlen > 2)) return [3 /*break*/, 2];
                        i = 2;
                        innerNode = void 0;
                        newNode = node.newExpressionNode();
                        sc = node.getSecond();
                        newNode.add(fnNode.copy());
                        newNode.add(sc.copy());
                        innerNode = newNode;
                        chain_cnt = 0;
                        b_valid = true;
                        while (i < (chlen - 1)) {
                            fc = node.children[i];
                            args = node.children[(i + 1)];
                            name_3 = fc.vref;
                            if (((name_3.length) > 0) && ((name_3.charCodeAt(0)) == (".".charCodeAt(0)))) {
                                method_name = name_3.substring(1, (name_3.length));
                                newNode_1 = node.newExpressionNode();
                                newNode_1.add(node.newVRefNode("call"));
                                newNode_1.add(innerNode.copy());
                                newNode_1.add(node.newVRefNode(method_name));
                                newNode_1.add(args.copy());
                                innerNode = newNode_1;
                                chain_cnt = chain_cnt + 1;
                            }
                            else {
                                b_valid = false;
                            }
                            i = i + 2;
                        }
                        ;
                        if (!(b_valid && (chain_cnt > 0))) return [3 /*break*/, 2];
                        node.getChildrenFrom(innerNode);
                        node.tag = "chainroot";
                        node.flow_done = false;
                        return [4 /*yield*/, this.WalkNode(node, ctx, wr)];
                    case 1:
                        _c.sent();
                        return [2 /*return*/, true];
                    case 2:
                        if (!((fnNode.ns.length) > 1)) return [3 /*break*/, 13];
                        rootName = fnNode.ns[0];
                        vDef2 = ctx.getVariableDef(rootName);
                        if (((rootName != "this") && (vDef2.init_cnt == 0)) && (vDef2.set_cnt == 0)) {
                            if ((vDef2.is_class_variable == false) && (ctx.isDefinedClass(rootName) == false)) {
                                ctx.addError(node, "Call to uninitialized object " + rootName);
                            }
                        }
                        vFnDef_1 = this.findFunctionDesc(fnNode, ctx, wr);
                        if (!(typeof (vFnDef_1) !== "undefined" && vFnDef_1 != null)) return [3 /*break*/, 12];
                        if (vFnDef_1.nameNode.hasFlag("throws")) {
                            if (false == ctx.isTryBlock()) {
                                ctx.addError(node, ("The method " + vFnDef_1.name) + " potentially throws an exception, try { } block is required");
                            }
                        }
                        currM = ctx.getCurrentMethod();
                        currM.addCallTo(vFnDef_1);
                        vFnDef_1.ref_cnt = vFnDef_1.ref_cnt + 1;
                        subCtx = ctx.fork();
                        node.hasFnCall = true;
                        node.fnDesc = vFnDef_1;
                        p = new RangerAppParamDesc();
                        p.name = fnNode.vref;
                        p.value_type = fnNode.value_type;
                        p.node = fnNode;
                        p.nameNode = fnNode;
                        p.varType = 10;
                        subCtx.defineVariable(p.name, p);
                        return [4 /*yield*/, this.WalkNode(fnNode, subCtx, wr)];
                    case 3:
                        _c.sent();
                        callParams_2 = node.children[1];
                        keyword_cnt_1 = 0;
                        operatorsOf.forEach_11(vFnDef_1.params, (function (item, index) {
                            if (item.nameNode.hasFlag("keyword")) {
                                keyword_cnt_1 = keyword_cnt_1 + 1;
                                (callParams_2.children[index]).setFlag("keyword");
                            }
                        }));
                        nodeList = this.transformParams(callParams_2.children, vFnDef_1.params, subCtx);
                        if (ctx.hasCompilerFlag("dbg")) {
                            console.log("Local: " + vFnDef_1.name);
                        }
                        _loop_1 = function (i_1) {
                            var was_lambda, currM_1_1, fnArg, callArgP;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        arg = nodeList[i_1];
                                        ctx.setInExpr();
                                        was_lambda = false;
                                        if (!arg.isFirstVref("fun")) return [3 /*break*/, 2];
                                        arg.flow_done = false;
                                        return [4 /*yield*/, arg.forTree((function (item, i) {
                                                item.flow_done = false;
                                            }))];
                                    case 1:
                                        _a.sent();
                                        was_lambda = true;
                                        _a.label = 2;
                                    case 2: return [4 /*yield*/, this_1.WalkNode(arg, subCtx, wr)];
                                    case 3:
                                        _a.sent();
                                        if (!was_lambda) return [3 /*break*/, 5];
                                        currM_1_1 = ctx.getCurrentMethod();
                                        if ((typeof (arg.lambdaFnDesc) !== "undefined" && arg.lambdaFnDesc != null)) {
                                            vFnDef_1.addCallTo(arg.lambdaFnDesc);
                                            currM_1_1.addCallTo(vFnDef_1);
                                            currM_1_1.myLambdas.push(arg.lambdaFnDesc);
                                            vFnDef_1.myLambdas.push(arg.lambdaFnDesc);
                                        }
                                        return [4 /*yield*/, arg.forTree((function (item, i) {
                                                if ((typeof (item.lambdaFnDesc) !== "undefined" && item.lambdaFnDesc != null)) {
                                                    item.lambdaFnDesc.insideFn = currM_1_1;
                                                }
                                                if ((typeof (item.fnDesc) !== "undefined" && item.fnDesc != null)) {
                                                    if ((typeof (arg.lambdaFnDesc) !== "undefined" && arg.lambdaFnDesc != null)) {
                                                        arg.lambdaFnDesc.addCallTo(item.fnDesc);
                                                    }
                                                    vFnDef_1.addCallTo(item.fnDesc);
                                                }
                                            }))];
                                    case 4:
                                        _a.sent();
                                        _a.label = 5;
                                    case 5:
                                        ctx.unsetInExpr();
                                        if ((vFnDef_1.params.length) > i_1) {
                                            fnArg = vFnDef_1.params[i_1];
                                            callArgP = arg.paramDesc;
                                            if ((typeof (callArgP) !== "undefined" && callArgP != null)) {
                                                callArgP.moveRefTo(node, fnArg, ctx);
                                            }
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        i_1 = 0;
                        _c.label = 4;
                    case 4:
                        if (!(i_1 < nodeList.length)) return [3 /*break*/, 7];
                        return [5 /*yield**/, _loop_1(i_1)];
                    case 5:
                        _c.sent();
                        _c.label = 6;
                    case 6:
                        i_1++;
                        return [3 /*break*/, 4];
                    case 7:
                        ;
                        cp_len = (callParams_2.children.length) - keyword_cnt_1;
                        if (cp_len > (vFnDef_1.params.length)) {
                            lastCallParam = callParams_2.children[(cp_len - 1)];
                            ctx.addError(lastCallParam, "Too many arguments for function");
                            ctx.addError(vFnDef_1.nameNode, "NOTE: To fix the previous error: Check original function declaration which was");
                        }
                        i_2 = 0;
                        _c.label = 8;
                    case 8:
                        if (!(i_2 < vFnDef_1.params.length)) return [3 /*break*/, 11];
                        param = vFnDef_1.params[i_2];
                        if ((callParams_2.children.length) <= i_2) {
                            if (param.nameNode.hasFlag("default")) {
                                return [3 /*break*/, 10];
                            }
                            ctx.addError(node, "Missing arguments for function");
                            ctx.addError(param.nameNode, "NOTE: To fix the previous error: Check original function declaration which was");
                            return [3 /*break*/, 11];
                        }
                        if (param.nameNode.hasFlag("keyword")) {
                            return [3 /*break*/, 10];
                        }
                        argNode = callParams_2.children[i_2];
                        _a = false;
                        return [4 /*yield*/, this.areEqualTypes((param.nameNode), argNode, ctx, wr)];
                    case 9:
                        if (_a == (_c.sent())) {
                            ctx.addError(argNode, "ERROR, invalid argument type for method " + vFnDef_1.name);
                        }
                        pNode = param.nameNode;
                        if (pNode.hasFlag("optional")) {
                            if (false == argNode.hasFlag("optional")) {
                                ctx.addError(node, "function parameter optionality does not match, consider making parameter optional " + argNode.getCode());
                            }
                        }
                        if (argNode.hasFlag("optional")) {
                            if (false == pNode.hasFlag("optional")) {
                                ctx.addError(node, "function parameter optionality does not match, consider unwrapping " + argNode.getCode());
                            }
                        }
                        _c.label = 10;
                    case 10:
                        i_2++;
                        return [3 /*break*/, 8];
                    case 11:
                        ;
                        nn = vFnDef_1.nameNode;
                        node.eval_type = nn.typeNameAsType(ctx);
                        node.eval_type_name = nn.type_name;
                        node.eval_array_type = nn.array_type;
                        node.eval_key_type = nn.key_type;
                        if (node.eval_type == 17) {
                            node.expression_value = nn.expression_value.copy();
                        }
                        if (nn.hasFlag("optional")) {
                            node.setFlag("optional");
                        }
                        if (expects_error) {
                            cnt_now = ctx.getErrorCount();
                            if (cnt_now == err_cnt) {
                                ctx.addParserError(node, (("LANGUAGE_PARSER_ERROR: expected generated error, err counts : " + err_cnt) + " : ") + cnt_now);
                            }
                        }
                        else {
                            cnt_now_1 = ctx.getErrorCount();
                            if (cnt_now_1 > err_cnt) {
                                ctx.addParserError(node, (("LANGUAGE_PARSER_ERROR: did not expect generated error, err counts : " + err_cnt) + " : ") + cnt_now_1);
                            }
                        }
                        return [2 /*return*/, true];
                    case 12:
                        ctx.addError(node, "Called Object or Property was not defined");
                        _c.label = 13;
                    case 13:
                        if (!desc.hasMethod(fnNode.vref)) return [3 /*break*/, 23];
                        fnDescr = desc.findMethod(fnNode.vref);
                        if (fnDescr.nameNode.hasFlag("throws")) {
                            if (false == ctx.isTryBlock()) {
                                ctx.addError(node, ("The method " + fnDescr.name) + " potentially throws an exception, try { } block is required");
                            }
                        }
                        currM_2 = ctx.getCurrentMethod();
                        currM_2.addCallTo(fnDescr);
                        if (ctx.hasCompilerFlag("dbg")) {
                            console.log("Local 2 : " + fnDescr.name);
                        }
                        subCtx_1 = ctx.fork();
                        node.hasFnCall = true;
                        node.fnDesc = fnDescr;
                        p_1 = new RangerAppParamDesc();
                        p_1.name = fnNode.vref;
                        p_1.value_type = fnNode.value_type;
                        p_1.node = fnNode;
                        p_1.nameNode = fnNode;
                        p_1.varType = 10;
                        subCtx_1.defineVariable(p_1.name, p_1);
                        return [4 /*yield*/, this.WalkNode(fnNode, subCtx_1, wr)];
                    case 14:
                        _c.sent();
                        i_3 = 0;
                        _c.label = 15;
                    case 15:
                        if (!(i_3 < node.children.length)) return [3 /*break*/, 18];
                        arg_1 = node.children[i_3];
                        if (i_3 < 1) {
                            return [3 /*break*/, 17];
                        }
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(arg_1, subCtx_1, wr)];
                    case 16:
                        _c.sent();
                        ctx.unsetInExpr();
                        _c.label = 17;
                    case 17:
                        i_3++;
                        return [3 /*break*/, 15];
                    case 18:
                        ;
                        i_4 = 0;
                        _c.label = 19;
                    case 19:
                        if (!(i_4 < fnDescr.params.length)) return [3 /*break*/, 22];
                        param_1 = fnDescr.params[i_4];
                        if ((node.children.length) <= (i_4 + 1)) {
                            ctx.addError(node, "Argument was not defined");
                            return [3 /*break*/, 22];
                        }
                        argNode_1 = node.children[(i_4 + 1)];
                        _b = false;
                        return [4 /*yield*/, this.areEqualTypes((param_1.nameNode), argNode_1, ctx, wr)];
                    case 20:
                        if (_b == (_c.sent())) {
                            ctx.addError(argNode_1, (("ERROR, invalid argument type for " + desc.name) + " method ") + fnDescr.name);
                        }
                        _c.label = 21;
                    case 21:
                        i_4++;
                        return [3 /*break*/, 19];
                    case 22:
                        ;
                        nn_1 = fnDescr.nameNode;
                        nn_1.defineNodeTypeTo(node, ctx);
                        if (expects_error) {
                            cnt_now_2 = ctx.getErrorCount();
                            if (cnt_now_2 == err_cnt) {
                                ctx.addParserError(node, (("LANGUAGE_PARSER_ERROR: expected generated error, err counts : " + err_cnt) + " : ") + cnt_now_2);
                            }
                        }
                        else {
                            cnt_now_3 = ctx.getErrorCount();
                            if (cnt_now_3 > err_cnt) {
                                ctx.addParserError(node, (("LANGUAGE_PARSER_ERROR: did not expect generated error, err counts : " + err_cnt) + " : ") + cnt_now_3);
                            }
                        }
                        return [2 /*return*/, true];
                    case 23:
                        if (!ctx.isVarDefined(fnNode.vref)) return [3 /*break*/, 30];
                        d = ctx.getVariableDef(fnNode.vref);
                        d.ref_cnt = 1 + d.ref_cnt;
                        if (d.nameNode.hasFlag("optional")) {
                            ctx.addError(node, "Can not call optional lambda function, unwrap the function first!");
                        }
                        if (!(d.nameNode.value_type == 17)) return [3 /*break*/, 30];
                        cnNode1 = node.children[0];
                        return [4 /*yield*/, this.WalkNode(cnNode1, ctx, wr)];
                    case 24:
                        _c.sent();
                        callParams_1 = node.children[1];
                        i_5 = 0;
                        _c.label = 25;
                    case 25:
                        if (!(i_5 < callParams_1.children.length)) return [3 /*break*/, 28];
                        arg_2 = callParams_1.children[i_5];
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(arg_2, ctx, wr)];
                    case 26:
                        _c.sent();
                        ctx.unsetInExpr();
                        _c.label = 27;
                    case 27:
                        i_5++;
                        return [3 /*break*/, 25];
                    case 28:
                        ;
                        return [4 /*yield*/, this.testLambdaCallArgs(d.nameNode.expression_value, callParams_1, ctx, wr)];
                    case 29:
                        _c.sent();
                        lambdaDef = d.nameNode.expression_value.children[0];
                        node.has_lambda_call = true;
                        node.eval_type = lambdaDef.typeNameAsType(ctx);
                        node.eval_type_name = lambdaDef.type_name;
                        node.eval_array_type = lambdaDef.array_type;
                        node.eval_key_type = lambdaDef.key_type;
                        if (node.eval_type == 17) {
                            if ((typeof (lambdaDef.expression_value) !== "undefined" && lambdaDef.expression_value != null)) {
                                node.expression_value = lambdaDef.expression_value.copy();
                            }
                        }
                        return [2 /*return*/, true];
                    case 30: return [2 /*return*/, false];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.transformImmutableAssigment = function (node) {
        var target = node.getSecond();
        var assign_value = node.getThird();
        var root = node.newExpressionNode();
        root.add(node.newVRefNode("="));
        root.add(node.newVRefNode((target.ns[0])));
        var i = 1;
        var cnt = target.ns.length;
        /** unused:  const valueExpression : CodeNode  = node.newExpressionNode()   **/
        var obj_ref = target.ns[0];
        var currentParent = root;
        while (i < cnt) {
            var callExpr = node.newExpressionNode();
            callExpr.add(node.newVRefNode("call"));
            callExpr.add(node.newVRefNode(obj_ref));
            var next_ref = target.ns[i];
            var set_ref = "set_" + next_ref;
            callExpr.add(node.newVRefNode(set_ref));
            i = i + 1;
            if (i < cnt) {
                obj_ref = (obj_ref + ".") + next_ref;
                var paramsNode = node.newExpressionNode();
                paramsNode.add(callExpr);
                currentParent.add(paramsNode);
                currentParent = callExpr;
            }
            else {
                var callParams = node.newExpressionNode();
                callParams.add(assign_value.copy());
                callExpr.add(callParams);
                var paramsNode_1 = node.newExpressionNode();
                paramsNode_1.add(callExpr.copy());
                currentParent.add(paramsNode_1);
            }
        }
        ;
        return root;
    };
    ;
    RangerFlowParser.prototype.cmdAssign = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var target, nn, do_transform, propC, currC, n1, n2, immAss, n1_1, n2_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        target = node.getSecond();
                        return [4 /*yield*/, this.WalkNode(target, ctx, wr)];
                    case 1:
                        _a.sent();
                        if (!target.hasParamDesc) return [3 /*break*/, 6];
                        if (!(typeof (target.paramDesc.propertyClass) !== "undefined" && target.paramDesc.propertyClass != null)) return [3 /*break*/, 6];
                        nn = target.paramDesc.propertyClass.nameNode;
                        if (!nn.hasFlag("immutable")) return [3 /*break*/, 6];
                        do_transform = false;
                        propC = target.paramDesc.propertyClass;
                        currC = ctx.getCurrentClass();
                        if ((currC) == (propC)) {
                            if ((target.ns[0]) == "this") {
                                do_transform = true;
                            }
                        }
                        else {
                            do_transform = true;
                        }
                        if (!do_transform) return [3 /*break*/, 6];
                        n1 = node.getSecond();
                        n2 = node.getThird();
                        return [4 /*yield*/, this.WalkNode(n1, ctx, wr)];
                    case 2:
                        _a.sent();
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(n2, ctx, wr)];
                    case 3:
                        _a.sent();
                        ctx.unsetInExpr();
                        return [4 /*yield*/, this.convertToUnion(n1.eval_type_name, n2, ctx, wr)];
                    case 4:
                        _a.sent();
                        this.shouldBeEqualTypes(n1, n2, ctx, "Can not assign variable.");
                        immAss = this.transformImmutableAssigment(node);
                        node.getChildrenFrom(immAss);
                        return [4 /*yield*/, this.cmdAssign(node, ctx, wr)];
                    case 5:
                        _a.sent();
                        return [2 /*return*/];
                    case 6:
                        /** unused:  const chlen : number  = node.children.length   **/
                        wr.newline();
                        n1_1 = node.getSecond();
                        n2_1 = node.getThird();
                        return [4 /*yield*/, this.WalkNode(n1_1, ctx, wr)];
                    case 7:
                        _a.sent();
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(n2_1, ctx, wr)];
                    case 8:
                        _a.sent();
                        ctx.unsetInExpr();
                        if (n1_1.hasParamDesc) {
                            n1_1.paramDesc.ref_cnt = n1_1.paramDesc.ref_cnt + 1;
                            n1_1.paramDesc.set_cnt = n1_1.paramDesc.set_cnt + 1;
                        }
                        if (n2_1.hasParamDesc) {
                            n2_1.paramDesc.ref_cnt = n2_1.paramDesc.ref_cnt + 1;
                        }
                        if (n2_1.hasFlag("optional")) {
                            if (false == n1_1.hasFlag("optional")) {
                                ctx.addError(node, "Can not assign optional to non-optional type");
                            }
                        }
                        return [4 /*yield*/, this.stdParamMatch(node, ctx, wr, true)];
                    case 9:
                        _a.sent();
                        return [4 /*yield*/, this.convertToUnion(n1_1.eval_type_name, n2_1, ctx, wr)];
                    case 10:
                        _a.sent();
                        this.shouldBeEqualTypes(n1_1, n2_1, ctx, "Can not assign variable.");
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.EnterTemplateClass = function (node, ctx, wr) {
    };
    ;
    RangerFlowParser.prototype.EnterClass = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var body_index, cn, cBody, desc, subCtx, i, p, vNode, value, i_1, fNode, i_2, fNode_1, staticCtx, i_3, fNode_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body_index = node.chlen() - 1;
                        if ((node.children.length) != 3) {
                            if (node.chlen() == 5) {
                            }
                            else {
                                ctx.addError(node, "Invalid class declaration");
                                return [2 /*return*/];
                            }
                        }
                        if (node.hasBooleanProperty("trait")) {
                            return [2 /*return*/];
                        }
                        cn = node.children[1];
                        cBody = node.children[body_index];
                        desc = ctx.findClass(cn.vref);
                        subCtx = desc.ctx;
                        subCtx.setCurrentClass(desc);
                        subCtx.class_level_context = true;
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < desc.variables.length)) return [3 /*break*/, 5];
                        p = desc.variables[i];
                        vNode = p.node;
                        if (!((vNode.children.length) > 2)) return [3 /*break*/, 3];
                        value = vNode.children[2];
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(value, ctx, wr)];
                    case 2:
                        _a.sent();
                        ctx.unsetInExpr();
                        _a.label = 3;
                    case 3:
                        p.is_class_variable = true;
                        p.nameNode.eval_type = p.nameNode.typeNameAsType(ctx);
                        p.nameNode.eval_type_name = p.nameNode.type_name;
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 1];
                    case 5:
                        ;
                        i_1 = 0;
                        _a.label = 6;
                    case 6:
                        if (!(i_1 < cBody.children.length)) return [3 /*break*/, 9];
                        fNode = cBody.children[i_1];
                        if (!((fNode.isFirstVref("fn") || fNode.isFirstVref("constructor")) || fNode.isFirstVref("Constructor"))) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.WalkNode(fNode, subCtx, wr)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        i_1++;
                        return [3 /*break*/, 6];
                    case 9:
                        ;
                        i_2 = 0;
                        _a.label = 10;
                    case 10:
                        if (!(i_2 < cBody.children.length)) return [3 /*break*/, 13];
                        fNode_1 = cBody.children[i_2];
                        if (!(fNode_1.isFirstVref("fn") || fNode_1.isFirstVref("PublicMethod"))) return [3 /*break*/, 12];
                        return [4 /*yield*/, this.WalkNode(fNode_1, subCtx, wr)];
                    case 11:
                        _a.sent();
                        _a.label = 12;
                    case 12:
                        i_2++;
                        return [3 /*break*/, 10];
                    case 13:
                        ;
                        staticCtx = ctx.fork();
                        staticCtx.setCurrentClass(desc);
                        i_3 = 0;
                        _a.label = 14;
                    case 14:
                        if (!(i_3 < cBody.children.length)) return [3 /*break*/, 17];
                        fNode_2 = cBody.children[i_3];
                        if (!((fNode_2.isFirstVref("sfn") || fNode_2.isFirstVref("StaticMethod")) || fNode_2.isFirstVref("static"))) return [3 /*break*/, 16];
                        return [4 /*yield*/, this.WalkNode(fNode_2, staticCtx, wr)];
                    case 15:
                        _a.sent();
                        _a.label = 16;
                    case 16:
                        i_3++;
                        return [3 /*break*/, 14];
                    case 17:
                        ;
                        return [4 /*yield*/, operatorsOf.forEach_15(cBody.children, (function (item, index) {
                                try {
                                    if (item.isFirstVref("doc")) {
                                        var sc = item.getSecond();
                                        var fndesc = desc.findMethod(sc.vref);
                                        if (typeof (fndesc) != "undefined") {
                                            var third = item.getThird();
                                            fndesc.git_doc = third.string_value;
                                        }
                                    }
                                }
                                catch (e) {
                                }
                            }))];
                    case 18:
                        _a.sent();
                        node.hasClassDescription = true;
                        node.clDesc = desc;
                        desc.classNode = node;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.walkFunctionBody = function (m, fnBody, ctx, subCtx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var i, v, cl, cl_1, rvNode, i_1, n, p, defNode, nNode;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        /** unused:  const prev_fnc : boolean  = subCtx.function_level_context   **/
                        /** unused:  const prev_isfn : boolean  = subCtx.is_function   **/
                        subCtx.function_level_context = true;
                        subCtx.is_function = true;
                        subCtx.currentMethod = m;
                        for (i = 0; i < m.params.length; i++) {
                            v = m.params[i];
                            if (false == subCtx.isVarDefined(v.name)) {
                                subCtx.defineVariable(v.name, v);
                            }
                            v.nameNode.eval_type = v.nameNode.typeNameAsType(subCtx);
                            v.nameNode.eval_type_name = v.nameNode.type_name;
                            ctx.hadValidType(v.nameNode);
                            if (ctx.isDefinedClass(v.nameNode.type_name)) {
                                cl = ctx.findClass(v.nameNode.type_name);
                                m.addClassUsage(cl, ctx);
                            }
                            if (ctx.isDefinedClass(v.nameNode.array_type)) {
                                cl_1 = ctx.findClass(v.nameNode.array_type);
                                m.addClassUsage(cl_1, ctx);
                            }
                        }
                        ;
                        subCtx.setInMethod();
                        return [4 /*yield*/, this.WalkNodeChildren(fnBody, subCtx, wr)];
                    case 1:
                        _a.sent();
                        subCtx.unsetInMethod();
                        if (fnBody.didReturnAtIndex == -1) {
                            if (m.nameNode.type_name != "void") {
                                if (false == ctx.getFlag("in_task")) {
                                    ctx.addError(m.nameNode, "Function does not return any values!");
                                }
                            }
                        }
                        else {
                            if ((m.nameNode.type_name == "void") || ((((m.nameNode.type_name.length) > 0) == false) && (((m.nameNode.array_type.length) > 0) == false))) {
                                if (false == ctx.getFlag("in_task")) {
                                    rvNode = fnBody.children[fnBody.didReturnAtIndex];
                                    if ((rvNode.children.length) > 1) {
                                        ctx.addError(m.nameNode, "No return value type defined for a function which returns value");
                                        ctx.addError(rvNode, "Returning value from a function without set return value");
                                    }
                                }
                            }
                        }
                        for (i_1 = 0; i_1 < subCtx.localVarNames.length; i_1++) {
                            n = subCtx.localVarNames[i_1];
                            p = subCtx.localVariables[n];
                            if (p.set_cnt > 0) {
                                if (p.is_immutable) {
                                    ctx.addError(p.nameNode, "Immutable variable was assigned a value");
                                }
                                defNode = p.node;
                                defNode.setFlag("mutable");
                                nNode = p.nameNode;
                                nNode.setFlag("mutable");
                            }
                        }
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.EnterMethod = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.EnterFn(node, ctx, wr, (function (node, ctx, wr, nameNode, fnArgs, fnBody, desc) { return __awaiter(_this, void 0, void 0, function () {
                            var m, subCtx;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        m = desc.findMethod(nameNode.vref);
                                        subCtx = m.fnCtx;
                                        return [4 /*yield*/, this.walkFunctionBody(m, fnBody, ctx, subCtx, wr)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.EnterStaticMethod = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.EnterFn(node, ctx, wr, (function (node, ctx, wr, nameNode, fnArgs, fnBody, desc) { return __awaiter(_this, void 0, void 0, function () {
                            var m, subCtx;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        m = desc.findStaticMethod(nameNode.vref);
                                        subCtx = ctx.fork();
                                        m.fnCtx = subCtx;
                                        subCtx.in_static_method = true;
                                        return [4 /*yield*/, this.walkFunctionBody(m, fnBody, ctx, subCtx, wr)];
                                    case 1:
                                        _a.sent();
                                        subCtx.in_static_method = false;
                                        return [2 /*return*/];
                                }
                            });
                        }); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.DefineArrowOpFn = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var myName, argsNode, fBody, opNode, setArg;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        myName = ctx.createNewOpFnName();
                        argsNode = CodeNode.expressionNode();
                        fBody = node.copy();
                        fBody.children.splice(0, 1);
                        opNode = CodeNode.fromList([CodeNode.vref1("defn"), CodeNode.vref1(myName), argsNode, fBody]);
                        setArg = (function (idx) {
                            var i = argsNode.children.length;
                            while (i <= idx) {
                                argsNode.children.push(CodeNode.vref1(((myName + "_arg") + i)));
                                i = i + 1;
                            }
                            ;
                        });
                        return [4 /*yield*/, fBody.forTree((function (item, i) { return __awaiter(_this, void 0, void 0, function () {
                                var parts_1, rest_1, nbr_1, n_1;
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, operatorsOf.forEach_15(item.attrs, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0: return [4 /*yield*/, item.forTree((function (item, i) {
                                                                if ((item.vref.length) > 0) {
                                                                    if (item.vref == "_") {
                                                                        setArg(0);
                                                                        item.vref = myName + "_arg0";
                                                                    }
                                                                    var parts = item.vref.split("_");
                                                                    if ((parts.length) == 2) {
                                                                        var rest = parts[1];
                                                                        var nbr = isNaN(parseInt(rest)) ? undefined : parseInt(rest);
                                                                        if ((typeof (nbr) !== "undefined" && nbr != null)) {
                                                                            var n = nbr;
                                                                            setArg(n - 1);
                                                                            item.vref = (myName + "_arg") + (n - 1);
                                                                        }
                                                                    }
                                                                }
                                                            }))];
                                                        case 1:
                                                            _a.sent();
                                                            return [2 /*return*/];
                                                    }
                                                });
                                            }); }))];
                                        case 1:
                                            _a.sent();
                                            if (!((item.vref.length) > 0)) return [3 /*break*/, 5];
                                            if (!(item.vref == "_")) return [3 /*break*/, 3];
                                            return [4 /*yield*/, setArg(0)];
                                        case 2:
                                            _a.sent();
                                            item.vref = myName + "_arg0";
                                            _a.label = 3;
                                        case 3:
                                            parts_1 = item.vref.split("_");
                                            if (!((parts_1.length) == 2)) return [3 /*break*/, 5];
                                            rest_1 = parts_1[1];
                                            nbr_1 = isNaN(parseInt(rest_1)) ? undefined : parseInt(rest_1);
                                            if (!(typeof (nbr_1) !== "undefined" && nbr_1 != null)) return [3 /*break*/, 5];
                                            n_1 = nbr_1;
                                            return [4 /*yield*/, setArg(n_1 - 1)];
                                        case 4:
                                            _a.sent();
                                            item.vref = (myName + "_arg") + (n_1 - 1);
                                            _a.label = 5;
                                        case 5: return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        ctx.addOpFn(myName, opNode);
                        node.children.length = 0;
                        node.vref = myName;
                        node.expression = false;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.DefineOpFn = function (node, ctx, wr) {
        if ((node.children.length) < 4) {
            ctx.addError(node, "invalid operator function");
            return;
        }
        var fnName = node.children[1];
        if (false == ((fnName.vref.length) > 0)) {
            ctx.addError(node, "operator function has no name");
            return;
        }
        ctx.addOpFn(fnName.vref, node);
        node.disabled_node = true;
        node.flow_done = true;
    };
    ;
    RangerFlowParser.prototype.testCompile = function (opFn, node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var rootCtx, opParams, opBody, xValue, regToArg, am, opParamSet, regParams, regNames, newNode, blockCtx;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rootCtx = ctx.getRoot();
                        opParams = opFn.children[2];
                        opBody = opFn.children[3];
                        xValue = node.copy();
                        xValue.children.splice(0, 1);
                        regToArg = {};
                        am = new RangerArgMatch();
                        opParams.parallelTree(xValue, (function (left, right, i) {
                            if (((typeof (left) !== "undefined" && left != null)) && ((typeof (right) !== "undefined" && right != null))) {
                                if ((left.vref.length) > 0) {
                                    var v = right;
                                    if (v.expression) {
                                        regToArg[left.vref] = right;
                                    }
                                    am.nodes[left.vref] = right;
                                }
                            }
                        }));
                        opParamSet = {};
                        regParams = {};
                        regNames = {};
                        if (!(false == ((node.register_name.length) > 0))) return [3 /*break*/, 2];
                        return [4 /*yield*/, opBody.forTree((function (item, i) { return __awaiter(_this, void 0, void 0, function () {
                                var realArg, regName, argCopy, regExpr, regArg, realRegName, BlockOP;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!(typeof (regToArg[item.vref]) != "undefined" && regToArg.hasOwnProperty(item.vref))) return [3 /*break*/, 5];
                                            if (!(typeof (opParamSet[item.vref]) != "undefined" && opParamSet.hasOwnProperty(item.vref))) return [3 /*break*/, 4];
                                            if (!(false == ((typeof (regParams[item.vref]) != "undefined" && regParams.hasOwnProperty(item.vref))))) return [3 /*break*/, 3];
                                            realArg = (regToArg[item.vref]);
                                            if (!((realArg.register_name.length) > 0)) return [3 /*break*/, 1];
                                            return [3 /*break*/, 3];
                                        case 1:
                                            regName = ctx.createNewRegName();
                                            regNames[item.vref] = regName;
                                            argCopy = realArg.copy();
                                            regExpr = CodeNode.fromList([CodeNode.vref1("def"), CodeNode.vref1(regName), argCopy]);
                                            return [4 /*yield*/, this.WalkNode(regExpr, ctx, wr)];
                                        case 2:
                                            _a.sent();
                                            regArg = regExpr.children[1];
                                            realRegName = (((regExpr.children[1])).paramDesc).compiledName;
                                            regArg.paramDesc.set_cnt = 1;
                                            regArg.paramDesc.ref_cnt = 1;
                                            BlockOP = ctx.getLastBlockOp();
                                            BlockOP.register_expressions.push(regExpr);
                                            realArg.register_name = regName;
                                            realArg.reg_compiled_name = realRegName;
                                            _a.label = 3;
                                        case 3:
                                            regParams[item.vref] = true;
                                            _a.label = 4;
                                        case 4:
                                            opParamSet[item.vref] = true;
                                            _a.label = 5;
                                        case 5: return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        newNode = opBody.rebuildWithType(am, true);
                        node.children.length = 0;
                        return [4 /*yield*/, operatorsOf.forEach_15(newNode.children, (function (item, index) {
                                var tmp = item;
                                node.children.push(tmp);
                            }))];
                    case 3:
                        _a.sent();
                        node.flow_done = false;
                        if (!opBody.is_block_node) return [3 /*break*/, 5];
                        console.log("Block -> " + opBody.getCode());
                        blockCtx = ctx.fork();
                        blockCtx.newBlock();
                        return [4 /*yield*/, this.WalkNode(node, blockCtx, wr)];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 5: return [4 /*yield*/, this.WalkNode(node, ctx, wr)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: return [2 /*return*/, am.builtNodes];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.TransformOpFn = function (opFnList, origNode, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var ok, rootCtx, errCnt, use_delta, least_err_cnt, least_errs, depth, regInfo, fc, myT, newOps, tryTypes, codeStrHash, cList, oNodeParams, currentErrCnt_1, errDelta_3, i_3, tmp_5, i_4;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.infinite_recursion) {
                            return [2 /*return*/];
                        }
                        ok = false;
                        rootCtx = ctx.getRoot();
                        errCnt = rootCtx.compilerErrors.length;
                        use_delta = true;
                        least_err_cnt = 99999;
                        least_errs = [];
                        depth = operatorsOfstring_33.transactionc95depth_34("TransformOpFn", ctx);
                        if (depth > 20) {
                            ctx.addError(origNode, "Error: recursive operator function detected");
                            this.infinite_recursion = true;
                            return [2 /*return*/];
                        }
                        if ((origNode.register_name.length) > 0) {
                            if (ctx.isVarDefined(origNode.register_name)) {
                                regInfo = ctx.getVariableDef(origNode.register_name);
                                if ((typeof (regInfo.nameNode) !== "undefined" && regInfo.nameNode != null)) {
                                    origNode.copyEvalResFrom(regInfo.nameNode);
                                    return [2 /*return*/];
                                }
                                else {
                                }
                            }
                            else {
                            }
                        }
                        fc = origNode.children[0];
                        myT = operatorsOf_33.startc95transaction_35("TransformOpFn", fc.vref, ctx);
                        newOps = [];
                        tryTypes = ["string", "int", "double", "boolean"];
                        codeStrHash = origNode.getSource();
                        if ((typeof (this.match_types[codeStrHash]) != "undefined" && this.match_types.hasOwnProperty(codeStrHash))) {
                            tryTypes.splice(0, 0, (this.match_types[codeStrHash]));
                        }
                        cList = (ctx.getRoot()).getClasses().slice().reverse();
                        operatorsOf.forEach_31(cList, (function (item, index) {
                            if (item.isNormalClass() || item.is_system) {
                                if ((codeStrHash.indexOf(item.name)) >= 0) {
                                    tryTypes.splice(0, 0, item.name);
                                }
                                else {
                                    tryTypes.push(item.name);
                                }
                            }
                        }));
                        return [4 /*yield*/, operatorsOf.forEach_15(opFnList, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                var had_v, opFn_2, typeName_2;
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            had_v = false;
                                            return [4 /*yield*/, item.forTree((function (item, i) {
                                                    if (((item.array_type == "?") || (item.key_type == "?")) || (item.type_name == "?")) {
                                                        had_v = true;
                                                    }
                                                }))];
                                        case 1:
                                            _a.sent();
                                            if (!had_v) return [3 /*break*/, 3];
                                            opFn_2 = item.copy();
                                            typeName_2 = "";
                                            return [4 /*yield*/, operatorsOf.forEach_12(tryTypes, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                                    var copyOfFn;
                                                    return __generator(this, function (_a) {
                                                        switch (_a.label) {
                                                            case 0:
                                                                copyOfFn = opFn_2.copy();
                                                                typeName_2 = item;
                                                                return [4 /*yield*/, copyOfFn.forTree((function (item, i) {
                                                                        if (item.array_type == "?") {
                                                                            item.array_type = typeName_2;
                                                                        }
                                                                        if (item.key_type == "?") {
                                                                            item.key_type = typeName_2;
                                                                        }
                                                                        if (item.type_name == "?") {
                                                                            item.type_name = typeName_2;
                                                                        }
                                                                    }))];
                                                            case 1:
                                                                _a.sent();
                                                                copyOfFn.matched_type = typeName_2;
                                                                newOps.push(copyOfFn);
                                                                return [2 /*return*/];
                                                        }
                                                    });
                                                }); }))];
                                        case 2:
                                            _a.sent();
                                            _a.label = 3;
                                        case 3: return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        if (!((newOps.length) > 0)) return [3 /*break*/, 3];
                        return [4 /*yield*/, operatorsOf.forEach_15(newOps, (function (item, index) {
                                /** unused:  const tmp : CodeNode  = item   **/
                                opFnList.push(item);
                            }))];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        oNodeParams = origNode.children.length;
                        operatorsOf.filter_36(opFnList, (function (item, index) {
                            var opParams_1 = item.children[2];
                            return oNodeParams == ((opParams_1.children.length) - 1);
                        }));
                        return [4 /*yield*/, operatorsOf.forEach_15(opFnList, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                var currentErrCnt, errDelta, i, tmp_1, i_1, originalOpFn, node, opFn_1, opParams_2, opBody_1, xValue, regToArg, am, opParamSet, regParams, regNames, BlockOP, newDefNodes, newRNodes, newNode, blockCtx, newNode_1, blockCtx_1, lastLine, argVal, regName_1, argCopy_1, nameNode, regExpr_1, regArg_1, realRegName_1, BlockOP_2, myBlock;
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (ok) {
                                                return [2 /*return*/];
                                            }
                                            else {
                                                currentErrCnt = rootCtx.compilerErrors.length;
                                                errDelta = currentErrCnt - errCnt;
                                                if (errDelta > 0) {
                                                    if (errDelta < least_err_cnt) {
                                                        least_err_cnt = errDelta;
                                                        i = errCnt;
                                                        least_errs.length = 0;
                                                        while (i < currentErrCnt) {
                                                            tmp_1 = rootCtx.compilerErrors[i];
                                                            least_errs.push(tmp_1);
                                                            i = i + 1;
                                                        }
                                                        ;
                                                    }
                                                    i_1 = errCnt;
                                                    while (i_1 < currentErrCnt) {
                                                        rootCtx.compilerErrors.pop();
                                                        i_1 = i_1 + 1;
                                                    }
                                                    ;
                                                }
                                            }
                                            originalOpFn = item;
                                            node = origNode.copy();
                                            opFn_1 = item;
                                            opParams_2 = opFn_1.children[2];
                                            opBody_1 = opFn_1.children[3];
                                            xValue = node.copy();
                                            xValue.children.splice(0, 1);
                                            return [4 /*yield*/, opBody_1.forTree((function (item, i) {
                                                    if (item.vref == "return") {
                                                    }
                                                }))];
                                        case 1:
                                            _a.sent();
                                            regToArg = {};
                                            am = new RangerArgMatch();
                                            opParams_2.parallelTree(xValue, (function (left, right, i) {
                                                if (((typeof (left) !== "undefined" && left != null)) && ((typeof (right) !== "undefined" && right != null))) {
                                                    if ((left.vref.length) > 0) {
                                                        var v = right;
                                                        if (v.expression) {
                                                            regToArg[left.vref] = right;
                                                        }
                                                        am.nodes[left.vref] = right;
                                                    }
                                                }
                                            }));
                                            opParamSet = {};
                                            regParams = {};
                                            regNames = {};
                                            BlockOP = ctx.getLastBlockOp();
                                            newDefNodes = [];
                                            newRNodes = [];
                                            if (!(false == ((node.register_name.length) > 0))) return [3 /*break*/, 3];
                                            return [4 /*yield*/, opBody_1.forTree((function (item, i) { return __awaiter(_this, void 0, void 0, function () {
                                                    var realArg, regName, argCopy, regExpr, cnt, opCntDelta, opCnt, i_2, tmp_2, regArg, realRegName, BlockOP_1;
                                                    return __generator(this, function (_a) {
                                                        switch (_a.label) {
                                                            case 0:
                                                                if (!(typeof (regToArg[item.vref]) != "undefined" && regToArg.hasOwnProperty(item.vref))) return [3 /*break*/, 5];
                                                                if (!(typeof (opParamSet[item.vref]) != "undefined" && opParamSet.hasOwnProperty(item.vref))) return [3 /*break*/, 4];
                                                                if (!(false == ((typeof (regParams[item.vref]) != "undefined" && regParams.hasOwnProperty(item.vref))))) return [3 /*break*/, 3];
                                                                realArg = (regToArg[item.vref]);
                                                                if (!((realArg.register_name.length) > 0)) return [3 /*break*/, 1];
                                                                return [3 /*break*/, 3];
                                                            case 1:
                                                                regName = ctx.createNewRegName();
                                                                regNames[item.vref] = regName;
                                                                argCopy = realArg.copy();
                                                                regExpr = CodeNode.fromList([CodeNode.vref1("def"), CodeNode.vref1(regName), argCopy]);
                                                                cnt = BlockOP.register_expressions.length;
                                                                return [4 /*yield*/, this.WalkNode(regExpr, ctx, wr)];
                                                            case 2:
                                                                _a.sent();
                                                                opCntDelta = (BlockOP.register_expressions.length) - cnt;
                                                                if (use_delta && (opCntDelta > 0)) {
                                                                    opCnt = BlockOP.register_expressions.length;
                                                                    i_2 = cnt;
                                                                    while (i_2 < opCnt) {
                                                                        tmp_2 = BlockOP.register_expressions[i_2];
                                                                        newRNodes.push(tmp_2);
                                                                        i_2 = i_2 + 1;
                                                                    }
                                                                    ;
                                                                    i_2 = cnt;
                                                                    while (i_2 < opCnt) {
                                                                        BlockOP.register_expressions.pop();
                                                                        i_2 = i_2 + 1;
                                                                    }
                                                                    ;
                                                                }
                                                                regArg = regExpr.children[1];
                                                                realRegName = (((regExpr.children[1])).paramDesc).compiledName;
                                                                regArg.paramDesc.set_cnt = 1;
                                                                regArg.paramDesc.ref_cnt = 1;
                                                                if (use_delta) {
                                                                    newRNodes.push(regExpr);
                                                                }
                                                                else {
                                                                    BlockOP_1 = ctx.getLastBlockOp();
                                                                    BlockOP_1.register_expressions.push(regExpr);
                                                                }
                                                                realArg.register_name = regName;
                                                                realArg.reg_compiled_name = realRegName;
                                                                _a.label = 3;
                                                            case 3:
                                                                regParams[item.vref] = true;
                                                                _a.label = 4;
                                                            case 4:
                                                                opParamSet[item.vref] = true;
                                                                _a.label = 5;
                                                            case 5: return [2 /*return*/];
                                                        }
                                                    });
                                                }); }))];
                                        case 2:
                                            _a.sent();
                                            _a.label = 3;
                                        case 3:
                                            newNode = opBody_1.rebuildWithType(am, true);
                                            node.getChildrenFrom(newNode);
                                            node.flow_done = false;
                                            ctx.setTestCompile();
                                            if (!opBody_1.is_block_node) return [3 /*break*/, 5];
                                            blockCtx = ctx.fork();
                                            blockCtx.newBlock();
                                            return [4 /*yield*/, this.WalkNode(node, blockCtx, wr)];
                                        case 4:
                                            _a.sent();
                                            return [3 /*break*/, 7];
                                        case 5: return [4 /*yield*/, this.WalkNode(node, ctx, wr)];
                                        case 6:
                                            _a.sent();
                                            _a.label = 7;
                                        case 7:
                                            if (!(errCnt == (rootCtx.compilerErrors.length))) return [3 /*break*/, 19];
                                            ctx.unsetTestCompile();
                                            if ((originalOpFn.matched_type.length) > 0) {
                                                this.match_types[codeStrHash] = originalOpFn.matched_type;
                                            }
                                            if (!(false == ctx.isTestCompile())) return [3 /*break*/, 10];
                                            return [4 /*yield*/, operatorsOf.forEach_15(newDefNodes, (function (item, index) {
                                                    var tmp_3 = item;
                                                    BlockOP.register_expressions.push(tmp_3);
                                                }))];
                                        case 8:
                                            _a.sent();
                                            return [4 /*yield*/, operatorsOf.forEach_15(newRNodes, (function (item, index) {
                                                    var tmp_4 = item;
                                                    BlockOP.register_expressions.push(tmp_4);
                                                }))];
                                        case 9:
                                            _a.sent();
                                            _a.label = 10;
                                        case 10:
                                            ok = true;
                                            newNode_1 = opBody_1.rebuildWithType(am, true);
                                            origNode.getChildrenFrom(newNode_1);
                                            origNode.flow_done = false;
                                            if (!opBody_1.is_block_node) return [3 /*break*/, 16];
                                            blockCtx_1 = ctx.fork();
                                            blockCtx_1.newBlock();
                                            return [4 /*yield*/, this.WalkNode(origNode, blockCtx_1, wr)];
                                        case 11:
                                            _a.sent();
                                            lastLine = origNode.children[((origNode.children.length) - 1)];
                                            if (!((lastLine.isFirstVref("ret") || ((lastLine.eval_array_type.length) > 0)) || (((lastLine.eval_type_name.length) > 0) && (lastLine.eval_type_name != "void")))) return [3 /*break*/, 15];
                                            argVal = lastLine.children[1];
                                            return [4 /*yield*/, this.WalkNode(argVal, blockCtx_1, wr)];
                                        case 12:
                                            _a.sent();
                                            origNode.copyEvalResFrom(argVal);
                                            regName_1 = ctx.createNewRegName();
                                            regNames[item.vref] = regName_1;
                                            argCopy_1 = argVal.copy();
                                            nameNode = CodeNode.vref1(regName_1);
                                            nameNode.value_type = origNode.eval_type;
                                            nameNode.type_name = origNode.eval_type_name;
                                            nameNode.array_type = origNode.eval_array_type;
                                            nameNode.key_type = origNode.eval_key_type;
                                            if (argVal.eval_type == 17) {
                                                if ((typeof (argVal.expression_value) !== "undefined" && argVal.expression_value != null)) {
                                                    nameNode.expression_value = argVal.expression_value.copy();
                                                }
                                                else {
                                                    nameNode.expression_value = argVal.copy();
                                                }
                                            }
                                            nameNode.setFlag("unwrap");
                                            regExpr_1 = CodeNode.fromList([CodeNode.vref1("def"), nameNode]);
                                            return [4 /*yield*/, this.WalkNode(regExpr_1, ctx, wr)];
                                        case 13:
                                            _a.sent();
                                            regArg_1 = regExpr_1.children[1];
                                            realRegName_1 = (((regExpr_1.children[1])).paramDesc).compiledName;
                                            regArg_1.paramDesc.set_cnt = 1;
                                            regArg_1.paramDesc.ref_cnt = 1;
                                            BlockOP_2 = ctx.getLastBlockOp();
                                            if (false == ctx.isTestCompile()) {
                                            }
                                            origNode.register_name = regName_1;
                                            origNode.reg_compiled_name = realRegName_1;
                                            lastLine.flow_done = false;
                                            lastLine.children.length = 0;
                                            lastLine.getChildrenFrom(CodeNode.fromList([CodeNode.vref1("="), CodeNode.vref1(regName_1), argCopy_1]));
                                            /** unused:  const regE : CodeNode  = regExpr_1.children[1]   **/
                                            return [4 /*yield*/, this.WalkNode(lastLine, blockCtx_1, wr)];
                                        case 14:
                                            /** unused:  const regE : CodeNode  = regExpr_1.children[1]   **/
                                            _a.sent();
                                            myBlock = CodeNode.expressionNode();
                                            myBlock.getChildrenFrom(origNode);
                                            if (false == ctx.isTestCompile()) {
                                                myBlock.children.splice(0, 0, regExpr_1);
                                                BlockOP_2.register_expressions.push(myBlock);
                                            }
                                            origNode.children.length = 0;
                                            origNode.flow_done = true;
                                            _a.label = 15;
                                        case 15: return [3 /*break*/, 18];
                                        case 16: return [4 /*yield*/, this.WalkNode(origNode, ctx, wr)];
                                        case 17:
                                            _a.sent();
                                            origNode.flow_done = true;
                                            _a.label = 18;
                                        case 18: return [3 /*break*/, 20];
                                        case 19:
                                            ctx.unsetTestCompile();
                                            _a.label = 20;
                                        case 20: return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 4:
                        _a.sent();
                        currentErrCnt_1 = rootCtx.compilerErrors.length;
                        errDelta_3 = currentErrCnt_1 - errCnt;
                        if (errDelta_3 > 0) {
                            if (errDelta_3 < least_err_cnt) {
                                i_3 = errCnt;
                                least_errs.length = 0;
                                while (i_3 < currentErrCnt_1) {
                                    tmp_5 = rootCtx.compilerErrors[i_3];
                                    least_errs.push(tmp_5);
                                    i_3 = i_3 + 1;
                                }
                                ;
                            }
                            i_4 = errCnt;
                            while (i_4 < currentErrCnt_1) {
                                rootCtx.compilerErrors.pop();
                                i_4 = i_4 + 1;
                            }
                            ;
                        }
                        if (errDelta_3 > 0) {
                            operatorsOf.forEach_37(least_errs, (function (item, index) {
                                var tmp_6 = item;
                                rootCtx.compilerErrors.push(tmp_6);
                            }));
                            console.log("^ had errors...");
                            ctx.addError(origNode, "Could not find suitable match for the operator node");
                        }
                        if (this.infinite_recursion) {
                            ctx.addError(origNode, "Error: max recursiion depth of > 20 for inline operators detected");
                        }
                        operatorsOfContextTransaction_38.endc95transaction_39(myT);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.cmdArray = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var sc, items, b_union, union_types, cl, arrayItems, i, it, itemCopy, arrayItems_1, types, i_1, it_1, itemCopy_1, typeCnt;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!((node.children.length) == 3)) return [3 /*break*/, 5];
                        sc = node.getSecond();
                        if (!(((sc.vref.length) > 0) && ((sc.type_name.length) > 0))) return [3 /*break*/, 5];
                        node.eval_array_type = sc.type_name;
                        node.eval_type = 6;
                        items = node.getThird();
                        b_union = false;
                        union_types = [];
                        if (ctx.isDefinedClass(sc.type_name)) {
                            cl = ctx.findClass(sc.type_name);
                            if (cl.is_union) {
                                b_union = true;
                                union_types = cl.is_union_of;
                            }
                        }
                        arrayItems = node.newExpressionNode();
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < items.children.length)) return [3 /*break*/, 4];
                        it = items.children[i];
                        itemCopy = it.copy();
                        return [4 /*yield*/, this.WalkNode(itemCopy, ctx, wr)];
                    case 2:
                        _a.sent();
                        if (itemCopy.eval_type_name != sc.type_name) {
                            if (b_union) {
                                if ((union_types.indexOf(itemCopy.eval_type_name)) >= 0) {
                                }
                                else {
                                    ctx.addError(it, (itemCopy.eval_type_name + " is Not part of union ") + sc.type_name);
                                    return [3 /*break*/, 4];
                                }
                            }
                            else {
                                ctx.addError(it, "The array type should be " + sc.type_name);
                                return [3 /*break*/, 4];
                            }
                        }
                        arrayItems.children.push(itemCopy);
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        node.getChildrenFrom(arrayItems);
                        node.is_array_literal = true;
                        return [2 /*return*/];
                    case 5:
                        arrayItems_1 = node.newExpressionNode();
                        types = [];
                        i_1 = 0;
                        _a.label = 6;
                    case 6:
                        if (!(i_1 < node.children.length)) return [3 /*break*/, 9];
                        it_1 = node.children[i_1];
                        if (i_1 == 0) {
                            return [3 /*break*/, 8];
                        }
                        itemCopy_1 = it_1.copy();
                        return [4 /*yield*/, this.WalkNode(itemCopy_1, ctx, wr)];
                    case 7:
                        _a.sent();
                        if ((types.indexOf(itemCopy_1.eval_type_name)) < 0) {
                            types.push(itemCopy_1.eval_type_name);
                        }
                        arrayItems_1.children.push(itemCopy_1);
                        _a.label = 8;
                    case 8:
                        i_1++;
                        return [3 /*break*/, 6];
                    case 9:
                        ;
                        typeCnt = types.length;
                        if (typeCnt == 0) {
                            ctx.addError(node, "Invalid array types");
                            return [2 /*return*/];
                        }
                        node.eval_type = 6;
                        if ((types.length) > 1) {
                            node.eval_array_type = "Any";
                        }
                        else {
                            node.eval_array_type = types[0];
                        }
                        node.is_array_literal = true;
                        node.getChildrenFrom(arrayItems_1);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.EnterLambdaMethod = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var args, body, subCtx, currM, cn, m, ii, arg, p2, i, item, tmp, fc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = node.children[1];
                        body = node.children[2];
                        subCtx = ctx.fork();
                        if (false == args.expression) {
                            ctx.addError(node, "Invalid anonymous function: second param should be an expression");
                        }
                        ctx.incLambdaCnt();
                        subCtx.is_capturing = true;
                        node.evalTypeClass = TFactory.new_lambda_signature(node, ctx, wr);
                        currM = ctx.getCurrentMethod();
                        cn = node.children[0];
                        m = new RangerAppFunctionDesc();
                        m.name = "lambda";
                        m.node = node;
                        m.is_lambda = true;
                        m.nameNode = node.children[0];
                        m.insideFn = currM;
                        subCtx.newBlock();
                        currM.myLambdas.push(m);
                        subCtx.is_function = true;
                        subCtx.currentMethod = m;
                        if (cn.hasFlag("weak")) {
                            m.changeStrength(0, 1, node);
                        }
                        else {
                            m.changeStrength(1, 1, node);
                        }
                        m.fnBody = node.children[2];
                        ii = 0;
                        _a.label = 1;
                    case 1:
                        if (!(ii < args.children.length)) return [3 /*break*/, 4];
                        arg = args.children[ii];
                        return [4 /*yield*/, this.CheckTypeAnnotationOf(arg, subCtx, wr)];
                    case 2:
                        _a.sent();
                        p2 = new RangerAppParamDesc();
                        p2.name = arg.vref;
                        p2.value_type = arg.value_type;
                        p2.node = arg;
                        p2.nameNode = arg;
                        p2.init_cnt = 1;
                        p2.refType = 1;
                        p2.initRefType = 1;
                        if (args.hasBooleanProperty("strong")) {
                            p2.refType = 2;
                            p2.initRefType = 2;
                        }
                        p2.varType = 4;
                        m.params.push(p2);
                        arg.hasParamDesc = true;
                        arg.paramDesc = p2;
                        arg.eval_type = arg.value_type;
                        arg.eval_type_name = arg.type_name;
                        if (arg.hasFlag("strong")) {
                            p2.changeStrength(1, 1, p2.nameNode);
                        }
                        else {
                            arg.setFlag("lives");
                            p2.changeStrength(0, 1, p2.nameNode);
                        }
                        subCtx.defineVariable(p2.name, p2);
                        _a.label = 3;
                    case 3:
                        ii++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        i = 0;
                        _a.label = 5;
                    case 5:
                        if (!(i < body.children.length)) return [3 /*break*/, 8];
                        item = body.children[i];
                        tmp = item;
                        subCtx.lastBlockOp = tmp;
                        return [4 /*yield*/, this.WalkNode(item, subCtx, wr)];
                    case 6:
                        _a.sent();
                        if (i == ((body.children.length) - 1)) {
                            if ((item.children.length) > 0) {
                                fc = item.getFirst();
                                if (fc.vref != "return") {
                                    cn.type_name = "void";
                                }
                            }
                        }
                        _a.label = 7;
                    case 7:
                        i++;
                        return [3 /*break*/, 5];
                    case 8:
                        ;
                        node.has_lambda = true;
                        node.lambda_ctx = subCtx;
                        node.eval_type = 17;
                        node.eval_function = node;
                        node.expression_value = node.copy();
                        node.lambdaFnDesc = m;
                        if (!ctx.isCapturing()) return [3 /*break*/, 10];
                        return [4 /*yield*/, operatorsOf.forEach_12(node.lambda_ctx.captured_variables, (function (item, index) {
                                if (ctx.isVarDefined(item)) {
                                    if (ctx.isLocalToCapture(item) == false) {
                                        ctx.addCapturedVariable(item);
                                    }
                                }
                            }))];
                    case 9:
                        _a.sent();
                        _a.label = 10;
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.CheckVRefTypeAnnotationOf = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var tAnn, testC, tstr, i, ch, my_class_name, ann;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.has_vref_annotation) return [3 /*break*/, 7];
                        tAnn = node.vref_annotation;
                        if (!(false == ctx.isDefinedClass(node.vref))) return [3 /*break*/, 1];
                        ctx.addError(node, ("Trait class " + node.vref) + " is not defined");
                        return [3 /*break*/, 7];
                    case 1:
                        testC = ctx.findClass(node.vref);
                        if (!testC.is_trait) return [3 /*break*/, 7];
                        if (!testC.node.hasExpressionProperty("params")) return [3 /*break*/, 7];
                        tstr = "";
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < tAnn.children.length)) return [3 /*break*/, 5];
                        ch = tAnn.children[i];
                        return [4 /*yield*/, this.CheckVRefTypeAnnotationOf(ch, ctx, wr)];
                    case 3:
                        _a.sent();
                        tstr = (tstr + "_") + ch.vref;
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        my_class_name = testC.name + tstr;
                        ann = tAnn;
                        return [4 /*yield*/, ctx.createTraitInstanceClass(testC.name, my_class_name, ann, this, wr)];
                    case 6:
                        _a.sent();
                        node.vref = my_class_name;
                        node.has_vref_annotation = false;
                        return [2 /*return*/, true];
                    case 7: return [2 /*return*/, false];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.CheckTypeAnnotationOf = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var tAnn, testC, tstr, i, ch, my_class_name, ann;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.has_type_annotation) return [3 /*break*/, 7];
                        tAnn = node.type_annotation;
                        if (!(false == ctx.isDefinedClass(node.type_name))) return [3 /*break*/, 1];
                        ctx.addError(node, ("Trait class " + node.type_name) + " is not defined");
                        return [3 /*break*/, 7];
                    case 1:
                        testC = ctx.findClass(node.type_name);
                        if (!testC.is_trait) return [3 /*break*/, 7];
                        if (!testC.node.hasExpressionProperty("params")) return [3 /*break*/, 7];
                        tstr = "";
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < tAnn.children.length)) return [3 /*break*/, 5];
                        ch = tAnn.children[i];
                        return [4 /*yield*/, this.CheckVRefTypeAnnotationOf(ch, ctx, wr)];
                    case 3:
                        _a.sent();
                        tstr = (tstr + "_") + ch.vref;
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        my_class_name = testC.name + tstr;
                        ann = tAnn;
                        return [4 /*yield*/, ctx.createTraitInstanceClass(testC.name, my_class_name, ann, this, wr)];
                    case 6:
                        _a.sent();
                        node.type_name = my_class_name;
                        node.has_type_annotation = false;
                        return [2 /*return*/, true];
                    case 7: return [2 /*return*/, false];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.matchNode = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fc, op_list, i, cmd, cmdName, possible_cmd, op_list_2, args, nn, objName, newNode;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (0 == (node.children.length)) {
                            return [2 /*return*/, false];
                        }
                        fc = node.getFirst();
                        this.stdCommands = ctx.getStdCommands();
                        return [4 /*yield*/, ctx.getOperators(fc.vref)];
                    case 1:
                        op_list = _a.sent();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < op_list.length)) return [3 /*break*/, 5];
                        cmd = op_list[i];
                        cmdName = cmd.getFirst();
                        if (!((cmdName.vref == fc.vref) && (false == ctx.isVarDefined(cmdName.vref)))) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.stdParamMatch(node, ctx, wr, true)];
                    case 3:
                        _a.sent();
                        if ((typeof (node.parent) !== "undefined" && node.parent != null)) {
                        }
                        return [2 /*return*/, true];
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        if (!(((fc.ns.length) > 1) && ((node.children.length) > 1))) return [3 /*break*/, 8];
                        possible_cmd = fc.ns[((fc.ns.length) - 1)];
                        return [4 /*yield*/, ctx.getOperators(possible_cmd)];
                    case 6:
                        op_list_2 = _a.sent();
                        if (!((op_list_2.length) > 0)) return [3 /*break*/, 8];
                        args = node.getSecond();
                        nn = fc.copy();
                        nn.ns.pop();
                        objName = nn.ns.join(".");
                        newNode = node.newExpressionNode();
                        newNode.add(node.newVRefNode("call"));
                        newNode.add(node.newVRefNode(objName));
                        newNode.add(node.newVRefNode(possible_cmd));
                        newNode.add(args.copy());
                        node.getChildrenFrom(newNode);
                        if (ctx.expressionLevel() == 0) {
                            ctx.lastBlockOp = node;
                        }
                        node.flow_done = false;
                        return [4 /*yield*/, this.WalkNode(node, ctx, wr)];
                    case 7:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 8: return [2 /*return*/, false];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.StartWalk = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var i, ch;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.WalkNode(node, ctx, wr)];
                    case 1:
                        _a.sent();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < this.walkAlso.length)) return [3 /*break*/, 5];
                        ch = this.walkAlso[i];
                        return [4 /*yield*/, this.WalkNode(ch, ctx, wr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.clearImports = function (node, ctx, wr) {
        if (node.isFirstVref("Import")) {
            node.expression = true;
            node.vref = "";
            node.children.pop();
            node.children.pop();
        }
        else {
            for (var i = 0; i < node.children.length; i++) {
                var item = node.children[i];
                this.clearImports(item, ctx, wr);
            }
            ;
        }
    };
    ;
    RangerFlowParser.prototype.mergeImports = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var envOpt, env, fNameNode, import_file, source_code_1, ppList, e_7, rootCtx, filePathIs, c, code, parser, fileWr, rn, i, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        envOpt = ctx.getEnv();
                        if (typeof (envOpt) === "undefined") {
                            ctx.addError(node, "Environment not defined");
                            return [2 /*return*/];
                        }
                        env = envOpt;
                        if (!node.isFirstVref("Import")) return [3 /*break*/, 8];
                        fNameNode = node.children[1];
                        import_file = fNameNode.string_value;
                        if ((typeof (ctx.already_imported[import_file]) != "undefined" && ctx.already_imported.hasOwnProperty(import_file))) {
                            return [2 /*return*/];
                        }
                        source_code_1 = "";
                        ppList = ctx.findPluginsFor("import_loader");
                        if (!((ppList.length) > 0)) return [3 /*break*/, 4];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, operatorsOf.forEach_12(ppList, (function (item, index) {
                                var plugin = require(item);
                                var ss = ((new plugin.Plugin())["import_loader"])(node, ctx, wr);
                                if (typeof (ss) === 'string') /* union case for string */ {
                                    var str = ss;
                                    console.log("--> import  " + str);
                                    source_code_1 = str;
                                }
                                ;
                            }))];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_7 = _a.sent();
                        return [3 /*break*/, 4];
                    case 4:
                        ctx.already_imported[import_file] = true;
                        rootCtx = ctx.getRoot();
                        if (!((source_code_1.length) == 0)) return [3 /*break*/, 6];
                        filePathIs = TFiles.searchEnv(env, rootCtx.libraryPaths, import_file);
                        if (operatorsOf_8.filec95exists_9(env, filePathIs, import_file) == false) {
                            if (ctx.hasCompilerFlag("verbose")) {
                                console.log("import did not find the file: " + import_file);
                            }
                            ctx.addError(node, "Could not import file " + import_file);
                            return [2 /*return*/];
                        }
                        if (ctx.hasCompilerFlag("verbose")) {
                            console.log("importing " + import_file);
                        }
                        return [4 /*yield*/, operatorsOf_8.readc95file_9(env, filePathIs, import_file)];
                    case 5:
                        c = _a.sent();
                        source_code_1 = c;
                        _a.label = 6;
                    case 6:
                        code = new SourceCode(source_code_1);
                        code.filename = import_file;
                        parser = new RangerLispParser(code);
                        parser.parse(ctx.hasCompilerFlag("no-op-transform"));
                        node.expression = true;
                        node.vref = "";
                        node.children.pop();
                        node.children.pop();
                        if (ctx.hasCompilerFlag("copysrc")) {
                            console.log("--> copying " + import_file);
                            fileWr = wr.getFileWriter(".", import_file);
                            fileWr.raw(source_code_1, false);
                        }
                        rn = parser.rootNode;
                        return [4 /*yield*/, this.mergeImports(rn, ctx, wr)];
                    case 7:
                        _a.sent();
                        node.children.push(rn);
                        return [3 /*break*/, 13];
                    case 8:
                        i = 0;
                        _a.label = 9;
                    case 9:
                        if (!(i < node.children.length)) return [3 /*break*/, 12];
                        item = node.children[i];
                        return [4 /*yield*/, this.mergeImports(item, ctx, wr)];
                    case 10:
                        _a.sent();
                        _a.label = 11;
                    case 11:
                        i++;
                        return [3 /*break*/, 9];
                    case 12:
                        ;
                        _a.label = 13;
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.CollectMethods = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var allTypes, serviceBuilder, i, point, cl, traitClassDef, name_4, t, origBody, match, params, initParams, traitParams, i_1, typeName, pArg, traitClass, i_2, pvar, ccopy, i_3, fnVar, mVs, i_4, variant, ccopy_1, i_5, variant_1, ccopy_2, cClassList, i_6, cl_1, ser, extWr, theCode, code, parser, rn, i_7, cl_2, ser_1, extWr_1, theCode_1, code_1, parser_1, rn_1, _loop_2, cname, p, i_8, i_10, cname_1, Anynn, rootCtx, new_class, did_push, i_11, typeName_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.WalkCollectMethods(node, ctx, wr)];
                    case 1:
                        _a.sent();
                        allTypes = [];
                        serviceBuilder = new RangerServiceBuilder();
                        return [4 /*yield*/, serviceBuilder.CreateServices(this, ctx, wr)];
                    case 2:
                        _a.sent();
                        operatorsOf_13.forEach_40(this.extendedClasses, (function (item, index) {
                            var ch = ctx.findClass(index);
                            var parent = ctx.findClass(item);
                            ch.addParentClass(item);
                            parent.is_inherited = true;
                            operatorsOf.forEach_11(parent.variables, (function (item, index) {
                                ch.ctx.defineVariable(item.name, item);
                            }));
                        }));
                        i = 0;
                        _a.label = 3;
                    case 3:
                        if (!(i < this.classesWithTraits.length)) return [3 /*break*/, 21];
                        point = this.classesWithTraits[i];
                        cl = point.class_def;
                        traitClassDef = point.node.children[1];
                        name_4 = traitClassDef.vref;
                        t = ctx.findClass(name_4);
                        if ((t.extends_classes.length) > 0) {
                            ctx.addError(point.node, ("Can not join class " + name_4) + " because it is inherited. Currently on base classes can be used as traits.");
                            return [3 /*break*/, 20];
                        }
                        if (!t.has_constructor) return [3 /*break*/, 4];
                        ctx.addError(point.node, ("Can not join class " + name_4) + " because it has a constructor function");
                        return [3 /*break*/, 20];
                    case 4:
                        origBody = cl.node.children[2];
                        match = new RangerArgMatch();
                        params = t.node.getExpressionProperty("params");
                        initParams = point.node.getExpressionProperty("params");
                        traitParams = new RangerTraitParams();
                        if (((typeof (params) !== "undefined" && params != null)) && ((typeof (initParams) !== "undefined" && initParams != null))) {
                            for (i_1 = 0; i_1 < params.children.length; i_1++) {
                                typeName = params.children[i_1];
                                pArg = initParams.children[i_1];
                                if (0 == (pArg.vref.length)) {
                                    match.addNode(typeName.vref, pArg);
                                }
                                else {
                                    match.add(typeName.vref, pArg.vref, ctx);
                                }
                                traitParams.param_names.push(typeName.vref);
                                traitParams.values[typeName.vref] = pArg.vref;
                            }
                            ;
                            cl.trait_params[name_4] = traitParams;
                        }
                        else {
                            match.add("T", cl.name, ctx);
                        }
                        ctx.setCurrentClass(cl);
                        traitClass = ctx.findClass(traitClassDef.vref);
                        i_2 = 0;
                        _a.label = 5;
                    case 5:
                        if (!(i_2 < traitClass.variables.length)) return [3 /*break*/, 8];
                        pvar = traitClass.variables[i_2];
                        ccopy = pvar.node.rebuildWithType(match, true);
                        return [4 /*yield*/, this.WalkCollectMethods(ccopy, ctx, wr)];
                    case 6:
                        _a.sent();
                        origBody.children.push(ccopy);
                        _a.label = 7;
                    case 7:
                        i_2++;
                        return [3 /*break*/, 5];
                    case 8:
                        ;
                        i_3 = 0;
                        _a.label = 9;
                    case 9:
                        if (!(i_3 < traitClass.defined_variants.length)) return [3 /*break*/, 15];
                        fnVar = traitClass.defined_variants[i_3];
                        mVs = traitClass.method_variants[fnVar];
                        i_4 = 0;
                        _a.label = 10;
                    case 10:
                        if (!(i_4 < mVs.variants.length)) return [3 /*break*/, 13];
                        variant = mVs.variants[i_4];
                        ccopy_1 = variant.node.rebuildWithType(match, true);
                        return [4 /*yield*/, this.WalkCollectMethods(ccopy_1, ctx, wr)];
                    case 11:
                        _a.sent();
                        origBody.children.push(ccopy_1);
                        _a.label = 12;
                    case 12:
                        i_4++;
                        return [3 /*break*/, 10];
                    case 13:
                        ;
                        _a.label = 14;
                    case 14:
                        i_3++;
                        return [3 /*break*/, 9];
                    case 15:
                        ;
                        i_5 = 0;
                        _a.label = 16;
                    case 16:
                        if (!(i_5 < traitClass.static_methods.length)) return [3 /*break*/, 19];
                        variant_1 = traitClass.static_methods[i_5];
                        ccopy_2 = variant_1.node.rebuildWithType(match, true);
                        return [4 /*yield*/, this.WalkCollectMethods(ccopy_2, ctx, wr)];
                    case 17:
                        _a.sent();
                        origBody.children.push(ccopy_2);
                        _a.label = 18;
                    case 18:
                        i_5++;
                        return [3 /*break*/, 16];
                    case 19:
                        ;
                        _a.label = 20;
                    case 20:
                        i++;
                        return [3 /*break*/, 3];
                    case 21:
                        ;
                        cClassList = this.serializedClasses.slice().sort((function (left, right) {
                            var left_had = false;
                            var right_had = false;
                            operatorsOf.forEach_11(left.variables, (function (item, index) {
                                if ((item.nameNode.type_name == right.name) || (item.nameNode.array_type == right.name)) {
                                    left_had = true;
                                }
                            }));
                            operatorsOf.forEach_11(right.variables, (function (item, index) {
                                if ((item.nameNode.type_name == left.name) || (item.nameNode.array_type == left.name)) {
                                    right_had = true;
                                }
                            }));
                            if (left_had) {
                                return 1;
                            }
                            if (right_had) {
                                return -1;
                            }
                            return 0;
                        }));
                        i_6 = 0;
                        _a.label = 22;
                    case 22:
                        if (!(i_6 < cClassList.length)) return [3 /*break*/, 25];
                        cl_1 = cClassList[i_6];
                        cl_1.is_serialized = true;
                        ser = new RangerSerializeClass();
                        extWr = new CodeWriter();
                        ser.createJSONSerializerFn2(cl_1, cl_1.ctx, extWr);
                        theCode = extWr.getCode();
                        code = new SourceCode(theCode);
                        code.filename = "extension " + ctx.currentClass.name;
                        parser = new RangerLispParser(code);
                        parser.parse(ctx.hasCompilerFlag("no-op-transform"));
                        rn = parser.rootNode;
                        return [4 /*yield*/, this.WalkCollectMethods(rn, cl_1.ctx, wr)];
                    case 23:
                        _a.sent();
                        this.walkAlso.push(rn);
                        _a.label = 24;
                    case 24:
                        i_6++;
                        return [3 /*break*/, 22];
                    case 25:
                        ;
                        i_7 = 0;
                        _a.label = 26;
                    case 26:
                        if (!(i_7 < this.immutableClasses.length)) return [3 /*break*/, 29];
                        cl_2 = this.immutableClasses[i_7];
                        ser_1 = new RangerImmutableExtension();
                        extWr_1 = new CodeWriter();
                        ser_1.createImmutableExtension(cl_2, cl_2.ctx, extWr_1);
                        theCode_1 = extWr_1.getCode();
                        code_1 = new SourceCode(theCode_1);
                        code_1.filename = "extension " + cl_2.name;
                        parser_1 = new RangerLispParser(code_1);
                        parser_1.parse(ctx.hasCompilerFlag("no-op-transform"));
                        rn_1 = parser_1.rootNode;
                        return [4 /*yield*/, this.WalkCollectMethods(rn_1, cl_2.ctx, wr)];
                    case 27:
                        _a.sent();
                        this.walkAlso.push(rn_1);
                        _a.label = 28;
                    case 28:
                        i_7++;
                        return [3 /*break*/, 26];
                    case 29:
                        ;
                        _loop_2 = function (i_8) {
                            var c, varNames, i_9;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        cname = ctx.definedClassList[i_8];
                                        allTypes.push(cname);
                                        c = (ctx.definedClasses[cname]);
                                        if (((c.is_system || c.is_interface) || c.is_template) || c.is_trait) {
                                            return [2 /*return*/, "continue"];
                                        }
                                        varNames = {};
                                        for (i_9 = 0; i_9 < c.variables.length; i_9++) {
                                            p = c.variables[i_9];
                                            ctx.hadValidType(p.nameNode);
                                            varNames[p.name] = true;
                                        }
                                        ;
                                        return [4 /*yield*/, operatorsOf_13.forEach_30(c.method_variants, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0: return [4 /*yield*/, operatorsOf.forEach_29(item.variants, (function (item, index) {
                                                                if ((typeof (varNames[item.name]) != "undefined" && varNames.hasOwnProperty(item.name))) {
                                                                    ctx.addError(item.nameNode, "Class has defined method and variable of the same name.");
                                                                }
                                                            }))];
                                                        case 1:
                                                            _a.sent();
                                                            return [2 /*return*/];
                                                    }
                                                });
                                            }); }))];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        };
                        i_8 = 0;
                        _a.label = 30;
                    case 30:
                        if (!(i_8 < ctx.definedClassList.length)) return [3 /*break*/, 33];
                        return [5 /*yield**/, _loop_2(i_8)];
                    case 31:
                        _a.sent();
                        _a.label = 32;
                    case 32:
                        i_8++;
                        return [3 /*break*/, 30];
                    case 33:
                        ;
                        for (i_10 = 0; i_10 < ctx.definedClassList.length; i_10++) {
                            cname_1 = ctx.definedClassList[i_10];
                            allTypes.push(cname_1);
                        }
                        ;
                        allTypes.push("int");
                        allTypes.push("string");
                        allTypes.push("boolean");
                        allTypes.push("double");
                        Anynn = node.newVRefNode("Any");
                        rootCtx = ctx.getRoot();
                        new_class = new RangerAppClassDesc();
                        new_class.name = "Any";
                        new_class.nameNode = Anynn;
                        rootCtx.addClass("Any", new_class);
                        new_class.is_union = true;
                        did_push = {};
                        for (i_11 = 0; i_11 < allTypes.length; i_11++) {
                            typeName_1 = allTypes[i_11];
                            if ((typeof (did_push[typeName_1]) != "undefined" && did_push.hasOwnProperty(typeName_1))) {
                                continue;
                            }
                            new_class.is_union_of.push(typeName_1);
                            did_push[typeName_1] = true;
                        }
                        ;
                        Anynn.clDesc = new_class;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.defineFunctionParam = function (method, arg, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.CheckTypeAnnotationOf(arg, ctx, wr)];
                    case 1:
                        _a.sent();
                        p = new RangerAppParamDesc();
                        p.name = arg.vref;
                        p.value_type = arg.value_type;
                        p.node = arg;
                        p.init_cnt = 1;
                        p.nameNode = arg;
                        p.refType = 1;
                        p.varType = 4;
                        method.params.push(p);
                        arg.hasParamDesc = true;
                        arg.paramDesc = p;
                        arg.eval_type = arg.value_type;
                        arg.eval_type_name = arg.type_name;
                        if (arg.hasFlag("strong")) {
                            p.changeStrength(1, 1, p.nameNode);
                        }
                        else {
                            arg.setFlag("lives");
                            p.changeStrength(0, 1, p.nameNode);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.spliceFunctionBody = function (startIndex, node, ctx, wr) {
        var block_index = startIndex;
        var ch_len = (node.children.length) - 1;
        if (ch_len == startIndex) {
            return node;
        }
        for (var i = 0; i < node.children.length; i++) {
            var cb = node.children[i];
            if (i > startIndex) {
                if ((cb.vref.length) > 0) {
                    if (ctx.hasCompilerFlag(cb.vref) && (i < ch_len)) {
                        block_index = i + 1;
                    }
                }
            }
        }
        ;
        var copyOf = node.copy();
        while ((node.children.length) > (startIndex + 1)) {
            node.children.pop();
        }
        ;
        if (block_index > startIndex) {
            var replacer = copyOf.children[block_index];
            node.children.pop();
            node.children.push(replacer.copy());
        }
        return node;
    };
    ;
    RangerFlowParser.prototype.CreateFunctionObject = function (orig_node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var subCtx, node, cn, m, args, ii, arg, p2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        subCtx = ctx.fork();
                        node = this.spliceFunctionBody(3, orig_node, subCtx, wr);
                        cn = node.getSecond();
                        /** unused:  const s : string  = node.getVRefAt(1)   **/
                        cn.ifNoTypeSetToVoid();
                        m = operatorsOfCodeNode_41.rc46funcdesc_42(node, ctx);
                        subCtx.is_function = true;
                        subCtx.currentMethod = m;
                        m.fnCtx = subCtx;
                        if (cn.hasFlag("weak")) {
                            m.changeStrength(0, 1, node);
                        }
                        else {
                            m.changeStrength(1, 1, node);
                        }
                        args = node.children[2];
                        m.fnBody = node.children[3];
                        return [4 /*yield*/, this.CheckTypeAnnotationOf(m.nameNode, ctx, wr)];
                    case 1:
                        _a.sent();
                        ii = 0;
                        _a.label = 2;
                    case 2:
                        if (!(ii < args.children.length)) return [3 /*break*/, 5];
                        arg = args.children[ii];
                        return [4 /*yield*/, this.CheckTypeAnnotationOf(arg, subCtx, wr)];
                    case 3:
                        _a.sent();
                        p2 = new RangerAppParamDesc();
                        p2.name = arg.vref;
                        p2.value_type = arg.value_type;
                        p2.node = arg;
                        p2.nameNode = arg;
                        p2.init_cnt = 1;
                        p2.refType = 1;
                        p2.initRefType = 1;
                        p2.debugString = "--> collected ";
                        if (args.hasBooleanProperty("strong")) {
                            p2.refType = 2;
                            p2.initRefType = 2;
                        }
                        p2.varType = 4;
                        m.params.push(p2);
                        arg.hasParamDesc = true;
                        arg.paramDesc = p2;
                        arg.eval_type = arg.value_type;
                        arg.eval_type_name = arg.type_name;
                        if (arg.hasFlag("strong")) {
                            p2.changeStrength(1, 1, p2.nameNode);
                        }
                        else {
                            arg.setFlag("lives");
                            p2.changeStrength(0, 1, p2.nameNode);
                        }
                        subCtx.defineVariable(p2.name, p2);
                        _a.label = 4;
                    case 4:
                        ii++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        return [2 /*return*/, m];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.WalkCollectMethods = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var find_more, fc, pName, opRef, nameNode, new_class, cSig, b_is_void, langRef, opLang, opsList, i, op, fc_1, nn, args, opCode, opN, opName, opSig, opArgs, opTpls, opTemplatesMain, opTemplatesVRef, opTemplatesList, opThisNode, opCodeNode, actualCode, opLangDef, instances, new_class_1, i_1, ch, nameNode_1, instances_1, new_class_2, i_2, ch_1, nameNode_2, cl, instances_2, i_3, ch_2, nameNode_3, instances_3, new_class_3, i_4, ch_3, nameNode_4, cl_1, instances_4, i_5, ch_4, langName, langClassName, instances_5, new_class_4, i_6, ch_5, langName_1, langClassName_1, ee, currC, ParentClass, extList, currC_1, ii, ee_1, ParentClass_1, currC_2, subCtx, m, args_1, ii_1, arg, p, fNameNode, enumList, new_enum, i_7, item, fc_2, fNameNode_1, enumList_1, new_enum_1, i_8, item_1, s, classNameNode, new_class_5, subCtx_1, s_1, classNameNode_1, new_class_6, notOkNames, subCtx_2, third, extClass, s_2, list, i_9, cname, extC, i_10, vv, currC_3, subCtx_3, s_3, vDef, p_1, currC_4, initNode, tDef, vAnn, tAnn, initNode_1, tDef_1, vAnn_1, tAnn_1, valueNode, fc_3, second, subCtx_4, listOf, i_11, item_2, fNameNode_2, import_file, envOpt, env, rootCtx, filePathIs, c, code, parser, rnode, defName, currC_5, joinPoint, b_is_main, s_4, currC_6, m_1_1, args_2, s_5, currC_7, m_2_1, args_3, s_6, old_class, currC_8, fnObj, cn, i_12, item_3;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        find_more = true;
                        if ((node.children.length) > 0) {
                            fc = node.getFirst();
                            if ((fc.ns.length) > 1) {
                                if ((fc.ns[0]) == "plugin") {
                                    if (node.is_plugin) {
                                        return [2 /*return*/];
                                    }
                                    node.is_plugin = true;
                                    pName = fc.ns[1];
                                    ctx.addPluginNode(pName, node);
                                    return [2 /*return*/];
                                }
                            }
                        }
                        if (node.isFirstVref("defn")) {
                            return [2 /*return*/];
                        }
                        if (node.isFirstVref("flag")) {
                            return [2 /*return*/];
                        }
                        if (node.isFirstVref("page")) {
                            return [2 /*return*/];
                        }
                        if (node.isFirstVref("service")) {
                            return [2 /*return*/];
                        }
                        if (node.isFirstVref("operator")) {
                            opRef = node.children[0];
                            nameNode = node.getSecond();
                            /** unused:  const opClassName : string  = nameNode.vref   **/
                            if (nameNode.vref == "class") {
                                new_class = new RangerAppClassDesc();
                                new_class.name = nameNode.type_name;
                                new_class.nameNode = nameNode;
                                nameNode.vref = nameNode.type_name;
                                ctx.addClass(nameNode.vref, new_class);
                                cSig = TFactory.new_class_signature(nameNode, ctx, wr);
                                cSig.is_system = true;
                                new_class.is_system = true;
                                nameNode.clDesc = new_class;
                            }
                            b_is_void = (nameNode.type_name == "void") || nameNode.is_block_node;
                            langRef = CodeNode.vref1(operatorsOf_21.getTargetLang_22(ctx));
                            if ((opRef.type_name.length) > 0) {
                                langRef.vref = opRef.type_name;
                                console.log("OP type " + opRef.type_name);
                            }
                            opLang = ((node.children.length) > 2) ? (node.children[2]) : langRef;
                            opsList = node.children[((node.children.length) - 1)];
                            for (i = 0; i < opsList.children.length; i++) {
                                op = opsList.children[i];
                                fc_1 = op.getFirst();
                                if (fc_1.vref == "fn") {
                                    nn = op.getSecond();
                                    args = op.getThird();
                                    opCode = op.children[3];
                                    opN = new CodeNode(op.code, op.sp, op.ep);
                                    opName = nn.copy();
                                    opSig = nn.rebuildWithType(new RangerArgMatch(), false);
                                    opArgs = args.rebuildWithType(new RangerArgMatch(), false);
                                    opTpls = new CodeNode(op.code, op.sp, op.ep);
                                    opTpls.is_block_node = true;
                                    opTemplatesMain = new CodeNode(op.code, op.sp, op.ep);
                                    opTemplatesVRef = new CodeNode(op.code, op.sp, op.ep);
                                    opTemplatesList = new CodeNode(op.code, op.sp, op.ep);
                                    opTemplatesVRef.vref = "templates";
                                    opTemplatesMain.children.push(opTemplatesVRef);
                                    opTemplatesMain.children.push(opTemplatesList);
                                    opTpls.children.push(opTemplatesMain);
                                    opN.children.push(opName);
                                    if (nn.hasFlag("newcontext")) {
                                        opName.setFlag("newcontext");
                                    }
                                    opSig.vref = nn.vref;
                                    opN.children.push(opSig);
                                    opThisNode = nameNode.rebuildWithType(new RangerArgMatch(), false);
                                    opThisNode.vref = "self";
                                    if (nameNode.hasFlag("mutates")) {
                                        opThisNode.setFlag("mutates");
                                    }
                                    if (nameNode.hasFlag("immutable")) {
                                        opThisNode.setFlag("immutable");
                                    }
                                    if (b_is_void) {
                                    }
                                    else {
                                        opArgs.children.splice(0, 0, opThisNode);
                                    }
                                    opN.children.push(opArgs);
                                    opN.children.push(opTpls);
                                    if (op.hasStringProperty("doc")) {
                                        opN.setStringProperty("doc", op.getStringProperty("doc"));
                                    }
                                    opCodeNode = opCode.rebuildWithType(new RangerArgMatch(), false);
                                    actualCode = new CodeNode(opCode.code, op.sp, op.ep);
                                    opLangDef = opLang.rebuildWithType(new RangerArgMatch(), false);
                                    if (opLangDef.vref == "all") {
                                        opLangDef.vref = "*";
                                    }
                                    actualCode.children.push(opLangDef);
                                    actualCode.children.push(opCodeNode);
                                    if (opLangDef.vref == "*") {
                                        if (opCode.is_block_node == false) {
                                            opSig.setFlag("macro");
                                        }
                                    }
                                    if (nameNode.hasFlag("macro")) {
                                        opSig.setFlag("macro");
                                    }
                                    if (nn.hasFlag("pure")) {
                                        opSig.setFlag("pure");
                                    }
                                    opTemplatesList.children.push(actualCode);
                                    ctx.createOperator(opN);
                                }
                            }
                            ;
                            return [2 /*return*/];
                            instances = node.getThird();
                            new_class_1 = new RangerAppClassDesc();
                            new_class_1.name = nameNode.vref;
                            new_class_1.nameNode = nameNode;
                            ctx.addClass(nameNode.vref, new_class_1);
                            new_class_1.is_system_union = true;
                            for (i_1 = 0; i_1 < instances.children.length; i_1++) {
                                ch = instances.children[i_1];
                                new_class_1.is_union_of.push(ch.vref);
                            }
                            ;
                            nameNode.clDesc = new_class_1;
                            return [2 /*return*/];
                        }
                        if (node.isFirstVref("union")) {
                            nameNode_1 = node.getSecond();
                            instances_1 = node.getThird();
                            new_class_2 = new RangerAppClassDesc();
                            new_class_2.name = nameNode_1.vref;
                            new_class_2.nameNode = nameNode_1;
                            ctx.addClass(nameNode_1.vref, new_class_2);
                            new_class_2.is_union = true;
                            for (i_2 = 0; i_2 < instances_1.children.length; i_2++) {
                                ch_1 = instances_1.children[i_2];
                                new_class_2.is_union_of.push(ch_1.vref);
                            }
                            ;
                            nameNode_1.clDesc = new_class_2;
                            return [2 /*return*/];
                        }
                        if (node.isFirstVref("systemunion")) {
                            nameNode_2 = node.getSecond();
                            if (ctx.isDefinedClass(nameNode_2.vref)) {
                                cl = ctx.findClass(nameNode_2.vref);
                                if (cl.is_system == false) {
                                    ctx.addError(node, "Only system classes can be systemunions");
                                }
                                cl.is_system_union = true;
                                instances_2 = node.getThird();
                                for (i_3 = 0; i_3 < instances_2.children.length; i_3++) {
                                    ch_2 = instances_2.children[i_3];
                                    cl.is_union_of.push(ch_2.vref);
                                }
                                ;
                                return [2 /*return*/];
                            }
                            nameNode_3 = node.getSecond();
                            instances_3 = node.getThird();
                            new_class_3 = new RangerAppClassDesc();
                            new_class_3.name = nameNode_3.vref;
                            new_class_3.nameNode = nameNode_3;
                            ctx.addClass(nameNode_3.vref, new_class_3);
                            new_class_3.is_system_union = true;
                            for (i_4 = 0; i_4 < instances_3.children.length; i_4++) {
                                ch_3 = instances_3.children[i_4];
                                new_class_3.is_union_of.push(ch_3.vref);
                            }
                            ;
                            nameNode_3.clDesc = new_class_3;
                            return [2 /*return*/];
                        }
                        if (node.isFirstVref("systemclass")) {
                            nameNode_4 = node.getSecond();
                            if (ctx.isDefinedClass(nameNode_4.vref)) {
                                cl_1 = ctx.findClass(nameNode_4.vref);
                                if (cl_1.is_system_union == false) {
                                    ctx.addError(node, "Class already defined and it was not a systemunion.");
                                }
                                cl_1.is_system = true;
                                instances_4 = node.getThird();
                                for (i_5 = 0; i_5 < instances_4.children.length; i_5++) {
                                    ch_4 = instances_4.children[i_5];
                                    langName = ch_4.getFirst();
                                    langClassName = ch_4.getSecond();
                                    cl_1.systemNodes[langName.vref] = ch_4;
                                    if ((langClassName.vref.length) > 0) {
                                        cl_1.systemNames[langName.vref] = langClassName.vref;
                                    }
                                    if ((langClassName.string_value.length) > 0) {
                                        cl_1.systemNames[langName.vref] = langClassName.string_value;
                                    }
                                }
                                ;
                                return [2 /*return*/];
                            }
                            instances_5 = node.getThird();
                            new_class_4 = new RangerAppClassDesc();
                            new_class_4.name = nameNode_4.vref;
                            new_class_4.nameNode = nameNode_4;
                            ctx.addClass(nameNode_4.vref, new_class_4);
                            new_class_4.is_system = true;
                            for (i_6 = 0; i_6 < instances_5.children.length; i_6++) {
                                ch_5 = instances_5.children[i_6];
                                langName_1 = ch_5.getFirst();
                                langClassName_1 = ch_5.getSecond();
                                new_class_4.systemNodes[langName_1.vref] = ch_5;
                                if ((langClassName_1.vref.length) > 0) {
                                    new_class_4.systemNames[langName_1.vref] = langClassName_1.vref;
                                }
                                if ((langClassName_1.string_value.length) > 0) {
                                    new_class_4.systemNames[langName_1.vref] = langClassName_1.string_value;
                                }
                            }
                            ;
                            nameNode_4.is_system_class = true;
                            nameNode_4.clDesc = new_class_4;
                            return [2 /*return*/];
                        }
                        if (node.isFirstVref("extends")) {
                            if ((node.children.length) > 1) {
                                ee = node.getSecond();
                                currC = ctx.currentClass;
                                currC.addParentClass(ee.vref);
                                ParentClass = ctx.findClass(ee.vref);
                                ParentClass.is_inherited = true;
                            }
                            find_more = false;
                        }
                        if (node.isFirstVref("Extends")) {
                            extList = node.children[1];
                            currC_1 = ctx.currentClass;
                            for (ii = 0; ii < extList.children.length; ii++) {
                                ee_1 = extList.children[ii];
                                currC_1.addParentClass(ee_1.vref);
                                ParentClass_1 = ctx.findClass(ee_1.vref);
                                ParentClass_1.is_inherited = true;
                            }
                            ;
                        }
                        if (node.isFirstVref("constructor") || node.isFirstVref("Constructor")) {
                            currC_2 = ctx.currentClass;
                            subCtx = currC_2.ctx.fork();
                            currC_2.has_constructor = true;
                            currC_2.constructor_node = node;
                            m = new RangerAppFunctionDesc();
                            m.name = "Constructor";
                            m.node = node;
                            m.nameNode = node.children[0];
                            m.fnBody = node.children[2];
                            m.fnCtx = subCtx;
                            args_1 = node.children[1];
                            for (ii_1 = 0; ii_1 < args_1.children.length; ii_1++) {
                                arg = args_1.children[ii_1];
                                p = new RangerAppParamDesc();
                                p.name = arg.vref;
                                p.value_type = arg.value_type;
                                p.node = arg;
                                p.nameNode = arg;
                                p.refType = 1;
                                p.varType = 4;
                                m.params.push(p);
                                arg.hasParamDesc = true;
                                arg.paramDesc = p;
                                arg.eval_type = arg.value_type;
                                arg.eval_type_name = arg.type_name;
                                subCtx.defineVariable(p.name, p);
                            }
                            ;
                            currC_2.constructor_fn = m;
                            find_more = false;
                        }
                        if (node.isFirstVref("enum")) {
                            fNameNode = node.children[1];
                            enumList = node.children[2];
                            new_enum = new RangerAppEnum();
                            for (i_7 = 0; i_7 < enumList.children.length; i_7++) {
                                item = enumList.children[i_7];
                                fc_2 = item.getFirst();
                                new_enum.add(fc_2.vref);
                            }
                            ;
                            ctx.definedEnums[fNameNode.vref] = new_enum;
                            find_more = false;
                        }
                        if (node.isFirstVref("Enum")) {
                            fNameNode_1 = node.children[1];
                            enumList_1 = node.children[2];
                            new_enum_1 = new RangerAppEnum();
                            for (i_8 = 0; i_8 < enumList_1.children.length; i_8++) {
                                item_1 = enumList_1.children[i_8];
                                new_enum_1.add(item_1.vref);
                            }
                            ;
                            ctx.definedEnums[fNameNode_1.vref] = new_enum_1;
                            find_more = false;
                        }
                        if (node.isFirstVref("trait")) {
                            s = node.getVRefAt(1);
                            classNameNode = node.getSecond();
                            new_class_5 = new RangerAppClassDesc();
                            new_class_5.name = s;
                            subCtx_1 = ctx.fork();
                            ctx.setCurrentClass(new_class_5);
                            subCtx_1.setCurrentClass(new_class_5);
                            new_class_5.ctx = subCtx_1;
                            new_class_5.nameNode = classNameNode;
                            ctx.addClass(s, new_class_5);
                            new_class_5.classNode = node;
                            new_class_5.node = node;
                            new_class_5.is_trait = true;
                        }
                        if (node.isFirstVref("CreateClass") || node.isFirstVref("class")) {
                            if ((node.children.length) < 3) {
                                ctx.addError(node, "Not enough arguments for creating a class");
                                return [2 /*return*/];
                            }
                            s_1 = node.getVRefAt(1);
                            classNameNode_1 = node.getSecond();
                            new_class_6 = new RangerAppClassDesc();
                            new_class_6.name = s_1;
                            new_class_6.compiledName = s_1;
                            classNameNode_1.evalTypeClass = TFactory.new_class_signature(classNameNode_1, ctx, wr);
                            notOkNames = ["main"];
                            if ((notOkNames.indexOf(s_1)) >= 0) {
                                ctx.addError(classNameNode_1, "Unfortunately this class name not allowed: " + s_1);
                            }
                            switch (s_1) {
                                case "_":
                                    new_class_6.compiledName = "utiltyClass";
                                    break;
                            }
                            ;
                            subCtx_2 = ctx.fork();
                            ctx.setCurrentClass(new_class_6);
                            subCtx_2.setCurrentClass(new_class_6);
                            new_class_6.ctx = subCtx_2;
                            new_class_6.nameNode = classNameNode_1;
                            ctx.addClass(s_1, new_class_6);
                            new_class_6.classNode = node;
                            new_class_6.node = node;
                            if (node.hasBooleanProperty("trait")) {
                                new_class_6.is_trait = true;
                            }
                            if (classNameNode_1.hasFlag("immutable")) {
                                this.immutableClasses.push(new_class_6);
                                new_class_6.is_immutable = true;
                            }
                            third = node.getThird();
                            if (third.vref == "extends") {
                                if (node.chlen() >= 4) {
                                    extClass = node.children[3];
                                    if ((extClass.vref.length) > 0) {
                                        this.extendedClasses[s_1] = extClass.vref;
                                    }
                                    else {
                                        ctx.addError(node, "Invalid classname given for the extends keyword");
                                    }
                                }
                            }
                        }
                        if (node.isFirstVref("TemplateClass")) {
                            s_2 = node.getVRefAt(1);
                            ctx.addTemplateClass(s_2, node);
                            find_more = false;
                        }
                        if (node.isFirstVref("Extends")) {
                            list = node.children[1];
                            for (i_9 = 0; i_9 < list.children.length; i_9++) {
                                cname = list.children[i_9];
                                extC = ctx.findClass(cname.vref);
                                for (i_10 = 0; i_10 < extC.variables.length; i_10++) {
                                    vv = extC.variables[i_10];
                                    currC_3 = ctx.currentClass;
                                    subCtx_3 = currC_3.ctx;
                                    subCtx_3.defineVariable(vv.name, vv);
                                }
                                ;
                            }
                            ;
                            find_more = false;
                        }
                        if (!(node.isFirstVref("def") || node.isFirstVref("let"))) return [3 /*break*/, 13];
                        s_3 = node.getVRefAt(1);
                        vDef = node.children[1];
                        p_1 = new RangerAppParamDesc();
                        if (!vDef.has_type_annotation) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.CheckTypeAnnotationOf(vDef, ctx, wr)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (s_3 != ctx.transformWord(s_3)) {
                        }
                        currC_4 = ctx.currentClass;
                        if (!currC_4.is_immutable) return [3 /*break*/, 8];
                        vDef.setFlag("weak");
                        if (!(vDef.value_type == 6)) return [3 /*break*/, 5];
                        initNode = node.newExpressionNode();
                        (initNode).push(node.newVRefNode("new"));
                        tDef = node.newVRefNode("Vector");
                        vAnn = node.newExpressionNode();
                        (vAnn).push(node.newVRefNode(vDef.array_type));
                        tDef.has_vref_annotation = true;
                        tDef.vref_annotation = vAnn;
                        (initNode).push(tDef);
                        node.children[2] = initNode;
                        vDef.value_type = 11;
                        vDef.type_name = "Vector";
                        tAnn = node.newExpressionNode();
                        (tAnn).push(node.newVRefNode(vDef.array_type));
                        vDef.has_type_annotation = true;
                        vDef.type_annotation = tAnn;
                        return [4 /*yield*/, this.CheckTypeAnnotationOf(vDef, ctx, wr)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.CheckVRefTypeAnnotationOf(tDef, ctx, wr)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        if (!(vDef.value_type == 7)) return [3 /*break*/, 8];
                        initNode_1 = node.newExpressionNode();
                        (initNode_1).push(node.newVRefNode("new"));
                        tDef_1 = node.newVRefNode("Map");
                        vAnn_1 = node.newExpressionNode();
                        (vAnn_1).push(node.newVRefNode(vDef.key_type));
                        (vAnn_1).push(node.newVRefNode(vDef.array_type));
                        tDef_1.has_vref_annotation = true;
                        tDef_1.vref_annotation = vAnn_1;
                        (initNode_1).push(tDef_1);
                        node.children[2] = initNode_1;
                        vDef.value_type = 11;
                        vDef.type_name = "Map";
                        tAnn_1 = node.newExpressionNode();
                        (tAnn_1).push(node.newVRefNode(vDef.key_type));
                        (tAnn_1).push(node.newVRefNode(vDef.array_type));
                        vDef.has_type_annotation = true;
                        vDef.type_annotation = tAnn_1;
                        return [4 /*yield*/, this.CheckTypeAnnotationOf(vDef, ctx, wr)];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, this.CheckVRefTypeAnnotationOf(tDef_1, ctx, wr)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        p_1.name = s_3;
                        p_1.value_type = vDef.value_type;
                        p_1.node = node;
                        p_1.is_class_variable = true;
                        p_1.varType = 8;
                        p_1.node = node;
                        p_1.nameNode = vDef;
                        vDef.hasParamDesc = true;
                        vDef.ownParamDesc = p_1;
                        vDef.paramDesc = p_1;
                        node.hasParamDesc = true;
                        node.paramDesc = p_1;
                        if (vDef.hasFlag("weak")) {
                            p_1.changeStrength(0, 2, p_1.nameNode);
                        }
                        else {
                            p_1.changeStrength(2, 2, p_1.nameNode);
                        }
                        if (!((node.children.length) > 2)) return [3 /*break*/, 11];
                        p_1.set_cnt = 1;
                        p_1.init_cnt = 1;
                        p_1.def_value = node.children[2];
                        p_1.is_optional = false;
                        if (p_1.def_value.value_type == 4) {
                            vDef.type_name = "string";
                        }
                        if (p_1.def_value.value_type == 3) {
                            vDef.type_name = "int";
                        }
                        if (p_1.def_value.value_type == 2) {
                            vDef.type_name = "double";
                        }
                        if (p_1.def_value.value_type == 5) {
                            vDef.type_name = "boolean";
                        }
                        valueNode = node.children[2];
                        if (!((valueNode.children.length) > 0)) return [3 /*break*/, 10];
                        fc_3 = valueNode.getFirst();
                        if (!(fc_3.vref == "new")) return [3 /*break*/, 10];
                        second = valueNode.getSecond();
                        return [4 /*yield*/, this.CheckVRefTypeAnnotationOf(second, ctx, wr)];
                    case 9:
                        _a.sent();
                        _a.label = 10;
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        p_1.is_optional = true;
                        if (false == ((vDef.value_type == 6) || (vDef.value_type == 7))) {
                            vDef.setFlag("optional");
                        }
                        _a.label = 12;
                    case 12:
                        currC_4.addVariable(p_1);
                        subCtx_4 = currC_4.ctx;
                        subCtx_4.defineVariable(p_1.name, p_1);
                        p_1.is_class_variable = true;
                        find_more = false;
                        _a.label = 13;
                    case 13:
                        if (node.isFirstVref("operators")) {
                            listOf = node.getSecond();
                            for (i_11 = 0; i_11 < listOf.children.length; i_11++) {
                                item_2 = listOf.children[i_11];
                                ctx.createOperator(item_2);
                            }
                            ;
                            find_more = false;
                        }
                        if (!(node.isFirstVref("Import") || node.isFirstVref("import"))) return [3 /*break*/, 16];
                        fNameNode_2 = node.children[1];
                        import_file = fNameNode_2.string_value;
                        if ((typeof (ctx.already_imported[import_file]) != "undefined" && ctx.already_imported.hasOwnProperty(import_file))) {
                            return [2 /*return*/];
                        }
                        else {
                            ctx.already_imported[import_file] = true;
                        }
                        envOpt = ctx.getEnv();
                        if (typeof (envOpt) === "undefined") {
                            ctx.addError(node, "Environment not defined");
                            return [2 /*return*/];
                        }
                        env = envOpt;
                        rootCtx = ctx.getRoot();
                        filePathIs = TFiles.searchEnv(env, rootCtx.libraryPaths, import_file);
                        if (operatorsOf_8.filec95exists_9(env, filePathIs, import_file) == false) {
                            ctx.addError(node, "Could not import file " + import_file);
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, operatorsOf_8.readc95file_9(env, filePathIs, import_file)];
                    case 14:
                        c = _a.sent();
                        code = new SourceCode(c);
                        code.filename = import_file;
                        parser = new RangerLispParser(code);
                        parser.parse(ctx.hasCompilerFlag("no-op-transform"));
                        rnode = parser.rootNode;
                        return [4 /*yield*/, this.WalkCollectMethods(rnode, ctx, wr)];
                    case 15:
                        _a.sent();
                        find_more = false;
                        _a.label = 16;
                    case 16:
                        if (node.isFirstVref("does")) {
                            defName = node.getSecond();
                            currC_5 = ctx.currentClass;
                            currC_5.consumes_traits.push(defName.vref);
                            joinPoint = new ClassJoinPoint();
                            joinPoint.class_def = currC_5;
                            joinPoint.node = node;
                            this.classesWithTraits.push(joinPoint);
                        }
                        b_is_main = false;
                        if (node.code.filename == ctx.getRootFile()) {
                            b_is_main = true;
                        }
                        if (!node.isFirstVref("static")) return [3 /*break*/, 19];
                        if (node.chlen() < 5) {
                            ctx.addError(node, "Invalid static function declaration");
                            return [2 /*return*/];
                        }
                        node = this.spliceFunctionBody(4, node, ctx, wr);
                        s_4 = node.getVRefAt(2);
                        if (s_4 == "main") {
                            if (b_is_main) {
                                this.mainCnt = this.mainCnt + 1;
                                if (this.mainCnt > 1) {
                                    ctx.addError(node, "main function can be declared only once");
                                }
                            }
                        }
                        currC_6 = ctx.currentClass;
                        m_1_1 = new RangerAppFunctionDesc();
                        m_1_1.name = s_4;
                        m_1_1.compiledName = ctx.transformWord(s_4);
                        m_1_1.node = node;
                        m_1_1.is_static = true;
                        m_1_1.nameNode = node.children[2];
                        m_1_1.nameNode.ifNoTypeSetToVoid();
                        args_2 = node.children[3];
                        m_1_1.fnBody = node.children[4];
                        return [4 /*yield*/, this.CheckTypeAnnotationOf(m_1_1.nameNode, ctx, wr)];
                    case 17:
                        _a.sent();
                        return [4 /*yield*/, operatorsOf.forEach_15(args_2.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.defineFunctionParam(m_1_1, item, ctx, wr)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 18:
                        _a.sent();
                        currC_6.addStaticMethod(m_1_1);
                        find_more = false;
                        return [2 /*return*/];
                    case 19:
                        if (!(node.isFirstVref("StaticMethod") || node.isFirstVref("sfn"))) return [3 /*break*/, 22];
                        node = this.spliceFunctionBody(3, node, ctx, wr);
                        s_5 = node.getVRefAt(1);
                        currC_7 = ctx.currentClass;
                        m_2_1 = new RangerAppFunctionDesc();
                        m_2_1.name = s_5;
                        m_2_1.compiledName = ctx.transformWord(s_5);
                        m_2_1.node = node;
                        m_2_1.is_static = true;
                        m_2_1.nameNode = node.children[1];
                        m_2_1.nameNode.ifNoTypeSetToVoid();
                        args_3 = node.children[2];
                        m_2_1.fnBody = node.children[3];
                        return [4 /*yield*/, this.CheckTypeAnnotationOf(m_2_1.nameNode, ctx, wr)];
                    case 20:
                        _a.sent();
                        return [4 /*yield*/, operatorsOf.forEach_15(args_3.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.defineFunctionParam(m_2_1, item, ctx, wr)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 21:
                        _a.sent();
                        currC_7.addStaticMethod(m_2_1);
                        find_more = false;
                        if (m_2_1.nameNode.hasFlag("main")) {
                            if (b_is_main) {
                                this.mainCnt = this.mainCnt + 1;
                                if (this.mainCnt > 1) {
                                    ctx.addError(node, "main function can be declared only once");
                                }
                            }
                        }
                        return [2 /*return*/];
                    case 22:
                        if (node.isFirstVref("extension")) {
                            s_6 = node.getVRefAt(1);
                            old_class = ctx.findClass(s_6);
                            ctx.setCurrentClass(old_class);
                        }
                        if (!(node.isFirstVref("PublicMethod") || node.isFirstVref("fn"))) return [3 /*break*/, 24];
                        currC_8 = ctx.currentClass;
                        return [4 /*yield*/, operatorsOf_41.rc46func_43(node, (currC_8.ctx), wr)];
                    case 23:
                        fnObj = _a.sent();
                        cn = fnObj.nameNode;
                        if (currC_8.hasOwnMethod(fnObj.name) && (false == cn.hasFlag("override"))) {
                            ctx.addError(node, "Error: method of same name declared earlier. Overriding function declarations is not currently allowed!");
                            return [2 /*return*/];
                        }
                        if (cn.hasFlag("main")) {
                            ctx.addError(node, "Error: dynamic method declared as @(main). Use static 'sfn' instead of 'fn'.");
                            return [2 /*return*/];
                        }
                        currC_8.addMethod(fnObj);
                        find_more = false;
                        return [2 /*return*/];
                    case 24:
                        if (!find_more) return [3 /*break*/, 29];
                        i_12 = 0;
                        _a.label = 25;
                    case 25:
                        if (!(i_12 < node.children.length)) return [3 /*break*/, 28];
                        item_3 = node.children[i_12];
                        return [4 /*yield*/, this.WalkCollectMethods(item_3, ctx, wr)];
                    case 26:
                        _a.sent();
                        _a.label = 27;
                    case 27:
                        i_12++;
                        return [3 /*break*/, 25];
                    case 28:
                        ;
                        _a.label = 29;
                    case 29:
                        if (node.hasBooleanProperty("serialize")) {
                            this.serializedClasses.push(ctx.currentClass);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.findFunctionDesc = function (obj, ctx, wr) {
        var varDesc;
        var varFnDesc;
        if (obj.vref != this.getThisName()) {
            if ((obj.ns.length) > 1) {
                var cnt = obj.ns.length;
                var classRefDesc = void 0;
                var classDesc = void 0;
                for (var i = 0; i < obj.ns.length; i++) {
                    var strname = obj.ns[i];
                    if (i == 0) {
                        if (strname == this.getThisName()) {
                            classDesc = ctx.getCurrentClass();
                        }
                        else {
                            if (ctx.isDefinedClass(strname)) {
                                classDesc = ctx.findClass(strname);
                                continue;
                            }
                            classRefDesc = ctx.getVariableDef(strname);
                            if ((typeof (classRefDesc) === "undefined") || (typeof (classRefDesc.nameNode) === "undefined")) {
                                ctx.addError(obj, "Error, no description for called object: " + strname);
                                break;
                            }
                            classRefDesc.ref_cnt = 1 + classRefDesc.ref_cnt;
                            classDesc = ctx.findClass(classRefDesc.nameNode.type_name);
                            if (typeof (classDesc) === "undefined") {
                                return varFnDesc;
                            }
                        }
                    }
                    else {
                        if (typeof (classDesc) === "undefined") {
                            return varFnDesc;
                        }
                        if (i < (cnt - 1)) {
                            varDesc = classDesc.findVariable(strname);
                            if (typeof (varDesc) === "undefined") {
                                ctx.addError(obj, "Error, no description for refenced obj: " + strname);
                            }
                            var subClass = varDesc.getTypeName();
                            classDesc = ctx.findClass(subClass);
                            continue;
                        }
                        if ((typeof (classDesc) !== "undefined" && classDesc != null)) {
                            varFnDesc = classDesc.findMethod(strname);
                            if (typeof (varFnDesc) === "undefined") {
                                varFnDesc = classDesc.findStaticMethod(strname);
                                if (typeof (varFnDesc) === "undefined") {
                                    ctx.addError(obj, " function variable not found " + strname);
                                }
                            }
                        }
                    }
                }
                ;
                return varFnDesc;
            }
            var udesc = ctx.getCurrentClass();
            var currClass = udesc;
            varFnDesc = currClass.findMethod(obj.vref);
            if ((typeof (varFnDesc) !== "undefined" && varFnDesc != null)) {
                if ((typeof (varFnDesc.nameNode) !== "undefined" && varFnDesc.nameNode != null)) {
                }
                else {
                    ctx.addError(obj, "Error, no description for called function: " + obj.vref);
                }
            }
            return varFnDesc;
        }
        return varFnDesc;
    };
    ;
    RangerFlowParser.prototype.findParamDesc = function (obj, ctx, wr) {
        var varDesc;
        var set_nsp = false;
        var classDesc;
        if (0 == (obj.nsp.length)) {
            set_nsp = true;
        }
        if (obj.vref != this.getThisName()) {
            if ((obj.ns.length) > 1) {
                var cnt = obj.ns.length;
                var classRefDesc = void 0;
                for (var i = 0; i < obj.ns.length; i++) {
                    var strname = obj.ns[i];
                    if (i == 0) {
                        if (strname == this.getThisName()) {
                            classDesc = ctx.getCurrentClass();
                            if (set_nsp) {
                                obj.nsp.push(classDesc);
                            }
                        }
                        else {
                            if (ctx.isDefinedClass(strname)) {
                                classDesc = ctx.findClass(strname);
                                if (set_nsp) {
                                    obj.nsp.push(classDesc);
                                }
                                continue;
                            }
                            classRefDesc = ctx.getVariableDef(strname);
                            if (typeof (classRefDesc) === "undefined") {
                                ctx.addError(obj, "Error, no description for called object: " + strname);
                                break;
                            }
                            if (set_nsp) {
                                obj.nsp.push(classRefDesc);
                            }
                            if (classRefDesc.nameNode.hasFlag("optional")) {
                                if (ctx.hasCompilerFlag("strict")) {
                                    if (false == ctx.isTryBlock()) {
                                        ctx.addError(obj, "Optional automatically unwrapped outside try block");
                                    }
                                }
                            }
                            classRefDesc.ref_cnt = 1 + classRefDesc.ref_cnt;
                            classDesc = ctx.findClass(classRefDesc.nameNode.type_name);
                        }
                    }
                    else {
                        if (i < (cnt - 1)) {
                            varDesc = classDesc.findVariable(strname);
                            if (i > 0) {
                                if (varDesc.nameNode.hasFlag("optional")) {
                                    if (ctx.hasCompilerFlag("strict")) {
                                        if (false == ctx.isTryBlock()) {
                                            ctx.addError(obj, "Optional automatically unwrapped outside try block");
                                        }
                                    }
                                }
                            }
                            if (typeof (varDesc) === "undefined") {
                                ctx.addError(obj, "Error, no description for refenced obj: " + strname);
                            }
                            var subClass = varDesc.getTypeName();
                            classDesc = ctx.findClass(subClass);
                            if (set_nsp) {
                                obj.nsp.push(varDesc);
                            }
                            continue;
                        }
                        if ((typeof (classDesc) !== "undefined" && classDesc != null)) {
                            varDesc = classDesc.findVariable(strname);
                            if (typeof (varDesc) === "undefined") {
                                var classMethod = classDesc.findMethod(strname);
                                if (typeof (classMethod) === "undefined") {
                                    classMethod = classDesc.findStaticMethod(strname);
                                    if (typeof (classMethod) === "undefined") {
                                        ctx.addError(obj, "variable not found " + strname);
                                    }
                                }
                                if ((typeof (classMethod) !== "undefined" && classMethod != null)) {
                                    if (set_nsp) {
                                        obj.nsp.push(classMethod);
                                    }
                                    return classMethod;
                                }
                            }
                            if (set_nsp) {
                                obj.nsp.push(varDesc);
                            }
                        }
                    }
                }
                ;
                return varDesc;
            }
            varDesc = ctx.getVariableDef(obj.vref);
            if ((typeof (varDesc.nameNode) !== "undefined" && varDesc.nameNode != null)) {
            }
            else {
            }
            return varDesc;
        }
        var cc = ctx.getCurrentClass();
        return cc;
    };
    ;
    RangerFlowParser.prototype.convertToUnion = function (unionName, node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var c1, toEx, toVref, argType, targetNode, wr_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!ctx.isDefinedClass(unionName)) return [3 /*break*/, 2];
                        c1 = ctx.findClass(unionName);
                        if (!c1.is_union) return [3 /*break*/, 2];
                        if (!((node.type_name != c1.name) && (node.eval_type_name != c1.name))) return [3 /*break*/, 2];
                        toEx = node.newExpressionNode();
                        toVref = node.newVRefNode("to");
                        argType = node.newVRefNode("_");
                        targetNode = node.copy();
                        argType.type_name = unionName;
                        (toEx).push(toVref);
                        (toEx).push(argType);
                        (toEx).push(targetNode);
                        node.expression = true;
                        node.flow_done = false;
                        node.value_type = 0;
                        node.getChildrenFrom(toEx);
                        wr_1 = new CodeWriter();
                        return [4 /*yield*/, this.WalkNode(node, ctx, wr_1)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.transformMethodToLambda = function (node, vFnDef, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var args, fnArg, subNode, argsExpr, staticLambda, staticLambda_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!vFnDef.isFunction()) return [3 /*break*/, 2];
                        args = operatorsOf.map_44(vFnDef.params, (function (item, index) {
                            return item.nameNode.copy();
                        }));
                        fnArg = vFnDef.nameNode.copy();
                        fnArg.vref = "fn";
                        subNode = node.copy();
                        subNode.flow_done = false;
                        argsExpr = operatorsOf.map_45(args, (function (item, index) {
                            return item.copy();
                        }));
                        if ((((vFnDef.nameNode.type_name.length) > 0) && (vFnDef.nameNode.type_name != "void")) || ((vFnDef.nameNode.array_type.length) > 0)) {
                            staticLambda = CodeNode.fromList([fnArg, CodeNode.fromList(args), CodeNode.blockFromList([CodeNode.fromList([CodeNode.vref1("return"), CodeNode.fromList([subNode, CodeNode.fromList(argsExpr)])])])]);
                            node.getChildrenFrom(staticLambda);
                        }
                        else {
                            staticLambda_1 = CodeNode.fromList([fnArg, CodeNode.fromList(args), CodeNode.blockFromList([CodeNode.fromList([subNode, CodeNode.fromList(argsExpr)])])]);
                            node.getChildrenFrom(staticLambda_1);
                        }
                        node.flow_done = false;
                        node.expression = true;
                        node.value_type = 0;
                        node.vref = "";
                        return [4 /*yield*/, this.WalkNode(node, ctx, wr)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.areEqualTypes = function (n1, n2, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var n1Expr, n2Expr, opList, newCall_1, newExpr, proto, fc, eParams, pDesc, vFnDef, b_ok, c1, c2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(n1.eval_type == 17)) return [3 /*break*/, 12];
                        n1Expr = n1.expression_value;
                        n2Expr = n2.expression_value;
                        if (typeof (n1Expr) === "undefined") {
                            if ((n1.hasParamDesc && ((typeof (n1.paramDesc.nameNode) !== "undefined" && n1.paramDesc.nameNode != null))) && ((typeof (n1.paramDesc.nameNode.expression_value) !== "undefined" && n1.paramDesc.nameNode.expression_value != null))) {
                                n1Expr = n1.paramDesc.nameNode.expression_value;
                            }
                        }
                        if (typeof (n2Expr) === "undefined") {
                            if ((n2.hasParamDesc && ((typeof (n2.paramDesc.nameNode) !== "undefined" && n2.paramDesc.nameNode != null))) && ((typeof (n2.paramDesc.nameNode.expression_value) !== "undefined" && n2.paramDesc.nameNode.expression_value != null))) {
                                n2Expr = n2.paramDesc.nameNode.expression_value;
                            }
                        }
                        if (!(((typeof (n1Expr) !== "undefined" && n1Expr != null)) && ((typeof (n2Expr) !== "undefined" && n2Expr != null)))) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.matchLambdaArgs((n1Expr), (n2Expr), ctx, new CodeWriter())];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        if (!(typeof (n1Expr) !== "undefined" && n1Expr != null)) return [3 /*break*/, 7];
                        return [4 /*yield*/, ctx.getOpFns(n2.vref)];
                    case 3:
                        opList = _a.sent();
                        if (!((opList.length) > 0)) return [3 /*break*/, 7];
                        newCall_1 = CodeNode.fromList([CodeNode.vref1(n2.vref)]);
                        newExpr = CodeNode.blockNode();
                        proto = n1Expr.copy();
                        fc = proto.children[0];
                        fc.vref = "fn";
                        eParams = n1Expr.children[1];
                        return [4 /*yield*/, operatorsOf.forEach_15(eParams.children, (function (item, index) {
                                newCall_1.children.push(CodeNode.vref1(item.vref));
                            }))];
                    case 4:
                        _a.sent();
                        if (fc.type_name != "void") {
                            newExpr.children.push(CodeNode.fromList([CodeNode.vref1("return"), newCall_1]));
                        }
                        else {
                            newExpr.children.push(newCall_1);
                        }
                        proto.children.push(newExpr);
                        n2.value_type = 0;
                        n2.expression_value = proto.copy();
                        n2.expression = true;
                        n2.flow_done = false;
                        n2.vref = "";
                        n2.ns.length = 0;
                        n2.getChildrenFrom(proto.copy());
                        return [4 /*yield*/, this.WalkNode(n2, ctx, wr)];
                    case 5:
                        _a.sent();
                        n2.expression_value = proto;
                        return [4 /*yield*/, this.areEqualTypes(n1, n2, ctx, wr)];
                    case 6: return [2 /*return*/, _a.sent()];
                    case 7:
                        if (!(n2.eval_type == 28)) return [3 /*break*/, 9];
                        pDesc = (n2.paramDesc);
                        return [4 /*yield*/, this.transformMethodToLambda(n2, pDesc, ctx, wr)];
                    case 8:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 9:
                        vFnDef = this.findFunctionDesc(n2, ctx, wr);
                        if (!(typeof (vFnDef) !== "undefined" && vFnDef != null)) return [3 /*break*/, 11];
                        return [4 /*yield*/, this.transformMethodToLambda(n2, vFnDef, ctx, wr)];
                    case 10:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 11:
                        ctx.addError(n2, "Was not able to evaluate lambda expression types!");
                        if ((typeof (n1Expr) !== "undefined" && n1Expr != null)) {
                            ctx.addError(n1, "^ " + n1Expr.getCode());
                        }
                        else {
                            ctx.addError(n1, "^ expression_value not found (1)");
                        }
                        if ((typeof (n2Expr) !== "undefined" && n2Expr != null)) {
                            ctx.addError(n2, "^ " + n2Expr.getCode());
                        }
                        else {
                            ctx.addError(n2, "^ expression_value not found (2)");
                        }
                        return [2 /*return*/, false];
                    case 12:
                        if (!((((n1.eval_type != 0) && (n2.eval_type != 0)) && ((n1.eval_type_name.length) > 0)) && ((n2.eval_type_name.length) > 0))) return [3 /*break*/, 19];
                        if (!(n1.eval_type_name == n2.eval_type_name)) return [3 /*break*/, 13];
                        return [3 /*break*/, 19];
                    case 13:
                        b_ok = false;
                        if (ctx.isEnumDefined(n1.eval_type_name) && (n2.eval_type_name == "int")) {
                            b_ok = true;
                        }
                        if (ctx.isEnumDefined(n2.eval_type_name) && (n1.eval_type_name == "int")) {
                            b_ok = true;
                        }
                        if ((n1.eval_type_name == "char") && (n2.eval_type_name == "int")) {
                            b_ok = true;
                        }
                        if ((n1.eval_type_name == "int") && (n2.eval_type_name == "char")) {
                            b_ok = true;
                        }
                        if (!(ctx.isDefinedClass(n1.eval_type_name) && ctx.isDefinedClass(n2.eval_type_name))) return [3 /*break*/, 16];
                        c1 = ctx.findClass(n1.eval_type_name);
                        c2 = ctx.findClass(n2.eval_type_name);
                        if (!c1.is_union) return [3 /*break*/, 15];
                        if (!(c2.is_union == false)) return [3 /*break*/, 15];
                        return [4 /*yield*/, this.convertToUnion(n1.eval_type_name, n2, ctx, new CodeWriter())];
                    case 14:
                        _a.sent();
                        if (n2.eval_type_name == n1.eval_type_name) {
                            return [2 /*return*/, true];
                        }
                        else {
                            return [2 /*return*/, false];
                        }
                        _a.label = 15;
                    case 15:
                        if (c2.is_union != c1.is_union) {
                            ctx.addError(n1, "Can not convert union to type ");
                            return [2 /*return*/, false];
                        }
                        if ((c2.is_union == true) && (c1.is_union == true)) {
                            ctx.addError(n1, (("Union types must be the same =>  " + n1.eval_type_name) + " <> ") + n2.eval_type_name);
                            return [2 /*return*/, false];
                        }
                        if (c1.isSameOrParentClass(n2.eval_type_name, ctx)) {
                            return [2 /*return*/, true];
                        }
                        if (c2.isSameOrParentClass(n1.eval_type_name, ctx)) {
                            return [2 /*return*/, true];
                        }
                        _a.label = 16;
                    case 16:
                        if (!(b_ok == false)) return [3 /*break*/, 19];
                        if (!(n1.eval_type_name == "Any")) return [3 /*break*/, 18];
                        return [4 /*yield*/, this.convertToUnion("Any", n2, ctx, new CodeWriter())];
                    case 17:
                        _a.sent();
                        if (n2.eval_type_name == n1.eval_type_name) {
                            return [2 /*return*/, true];
                        }
                        else {
                            return [2 /*return*/, false];
                        }
                        _a.label = 18;
                    case 18: return [2 /*return*/, false];
                    case 19: return [2 /*return*/, true];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.shouldBeEqualTypes = function (n1, n2, ctx, msg) {
        if ((((n1.eval_type != 0) && (n2.eval_type != 0)) && ((n1.eval_type_name.length) > 0)) && ((n2.eval_type_name.length) > 0)) {
            if (n1.eval_type_name == n2.eval_type_name) {
            }
            else {
                var b_ok = false;
                if (ctx.isEnumDefined(n1.eval_type_name) && (n2.eval_type_name == "int")) {
                    b_ok = true;
                }
                if (ctx.isEnumDefined(n2.eval_type_name) && (n1.eval_type_name == "int")) {
                    b_ok = true;
                }
                if (ctx.isDefinedClass(n2.eval_type_name)) {
                    var cc = ctx.findClass(n2.eval_type_name);
                    if (cc.isSameOrParentClass(n1.eval_type_name, ctx)) {
                        b_ok = true;
                    }
                }
                if ((n1.eval_type_name == "char") && (n2.eval_type_name == "int")) {
                    b_ok = true;
                }
                if ((n1.eval_type_name == "int") && (n2.eval_type_name == "char")) {
                    b_ok = true;
                }
                if (b_ok == false) {
                    ctx.addError(n1, (((("Type mismatch " + n2.eval_type_name) + " <> ") + n1.eval_type_name) + ". ") + msg);
                }
            }
        }
    };
    ;
    RangerFlowParser.prototype.shouldBeExpression = function (n1, ctx, msg) {
        if (n1.expression == false) {
            ctx.addError(n1, msg);
        }
    };
    ;
    RangerFlowParser.prototype.shouldHaveChildCnt = function (cnt, n1, ctx, msg) {
        if ((n1.children.length) != cnt) {
            ctx.addError(n1, msg);
        }
    };
    ;
    RangerFlowParser.prototype.findLanguageOper = function (details, ctx, opDef) {
        return __awaiter(this, void 0, void 0, function () {
            var langName, rv, _loop_3, det, tpl, i, state_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        langName = operatorsOf_21.getTargetLang_22(ctx);
                        _loop_3 = function (i) {
                            var fc, tplList, _loop_4, i_1, state_2, opNameNode, opArgs, rangerTpl_1, cnt_2;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        det = details.children[i];
                                        if (!((det.children.length) > 0)) return [3 /*break*/, 6];
                                        fc = det.children[0];
                                        if (!(fc.vref == "templates")) return [3 /*break*/, 6];
                                        tplList = det.children[1];
                                        _loop_4 = function (i_1) {
                                            var flagList, b_matched_1, tplName, is_ts;
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0:
                                                        tpl = tplList.children[i_1];
                                                        if (!tpl.hasExpressionProperty("flags")) return [3 /*break*/, 2];
                                                        flagList = tpl.getExpressionProperty("flags");
                                                        b_matched_1 = false;
                                                        return [4 /*yield*/, operatorsOf.forEach_15(flagList.children, (function (item, index) {
                                                                console.log("FLAG " + item.vref);
                                                                b_matched_1 = b_matched_1 || ctx.hasCompilerFlag(item.vref);
                                                            }))];
                                                    case 1:
                                                        _a.sent();
                                                        if (b_matched_1 == false) {
                                                            return [2 /*return*/, "continue"];
                                                        }
                                                        _a.label = 2;
                                                    case 2:
                                                        tplName = tpl.getFirst();
                                                        is_ts = ctx.hasCompilerFlag("typescript");
                                                        if (is_ts && ((tplName.vref == "typescript") || (tplName.vref == "ts"))) {
                                                            rv = tpl;
                                                            return [2 /*return*/, { value: rv }];
                                                        }
                                                        if ((tplName.vref != "*") && (tplName.vref != langName)) {
                                                            return [2 /*return*/, "continue"];
                                                        }
                                                        rv = tpl;
                                                        return [2 /*return*/, { value: rv }];
                                                }
                                            });
                                        };
                                        i_1 = 0;
                                        _a.label = 1;
                                    case 1:
                                        if (!(i_1 < tplList.children.length)) return [3 /*break*/, 4];
                                        return [5 /*yield**/, _loop_4(i_1)];
                                    case 2:
                                        state_2 = _a.sent();
                                        if (typeof state_2 === "object")
                                            return [2 /*return*/, state_2];
                                        _a.label = 3;
                                    case 3:
                                        i_1++;
                                        return [3 /*break*/, 1];
                                    case 4:
                                        ;
                                        if (!(langName == "ranger")) return [3 /*break*/, 6];
                                        opNameNode = opDef.getFirst();
                                        opArgs = opDef.getThird();
                                        rangerTpl_1 = CodeNode.fromList([CodeNode.newStr((("(" + opNameNode.vref) + " "))]);
                                        cnt_2 = 1;
                                        return [4 /*yield*/, operatorsOf.forEach_15(opArgs.children, (function (item, index) {
                                                if (item.type_name == "block") {
                                                    rangerTpl_1.children.push(CodeNode.fromList([CodeNode.vref1("block"), CodeNode.newInt(cnt_2)]));
                                                }
                                                else {
                                                    rangerTpl_1.children.push(CodeNode.fromList([CodeNode.vref1("e"), CodeNode.newInt(cnt_2)]));
                                                }
                                                cnt_2 = cnt_2 + 1;
                                            }))];
                                    case 5:
                                        _a.sent();
                                        rangerTpl_1.children.push(CodeNode.newStr(")"));
                                        rv = CodeNode.fromList([CodeNode.vref1("ranger"), rangerTpl_1]);
                                        _a.label = 6;
                                    case 6: return [2 /*return*/];
                                }
                            });
                        };
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < details.children.length)) return [3 /*break*/, 4];
                        return [5 /*yield**/, _loop_3(i)];
                    case 2:
                        state_1 = _a.sent();
                        if (typeof state_1 === "object")
                            return [2 /*return*/, state_1.value];
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        return [2 /*return*/, rv];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.buildMacro = function (langOper, args, ctx) {
        return __awaiter(this, void 0, void 0, function () {
            var subCtx, wr, lcc, macroNode, cmdList, lang_str, lang_code, lang_parser, node;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        subCtx = ctx.fork();
                        wr = new CodeWriter();
                        lcc = new LiveCompiler();
                        lcc.langWriter = new RangerRangerClassWriter();
                        lcc.langWriter.compiler = lcc;
                        subCtx.targetLangName = "ranger";
                        subCtx.restartExpressionLevel();
                        macroNode = langOper;
                        cmdList = macroNode.getSecond();
                        if (ctx.hasCompilerFlag("show-macros")) {
                            console.log((("Building macro " + macroNode.vref) + " : ") + cmdList.getCode());
                            console.log("Arguments : " + args.getCode());
                        }
                        return [4 /*yield*/, lcc.walkCommandList(cmdList, args, subCtx, wr)];
                    case 1:
                        _a.sent();
                        lang_str = wr.getCode();
                        lang_code = new SourceCode(lang_str);
                        lang_code.filename = ("<macro " + macroNode.vref) + ">";
                        lang_parser = new RangerLispParser(lang_code);
                        lang_parser.parse(ctx.hasCompilerFlag("no-op-transform"));
                        node = lang_parser.rootNode;
                        if ((args.register_expressions.length) > 0) {
                            node.register_expressions = operatorsOf.clone_46(args.register_expressions);
                        }
                        return [4 /*yield*/, operatorsOf.forEach_15(args.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, operatorsOf.forEach_15(item.register_expressions, (function (item, index) {
                                                var re = item;
                                                node.register_expressions.push(re);
                                            }))];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, node];
                }
            });
        });
    };
    ;
    RangerFlowParser.prototype.stdParamMatch = function (callArgs, inCtx, wr, require_all_match) {
        return __awaiter(this, void 0, void 0, function () {
            var callFnName, some_matched, added_ns, ctx, expects_error, err_cnt, arg_eval_start, call_arg_cnt, op_list, _loop_5, this_2, ch, arg, caCh, b, later_1, ch_1, v, n, ca_1, ca_2, arg_3, ann_1, main_index, state_3, cnt_now, cnt_now_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.stdCommands = inCtx.getStdCommands();
                        callFnName = callArgs.getFirst();
                        some_matched = false;
                        added_ns = "";
                        ctx = inCtx.fork();
                        expects_error = false;
                        err_cnt = inCtx.getErrorCount();
                        arg_eval_start = 0;
                        if (callArgs.hasBooleanProperty("error")) {
                            expects_error = true;
                        }
                        if (inCtx.expressionLevel() == 0) {
                            inCtx.lastBlockOp = callArgs;
                        }
                        else {
                        }
                        call_arg_cnt = callArgs.children.length;
                        return [4 /*yield*/, ctx.getOperators(callFnName.vref)];
                    case 1:
                        op_list = _a.sent();
                        _loop_5 = function (main_index) {
                            var fc, nameNode, args, callerArgCnt, fnArgCnt, has_eval_ctx, is_macro, plugin_name, plugin_fn, is_plugin, is_pure, is_static_fn, static_fn_name, static_class_name, static_nameNode, throws_exception, is_async, expanding_node, details_list, langOper, pluginFn, codeDef, match, last_walked, last_was_block, walk_later, not_enough_args, blocksToWalkLater, flagList, b_matched_2, i, callArg, p, opList, signature, later, tmpCtx, tmpCtx_1, propC, currC, i2, tmpCtx_2, sCtx, all_matched, expr_level, is_last, thenBlock, lastRow, BlockOP, regName, regExpr, fnC, realRegName, then_regs, newLastRow, vCopy, elseBlock, lastRow_1, newLastRow_1, vCopy_1, tmp, opDef, opCnts_1, regNames_1, firstRef_1, activeFn, activeFn_1, i_1, localFork, i_2, ca, aa, fnDef, copyOf, ffc, itemCopy, cnt, i_3, sCtx_1, staticMethod_1, pure_transform, argDefs, bodyStart, newCtx, bodyCopy, nSig, arg0, new_cl, bodyCopy_1, argsCopy, nameCopy, sigN, argsSig, sMethod, currM, fCtx, m, i_4, i_5, p_1, defNode, nNode, sMethod_1, currM_1, firstArg, newArgs, i_6, arg_2, arg_len, i_7, fileName, plugin, e_8, macroNode, arg_len_1, moves_opt, moves, ann, from, toItem, cA, cA2, pp, pp2, activeFn_2, returnedValue, validated_returnvalue, fnExpr, rExpr, rExpr_1, argNode, pp_1, tmpCtx_3, nodeP, arg_index, anns, i_8, theArg;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        ch = op_list[main_index];
                                        fc = ch.getFirst();
                                        nameNode = ch.getSecond();
                                        args = ch.getThird();
                                        if (inCtx.isVarDefined(fc.vref)) {
                                            return [2 /*return*/, { value: false }];
                                        }
                                        ctx.removeOpNs(added_ns);
                                        ctx.addOpNs(fc.vref);
                                        added_ns = fc.vref;
                                        callerArgCnt = call_arg_cnt - 1;
                                        fnArgCnt = args.children.length;
                                        has_eval_ctx = false;
                                        is_macro = false;
                                        plugin_name = "operator";
                                        plugin_fn = "";
                                        is_plugin = false;
                                        is_pure = false;
                                        is_static_fn = false;
                                        static_fn_name = "";
                                        static_class_name = "";
                                        static_nameNode = void 0;
                                        if (nameNode.hasFlag("newcontext")) {
                                            ctx = inCtx.fork();
                                            has_eval_ctx = true;
                                        }
                                        throws_exception = nameNode.hasFlag("throws");
                                        is_async = nameNode.hasFlag("async");
                                        expanding_node = nameNode.hasFlag("expands");
                                        if (!((callerArgCnt == fnArgCnt) || expanding_node)) return [3 /*break*/, 80];
                                        details_list = ch.children[3];
                                        return [4 /*yield*/, this_2.findLanguageOper(details_list, ctx, ch)];
                                    case 1:
                                        langOper = _a.sent();
                                        if (typeof (langOper) === "undefined") {
                                            return [2 /*return*/, "continue"];
                                        }
                                        is_pure = nameNode.hasFlag("pure");
                                        if (langOper.hasBooleanProperty("macro") || nameNode.hasFlag("macro")) {
                                            is_macro = true;
                                        }
                                        if (langOper.hasStringProperty("plugin")) {
                                            plugin_name = langOper.getStringProperty("plugin");
                                            is_plugin = true;
                                            pluginFn = langOper.getStringProperty("fn");
                                            if ((pluginFn.length) > 0) {
                                                plugin_fn = pluginFn;
                                                console.log("Function : " + plugin_fn);
                                            }
                                        }
                                        codeDef = langOper.getSecond();
                                        match = new RangerArgMatch();
                                        last_walked = 0;
                                        last_was_block = false;
                                        walk_later = [];
                                        not_enough_args = false;
                                        blocksToWalkLater = [];
                                        if (!ch.hasExpressionProperty("flags")) return [3 /*break*/, 3];
                                        flagList = ch.getExpressionProperty("flags");
                                        b_matched_2 = false;
                                        return [4 /*yield*/, operatorsOf.forEach_15(flagList.children, (function (item, index) {
                                                b_matched_2 = b_matched_2 || ctx.hasCompilerFlag(item.vref);
                                            }))];
                                    case 2:
                                        _a.sent();
                                        if (b_matched_2 == false) {
                                            return [2 /*return*/, "continue"];
                                        }
                                        _a.label = 3;
                                    case 3:
                                        ctx.setInExpr();
                                        i = 0;
                                        _a.label = 4;
                                    case 4:
                                        if (!(i < args.children.length)) return [3 /*break*/, 17];
                                        arg = args.children[i];
                                        if (i < arg_eval_start) {
                                            return [3 /*break*/, 16];
                                        }
                                        arg_eval_start = i;
                                        if ((callArgs.children.length) <= (i + 1)) {
                                            not_enough_args = true;
                                            return [3 /*break*/, 17];
                                        }
                                        callArg = callArgs.children[(i + 1)];
                                        if (arg.hasFlag("define")) {
                                            p = new RangerAppParamDesc();
                                            p.name = callArg.vref;
                                            p.value_type = arg.value_type;
                                            p.node = callArg;
                                            p.nameNode = callArg;
                                            p.is_optional = false;
                                            p.init_cnt = 1;
                                            ctx.defineVariable(p.name, p);
                                            callArg.hasParamDesc = true;
                                            callArg.ownParamDesc = p;
                                            callArg.paramDesc = p;
                                            if ((callArg.type_name.length) == 0) {
                                                callArg.type_name = arg.type_name;
                                                callArg.value_type = arg.value_type;
                                            }
                                            callArg.eval_type = arg.value_type;
                                            callArg.eval_type_name = arg.type_name;
                                        }
                                        if (arg.hasFlag("ignore")) {
                                            return [3 /*break*/, 16];
                                        }
                                        if (arg.hasFlag("keyword")) {
                                            if (callArg.vref != arg.vref) {
                                                not_enough_args = true;
                                            }
                                            return [3 /*break*/, 16];
                                        }
                                        if (arg.hasFlag("noeval")) {
                                            callArg.eval_type = callArg.value_type;
                                            callArg.eval_type_name = callArg.type_name;
                                            callArg.eval_array_type = callArg.array_type;
                                            callArg.eval_key_type = callArg.key_type;
                                            return [3 /*break*/, 16];
                                        }
                                        last_walked = i + 1;
                                        if (!(arg.value_type == 17)) return [3 /*break*/, 6];
                                        return [4 /*yield*/, ctx.getOpFns(callArg.vref)];
                                    case 5:
                                        opList = _a.sent();
                                        if ((opList.length) > 0) {
                                            signature = arg.expression_value.copy();
                                            /** unused:  const params : CodeNode  = signature.children[1]   **/
                                        }
                                        if (codeDef.is_block_node == false) {
                                            later = new WalkLater();
                                            later.arg = arg;
                                            later.callArg = callArg;
                                            walk_later.push(later);
                                        }
                                        return [3 /*break*/, 16];
                                    case 6:
                                        if (!((arg.type_name == "block") || arg.hasFlag("block"))) return [3 /*break*/, 11];
                                        if (!arg.hasFlag("try_block")) return [3 /*break*/, 8];
                                        tmpCtx = ctx.fork();
                                        tmpCtx.is_try_block = true;
                                        callArg.evalCtx = tmpCtx;
                                        tmpCtx.newBlock();
                                        return [4 /*yield*/, this_2.WalkNode(callArg, tmpCtx, wr)];
                                    case 7:
                                        _a.sent();
                                        return [3 /*break*/, 10];
                                    case 8:
                                        tmpCtx_1 = ctx.fork();
                                        tmpCtx_1.newBlock();
                                        callArg.evalCtx = tmpCtx_1;
                                        return [4 /*yield*/, this_2.WalkNode(callArg, tmpCtx_1, wr)];
                                    case 9:
                                        _a.sent();
                                        _a.label = 10;
                                    case 10:
                                        last_was_block = true;
                                        return [3 /*break*/, 15];
                                    case 11:
                                        ctx.setInExpr();
                                        return [4 /*yield*/, this_2.WalkNode(callArg, ctx, wr)];
                                    case 12:
                                        _a.sent();
                                        ctx.unsetInExpr();
                                        if (!((arg.type_name.length) > 0)) return [3 /*break*/, 14];
                                        return [4 /*yield*/, this_2.convertToUnion(arg.type_name, callArg, ctx, wr)];
                                    case 13:
                                        _a.sent();
                                        _a.label = 14;
                                    case 14:
                                        last_was_block = false;
                                        _a.label = 15;
                                    case 15:
                                        if (arg.hasFlag("mutates")) {
                                            if (callArg.hasParamDesc) {
                                                if (typeof (callArg.paramDesc) != "undefined" && ((typeof (callArg.paramDesc.propertyClass) !== "undefined" && callArg.paramDesc.propertyClass != null))) {
                                                    if (callArg.paramDesc.propertyClass.nameNode.hasFlag("immutable")) {
                                                        propC = callArg.paramDesc.propertyClass;
                                                        currC = ctx.getCurrentClass();
                                                        if ((currC) != (propC)) {
                                                            not_enough_args = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _a.label = 16;
                                    case 16:
                                        i++;
                                        return [3 /*break*/, 4];
                                    case 17:
                                        ;
                                        ctx.unsetInExpr();
                                        if (not_enough_args) {
                                            return [2 /*return*/, "continue"];
                                        }
                                        if (!expanding_node) return [3 /*break*/, 24];
                                        i2 = 0;
                                        _a.label = 18;
                                    case 18:
                                        if (!(i2 < callArgs.children.length)) return [3 /*break*/, 23];
                                        caCh = callArgs.children[i2];
                                        if (caCh.is_block_node) {
                                            tmpCtx_2 = ctx;
                                            caCh.evalCtx = tmpCtx_2;
                                            blocksToWalkLater.push(caCh);
                                            return [3 /*break*/, 22];
                                        }
                                        if (!(i2 > last_walked)) return [3 /*break*/, 22];
                                        if (!last_was_block) return [3 /*break*/, 20];
                                        sCtx = ctx.forkWithOps((ch.children[3]));
                                        return [4 /*yield*/, this_2.WalkNode(caCh, sCtx, wr)];
                                    case 19:
                                        _a.sent();
                                        return [3 /*break*/, 22];
                                    case 20:
                                        ctx.setInExpr();
                                        return [4 /*yield*/, this_2.WalkNode(caCh, ctx, wr)];
                                    case 21:
                                        _a.sent();
                                        ctx.unsetInExpr();
                                        _a.label = 22;
                                    case 22:
                                        i2++;
                                        return [3 /*break*/, 18];
                                    case 23:
                                        ;
                                        _a.label = 24;
                                    case 24:
                                        all_matched = match.matchArguments(args, callArgs, ctx, 1);
                                        if (!all_matched) return [3 /*break*/, 39];
                                        expr_level = ctx.expressionLevel();
                                        is_last = false;
                                        if ((typeof (callArgs.parent) !== "undefined" && callArgs.parent != null)) {
                                            is_last = (callArgs.parent.children.length) == (1 + (callArgs.parent.children.indexOf(callArgs)));
                                        }
                                        if (!(((fc.vref == "if") && ctx.hasCompilerFlag("voidexpr")) && ((expr_level > 0) || is_last))) return [3 /*break*/, 36];
                                        console.log("IF expr leve == " + ctx.expressionLevel());
                                        console.log(callArgs.getCode());
                                        thenBlock = callArgs.children[2];
                                        lastRow = thenBlock.children[((thenBlock.children.length) - 1)];
                                        console.log("Last row == " + lastRow.getCode());
                                        BlockOP = ctx.getLastBlockOp();
                                        regName = ctx.createNewRegName();
                                        regExpr = CodeNode.fromList([CodeNode.vref1("def"), CodeNode.vref2(regName, lastRow.eval_type_name)]);
                                        callArgs.eval_type = lastRow.eval_type;
                                        callArgs.eval_type_name = lastRow.eval_type_name;
                                        fnC = ctx.findFunctionCtx();
                                        return [4 /*yield*/, this_2.WalkNode(regExpr, fnC, wr)];
                                    case 25:
                                        _a.sent();
                                        realRegName = (((regExpr.children[1])).paramDesc).compiledName;
                                        then_regs = false;
                                        if (!((lastRow.register_name.length) > 0)) return [3 /*break*/, 27];
                                        newLastRow = CodeNode.fromList([CodeNode.vref1("="), CodeNode.vref1(regName), CodeNode.vref1(lastRow.register_name)]);
                                        return [4 /*yield*/, this_2.WalkNode(newLastRow, ctx, wr)];
                                    case 26:
                                        _a.sent();
                                        thenBlock.children.push(newLastRow);
                                        then_regs = true;
                                        return [3 /*break*/, 30];
                                    case 27: return [4 /*yield*/, lastRow.cleanCopy()];
                                    case 28:
                                        vCopy = _a.sent();
                                        lastRow.expression = true;
                                        lastRow.vref = "";
                                        lastRow.value_type = 0;
                                        lastRow.flow_done = false;
                                        lastRow.getChildrenFrom(CodeNode.fromList([CodeNode.vref1("="), CodeNode.vref1(regName), vCopy]));
                                        return [4 /*yield*/, this_2.WalkNode(lastRow, ctx, wr)];
                                    case 29:
                                        _a.sent();
                                        _a.label = 30;
                                    case 30:
                                        if (!((callArgs.children.length) == 4)) return [3 /*break*/, 35];
                                        elseBlock = callArgs.children[3];
                                        lastRow_1 = elseBlock.children[((elseBlock.children.length) - 1)];
                                        if (!((lastRow_1.register_name.length) > 0)) return [3 /*break*/, 32];
                                        newLastRow_1 = CodeNode.fromList([CodeNode.vref1("="), CodeNode.vref1(regName), CodeNode.vref1(lastRow_1.register_name)]);
                                        return [4 /*yield*/, this_2.WalkNode(newLastRow_1, ctx, wr)];
                                    case 31:
                                        _a.sent();
                                        elseBlock.children.push(newLastRow_1);
                                        then_regs = true;
                                        return [3 /*break*/, 35];
                                    case 32: return [4 /*yield*/, lastRow_1.cleanCopy()];
                                    case 33:
                                        vCopy_1 = _a.sent();
                                        lastRow_1.expression = true;
                                        lastRow_1.vref = "";
                                        lastRow_1.value_type = 0;
                                        lastRow_1.flow_done = false;
                                        lastRow_1.getChildrenFrom(CodeNode.fromList([CodeNode.vref1("="), CodeNode.vref1(regName), vCopy_1]));
                                        console.log(" lastRow value --> " + vCopy_1.getCode());
                                        return [4 /*yield*/, this_2.WalkNode(lastRow_1, ctx, wr)];
                                    case 34:
                                        _a.sent();
                                        _a.label = 35;
                                    case 35:
                                        tmp = (callArgs).clone();
                                        BlockOP.register_expressions.push(regExpr);
                                        BlockOP.register_expressions.push(tmp);
                                        callArgs.register_name = regName;
                                        callArgs.reg_compiled_name = realRegName;
                                        tmp.has_operator = true;
                                        tmp.op_index = main_index;
                                        tmp.operator_node = ch;
                                        return [2 /*return*/, { value: true }];
                                    case 36:
                                        if (!((fc.vref != "for") && ctx.hasCompilerFlag("new"))) return [3 /*break*/, 39];
                                        opDef = langOper.getSecond();
                                        opCnts_1 = {};
                                        regNames_1 = {};
                                        firstRef_1 = {};
                                        return [4 /*yield*/, operatorsOf.forEach_15(args.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                                var opArg, loopBlock_1, opName, regName_1_1, realArg_2, argCopy, regExpr_1, realRegName_1, regArg, BlockOP_1;
                                                var _this = this;
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0:
                                                            opArg = item;
                                                            if (!opArg.hasFlag("loopcondition")) return [3 /*break*/, 4];
                                                            return [4 /*yield*/, operatorsOf.forEach_15(args.children, (function (item, index) {
                                                                    if (item.hasFlag("loopblock")) {
                                                                        var tmp_1 = callArgs.children[(index + 1)];
                                                                        loopBlock_1 = tmp_1;
                                                                    }
                                                                }))];
                                                        case 1:
                                                            _a.sent();
                                                            if (typeof (loopBlock_1) === "undefined") {
                                                                ctx.addError(args, "Invalid operator: Loop condition without block ");
                                                                return [2 /*return*/];
                                                            }
                                                            opName = index + 1;
                                                            regName_1_1 = "";
                                                            realArg_2 = callArgs.children[opName];
                                                            if ((realArg_2.register_name.length) > 0) {
                                                                regName_1_1 = realArg_2.register_name;
                                                            }
                                                            else {
                                                                regName_1_1 = ctx.createNewRegName();
                                                            }
                                                            argCopy = realArg_2.copy();
                                                            regExpr_1 = CodeNode.fromList([CodeNode.vref1("def"), CodeNode.vref1(regName_1_1), argCopy]);
                                                            ctx.lastBlockOp = callArgs;
                                                            return [4 /*yield*/, this.WalkNode(regExpr_1, ctx, wr)];
                                                        case 2:
                                                            _a.sent();
                                                            realRegName_1 = (((regExpr_1.children[1])).paramDesc).compiledName;
                                                            regArg = regExpr_1.children[1];
                                                            regArg.paramDesc.set_cnt = 1;
                                                            regArg.paramDesc.ref_cnt = 1;
                                                            BlockOP_1 = ctx.getLastBlockOp();
                                                            BlockOP_1.register_expressions.push(regExpr_1);
                                                            realArg_2.register_name = regName_1_1;
                                                            realArg_2.reg_compiled_name = realRegName_1;
                                                            return [4 /*yield*/, operatorsOf.forEach_15(callArgs.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                                                    var argCopy_1, eval_expr;
                                                                    return __generator(this, function (_a) {
                                                                        switch (_a.label) {
                                                                            case 0:
                                                                                if (!item.is_block_node) return [3 /*break*/, 3];
                                                                                argCopy_1 = realArg_2.copy();
                                                                                argCopy_1.register_name = "";
                                                                                return [4 /*yield*/, argCopy_1.forTree((function (item, i) {
                                                                                        item.register_name = "";
                                                                                    }))];
                                                                            case 1:
                                                                                _a.sent();
                                                                                eval_expr = CodeNode.fromList([CodeNode.vref1("="), CodeNode.vref1(regName_1_1), argCopy_1]);
                                                                                /** unused:  const lastOp : CodeNode  = loopBlock.children[((loopBlock.children.length) - 1)]   **/
                                                                                ctx.lastBlockOp = eval_expr;
                                                                                return [4 /*yield*/, this.WalkNode(eval_expr, ctx, wr)];
                                                                            case 2:
                                                                                _a.sent();
                                                                                item.children.push(eval_expr);
                                                                                _a.label = 3;
                                                                            case 3: return [2 /*return*/];
                                                                        }
                                                                    });
                                                                }); }))];
                                                        case 3:
                                                            _a.sent();
                                                            _a.label = 4;
                                                        case 4: return [2 /*return*/];
                                                    }
                                                });
                                            }); }))];
                                    case 37:
                                        _a.sent();
                                        return [4 /*yield*/, operatorsOf.forEach_15(opDef.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                                var opName_1, regName_2, realArg_1, just_vref_1, argCopy_2, regExpr_2, regArg_1, realRegName_2, BlockOP_2;
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0:
                                                            if (!item.isFirstVref("e")) return [3 /*break*/, 7];
                                                            if (item.hasFlag("ignore") || item.hasFlag("noeval")) {
                                                                return [2 /*return*/];
                                                            }
                                                            opName_1 = (item.getSecond()).int_value;
                                                            if (!(typeof (opCnts_1[opName_1]) != "undefined" && opCnts_1.hasOwnProperty(opName_1))) return [3 /*break*/, 6];
                                                            regName_2 = "";
                                                            realArg_1 = callArgs.children[opName_1];
                                                            just_vref_1 = (function (a) {
                                                                return false;
                                                            });
                                                            just_vref_1 = (function (a) {
                                                                if ((a.vref.length) > 0) {
                                                                    return true;
                                                                }
                                                                if (TTypes.isPrimitive(a.value_type)) {
                                                                    return true;
                                                                }
                                                                if ((a.children.length) == 1) {
                                                                    return just_vref_1((a.children[0]));
                                                                }
                                                                return false;
                                                            });
                                                            return [4 /*yield*/, just_vref_1(realArg_1)];
                                                        case 1:
                                                            if (_a.sent()) {
                                                                return [2 /*return*/];
                                                            }
                                                            if (!(typeof (regNames_1[opName_1]) != "undefined" && regNames_1.hasOwnProperty(opName_1))) return [3 /*break*/, 2];
                                                            if ((realArg_1.register_name.length) > 0) {
                                                                regName_2 = realArg_1.register_name;
                                                            }
                                                            else {
                                                                regName_2 = (regNames_1[opName_1]);
                                                            }
                                                            realArg_1.register_name = regName_2;
                                                            return [3 /*break*/, 5];
                                                        case 2:
                                                            if (!((realArg_1.register_name.length) > 0)) return [3 /*break*/, 3];
                                                            regName_2 = realArg_1.register_name;
                                                            return [3 /*break*/, 5];
                                                        case 3:
                                                            regName_2 = ctx.createNewRegName();
                                                            regNames_1[opName_1] = regName_2;
                                                            argCopy_2 = realArg_1.copy();
                                                            regExpr_2 = CodeNode.fromList([CodeNode.vref1("def"), CodeNode.vref1(regName_2), argCopy_2]);
                                                            return [4 /*yield*/, this.WalkNode(regExpr_2, ctx, wr)];
                                                        case 4:
                                                            _a.sent();
                                                            regArg_1 = regExpr_2.children[1];
                                                            realRegName_2 = (((regExpr_2.children[1])).paramDesc).compiledName;
                                                            regArg_1.paramDesc.set_cnt = 1;
                                                            regArg_1.paramDesc.ref_cnt = 1;
                                                            BlockOP_2 = ctx.getLastBlockOp();
                                                            BlockOP_2.register_expressions.push(regExpr_2);
                                                            realArg_1.register_name = regName_2;
                                                            realArg_1.reg_compiled_name = realRegName_2;
                                                            _a.label = 5;
                                                        case 5: return [3 /*break*/, 7];
                                                        case 6:
                                                            opCnts_1[opName_1] = 1;
                                                            firstRef_1[opName_1] = item;
                                                            _a.label = 7;
                                                        case 7: return [2 /*return*/];
                                                    }
                                                });
                                            }); }))];
                                    case 38:
                                        _a.sent();
                                        _a.label = 39;
                                    case 39:
                                        if (!all_matched) return [3 /*break*/, 48];
                                        if (is_async) {
                                            activeFn = ctx.getCurrentMethod();
                                            if ((typeof (activeFn.nameNode) !== "undefined" && activeFn.nameNode != null)) {
                                                activeFn.nameNode.setFlag("async");
                                            }
                                            while ((typeof (activeFn.insideFn) !== "undefined" && activeFn.insideFn != null)) {
                                                activeFn = activeFn.insideFn;
                                                if ((typeof (activeFn.nameNode) !== "undefined" && activeFn.nameNode != null)) {
                                                    activeFn.nameNode.setFlag("async");
                                                }
                                            }
                                            ;
                                        }
                                        if (throws_exception) {
                                            if (false == ctx.isTryBlock()) {
                                                activeFn_1 = ctx.getCurrentMethod();
                                                if (((typeof (activeFn_1.nameNode) !== "undefined" && activeFn_1.nameNode != null)) && activeFn_1.nameNode.hasFlag("throws")) {
                                                }
                                                else {
                                                    ctx.addError(callArgs, ("The operator " + fc.vref) + " potentially throws an exception, try { } block is required");
                                                }
                                            }
                                        }
                                        i_1 = 0;
                                        _a.label = 40;
                                    case 40:
                                        if (!(i_1 < blocksToWalkLater.length)) return [3 /*break*/, 43];
                                        b = blocksToWalkLater[i_1];
                                        localFork = b.evalCtx.fork();
                                        return [4 /*yield*/, this_2.WalkNode(b, localFork, wr)];
                                    case 41:
                                        _a.sent();
                                        _a.label = 42;
                                    case 42:
                                        i_1++;
                                        return [3 /*break*/, 40];
                                    case 43:
                                        ;
                                        i_2 = 0;
                                        _a.label = 44;
                                    case 44:
                                        if (!(i_2 < walk_later.length)) return [3 /*break*/, 47];
                                        later_1 = walk_later[i_2];
                                        ca = later_1.callArg;
                                        aa = later_1.arg;
                                        /** unused:  const newNode : CodeNode  = new CodeNode(ca.code, ca.sp, ca.ep)   **/
                                        if ((ca.is_block_node && (ca.isFirstVref("fn") == false)) && (ca.isFirstVref("fun") == false)) {
                                            fnDef = aa.expression_value;
                                            copyOf = fnDef.rebuildWithType(match, false);
                                            ffc = copyOf.children[0];
                                            ffc.vref = "fun";
                                            itemCopy = ca.rebuildWithType(match, false);
                                            copyOf.children.push(itemCopy);
                                            cnt = ca.children.length;
                                            while (cnt > 0) {
                                                ca.children.pop();
                                                cnt = cnt - 1;
                                            }
                                            ;
                                            for (i_3 = 0; i_3 < copyOf.children.length; i_3++) {
                                                ch_1 = copyOf.children[i_3];
                                                ca.children.push(ch_1);
                                            }
                                            ;
                                        }
                                        sCtx_1 = ctx.fork();
                                        sCtx_1.newBlock();
                                        return [4 /*yield*/, this_2.WalkNode(ca, sCtx_1, wr)];
                                    case 45:
                                        _a.sent();
                                        _a.label = 46;
                                    case 46:
                                        i_2++;
                                        return [3 /*break*/, 44];
                                    case 47:
                                        ;
                                        _a.label = 48;
                                    case 48:
                                        if (!(codeDef.is_block_node && all_matched)) return [3 /*break*/, 56];
                                        pure_transform = ctx.hasCompilerFlag("pure");
                                        if (!(is_pure && pure_transform)) return [3 /*break*/, 50];
                                        argDefs = CodeNode.blockFromList(operatorsOf.map_45(args.children, (function (item, index) {
                                            var callArg_1 = callArgs.children[(index + 1)];
                                            var arg_1 = item;
                                            var vName = item.copy();
                                            /** unused:  const caCopy : CodeNode  = callArg_1.copy()   **/
                                            var prms = _this.transformParams2([callArg_1], [arg_1], ctx);
                                            var firstp = prms[0];
                                            var ad = CodeNode.op3("def", [vName, firstp]);
                                            return ad;
                                        })));
                                        bodyStart = CodeNode.blockFromList([argDefs, codeDef]);
                                        newCtx = ctx.fork();
                                        bodyCopy = bodyStart.rebuildWithType(match, true);
                                        callArgs.flow_done = false;
                                        callArgs.getChildrenFrom(bodyCopy);
                                        return [4 /*yield*/, this_2.WalkNode(callArgs, newCtx, wr)];
                                    case 49:
                                        _a.sent();
                                        return [2 /*return*/, { value: true }];
                                    case 50:
                                        nSig = "";
                                        if ((args.children.length) > 0) {
                                            arg0 = args.getFirst();
                                            nSig = this_2.getNameSignature(arg0);
                                        }
                                        else {
                                            nSig = this_2.getVoidNameSignature();
                                        }
                                        new_cl = ctx.createOpStaticClass(nSig);
                                        return [4 /*yield*/, this_2.WalkNode(new_cl.classNode, ctx, wr)];
                                    case 51:
                                        _a.sent();
                                        bodyCopy_1 = codeDef.rebuildWithType(match, true);
                                        argsCopy = args.rebuildWithType(match, true);
                                        nameCopy = nameNode.rebuildWithType(match, true);
                                        sigN = ctx.transformOpNameWord(fc.vref);
                                        argsSig = sigN + this_2.getArgsSignature(argsCopy);
                                        if (!(false == new_cl.hasStaticMethod(argsSig))) return [3 /*break*/, 54];
                                        return [4 /*yield*/, ctx.createStaticMethod(argsSig, new_cl, nameCopy, argsCopy, bodyCopy_1, this_2, wr)];
                                    case 52:
                                        sMethod = _a.sent();
                                        staticMethod_1 = sMethod;
                                        currM = ctx.getCurrentMethod();
                                        currM.addCallTo(sMethod);
                                        static_nameNode = nameCopy;
                                        fCtx = sMethod.fnCtx;
                                        fCtx.currentMethod = sMethod;
                                        fCtx.is_function = true;
                                        m = sMethod;
                                        fCtx.in_static_method = true;
                                        if (nameCopy.hasFlag("weak")) {
                                            m.changeStrength(0, 1, nameNode);
                                        }
                                        else {
                                            m.changeStrength(1, 1, nameNode);
                                        }
                                        fCtx.setInMethod();
                                        for (i_4 = 0; i_4 < m.params.length; i_4++) {
                                            v = m.params[i_4];
                                            fCtx.defineVariable(v.name, v);
                                            v.nameNode.eval_type = v.nameNode.typeNameAsType(fCtx);
                                            v.nameNode.eval_type_name = v.nameNode.type_name;
                                        }
                                        ;
                                        return [4 /*yield*/, this_2.WalkNodeChildren(bodyCopy_1, fCtx, wr)];
                                    case 53:
                                        _a.sent();
                                        fCtx.unsetInMethod();
                                        fCtx.in_static_method = false;
                                        fCtx.function_level_context = true;
                                        for (i_5 = 0; i_5 < fCtx.localVarNames.length; i_5++) {
                                            n = fCtx.localVarNames[i_5];
                                            p_1 = fCtx.localVariables[n];
                                            if (p_1.set_cnt > 0) {
                                                if (p_1.is_immutable) {
                                                    ctx.addError(callArgs, "Immutable variable was assigned");
                                                }
                                                defNode = p_1.node;
                                                defNode.setFlag("mutable");
                                                nNode = p_1.nameNode;
                                                nNode.setFlag("mutable");
                                            }
                                        }
                                        ;
                                        return [3 /*break*/, 55];
                                    case 54:
                                        sMethod_1 = new_cl.findStaticMethod(argsSig);
                                        static_nameNode = sMethod_1.nameNode;
                                        currM_1 = ctx.getCurrentMethod();
                                        currM_1.addCallTo(sMethod_1);
                                        staticMethod_1 = sMethod_1;
                                        _a.label = 55;
                                    case 55:
                                        is_static_fn = true;
                                        static_fn_name = argsSig;
                                        static_class_name = new_cl.name;
                                        _a.label = 56;
                                    case 56:
                                        if (!all_matched) return [3 /*break*/, 80];
                                        if (!is_static_fn) return [3 /*break*/, 62];
                                        firstArg = callArgs.getFirst();
                                        firstArg.vref = (static_class_name + ".") + static_fn_name;
                                        firstArg.flow_done = false;
                                        firstArg.value_type = 11;
                                        firstArg.ns.length = 0;
                                        firstArg.ns.push(static_class_name);
                                        firstArg.ns.push(static_fn_name);
                                        newArgs = new CodeNode(callArgs.code, callArgs.sp, callArgs.ep);
                                        for (i_6 = 0; i_6 < callArgs.children.length; i_6++) {
                                            ca_1 = callArgs.children[i_6];
                                            if (ca_1.is_part_of_chain) {
                                                continue;
                                            }
                                            if (i_6 > 0) {
                                                arg_2 = args.children[(i_6 - 1)];
                                                if (arg_2.hasFlag("noeval")) {
                                                    continue;
                                                }
                                                newArgs.children.push(ca_1);
                                            }
                                        }
                                        ;
                                        arg_len = callArgs.children.length;
                                        while (arg_len > 1) {
                                            callArgs.children.pop();
                                            arg_len = arg_len - 1;
                                        }
                                        ;
                                        callArgs.children.push(newArgs);
                                        callArgs.flow_done = false;
                                        return [4 /*yield*/, this_2.WalkNode(callArgs, ctx, wr)];
                                    case 57:
                                        _a.sent();
                                        i_7 = 0;
                                        _a.label = 58;
                                    case 58:
                                        if (!(i_7 < newArgs.children.length)) return [3 /*break*/, 61];
                                        ca_2 = newArgs.children[i_7];
                                        if (ca_2.eval_type == 17) {
                                            if ((typeof (ca_2.lambdaFnDesc) !== "undefined" && ca_2.lambdaFnDesc != null)) {
                                                if ((typeof (staticMethod_1) !== "undefined" && staticMethod_1 != null)) {
                                                    staticMethod_1.addCallTo(ca_2.lambdaFnDesc);
                                                    if (ca_2.lambdaFnDesc.nameNode.hasFlag("async")) {
                                                        staticMethod_1.nameNode.setFlag("async");
                                                    }
                                                }
                                            }
                                        }
                                        return [4 /*yield*/, ca_2.forTree((function (item, i) {
                                                if ((typeof (item.fnDesc) !== "undefined" && item.fnDesc != null)) {
                                                    if ((typeof (staticMethod_1) !== "undefined" && staticMethod_1 != null)) {
                                                        staticMethod_1.addCallTo(item.fnDesc);
                                                    }
                                                }
                                            }))];
                                    case 59:
                                        _a.sent();
                                        _a.label = 60;
                                    case 60:
                                        i_7++;
                                        return [3 /*break*/, 58];
                                    case 61:
                                        ;
                                        match.setRvBasedOn(static_nameNode, callArgs);
                                        ctx.removeOpNs(added_ns);
                                        return [2 /*return*/, { value: true }];
                                    case 62:
                                        if (!is_plugin) return [3 /*break*/, 67];
                                        _a.label = 63;
                                    case 63:
                                        _a.trys.push([63, 65, , 66]);
                                        fileName = ((process.cwd()) + "/") + plugin_name;
                                        console.log("trying to load plugin: " + fileName);
                                        plugin = require(fileName);
                                        ((new plugin.Plugin())[plugin_fn])(callArgs, ctx, wr);
                                        callArgs.flow_done = false;
                                        return [4 /*yield*/, this_2.WalkNode(callArgs, ctx, wr)];
                                    case 64:
                                        _a.sent();
                                        match.setRvBasedOn(nameNode, callArgs);
                                        ctx.removeOpNs(added_ns);
                                        console.log("plugin ready...");
                                        return [3 /*break*/, 66];
                                    case 65:
                                        e_8 = _a.sent();
                                        ctx.addError(callArgs, "Plugin operator failed " + ((e_8.toString())));
                                        return [3 /*break*/, 66];
                                    case 66: return [2 /*return*/, { value: true }];
                                    case 67:
                                        if (!is_macro) return [3 /*break*/, 70];
                                        return [4 /*yield*/, this_2.buildMacro(langOper, callArgs, ctx)];
                                    case 68:
                                        macroNode = _a.sent();
                                        arg_len_1 = callArgs.children.length;
                                        while (arg_len_1 > 0) {
                                            callArgs.children.pop();
                                            arg_len_1 = arg_len_1 - 1;
                                        }
                                        ;
                                        callArgs.children.push(macroNode);
                                        macroNode.parent = callArgs;
                                        return [4 /*yield*/, this_2.WalkNode(macroNode, ctx, wr)];
                                    case 69:
                                        _a.sent();
                                        match.setRvBasedOn(nameNode, callArgs);
                                        ctx.removeOpNs(added_ns);
                                        return [2 /*return*/, { value: true }];
                                    case 70:
                                        if (nameNode.hasFlag("moves")) {
                                            moves_opt = nameNode.getFlag("moves");
                                            moves = moves_opt;
                                            ann = moves.vref_annotation;
                                            from = ann.getFirst();
                                            toItem = ann.getSecond();
                                            cA = callArgs.children[from.int_value];
                                            cA2 = callArgs.children[toItem.int_value];
                                            if (cA.hasParamDesc) {
                                                pp = cA.paramDesc;
                                                pp2 = cA2.paramDesc;
                                                pp.moveRefTo(callArgs, pp2, ctx);
                                            }
                                        }
                                        if (!nameNode.hasFlag("returns")) return [3 /*break*/, 79];
                                        activeFn_2 = ctx.getCurrentMethod();
                                        if (!((activeFn_2.nameNode.type_name != "void") || (activeFn_2.nameNode.value_type == 17))) return [3 /*break*/, 78];
                                        if (!((callArgs.children.length) < 2)) return [3 /*break*/, 71];
                                        ctx.addError(callArgs, " missing return value !!!");
                                        return [3 /*break*/, 78];
                                    case 71:
                                        returnedValue = callArgs.children[1];
                                        validated_returnvalue = false;
                                        if (!(activeFn_2.nameNode.value_type == 17)) return [3 /*break*/, 77];
                                        validated_returnvalue = true;
                                        fnExpr = activeFn_2.nameNode.expression_value;
                                        if (!(typeof (fnExpr) === "undefined")) return [3 /*break*/, 72];
                                        ctx.addError(activeFn_2.nameNode, "returned anonymous function should have a method signature");
                                        return [3 /*break*/, 77];
                                    case 72:
                                        if (!((returnedValue.value_type != 17) && (returnedValue.eval_type != 17))) return [3 /*break*/, 73];
                                        ctx.addError(returnedValue, "Function should return anonymous function!");
                                        return [3 /*break*/, 77];
                                    case 73:
                                        if (!(returnedValue.hasParamDesc && ((typeof (returnedValue.paramDesc.nameNode) !== "undefined" && returnedValue.paramDesc.nameNode != null)))) return [3 /*break*/, 75];
                                        rExpr = returnedValue.paramDesc.nameNode.expression_value;
                                        return [4 /*yield*/, this_2.matchLambdaArgs(fnExpr, rExpr, ctx, wr)];
                                    case 74:
                                        _a.sent();
                                        return [3 /*break*/, 77];
                                    case 75:
                                        rExpr_1 = returnedValue.expression_value;
                                        return [4 /*yield*/, this_2.matchLambdaArgs(fnExpr, rExpr_1, ctx, wr)];
                                    case 76:
                                        _a.sent();
                                        _a.label = 77;
                                    case 77:
                                        if (validated_returnvalue == false) {
                                            if (match.doesMatch((activeFn_2.nameNode), returnedValue, ctx) == false) {
                                                if (activeFn_2.nameNode.ifNoTypeSetToEvalTypeOf(returnedValue)) {
                                                }
                                                else {
                                                    ctx.addError(returnedValue, "invalid return value type!!! " + returnedValue.getCode());
                                                    ctx.addError(returnedValue, "^ code: " + returnedValue.getCode());
                                                    ctx.addError(activeFn_2.nameNode, "^ regarding to");
                                                    if (returnedValue.eval_type == 28) {
                                                        ctx.addError(activeFn_2.nameNode, "^ which was a method");
                                                    }
                                                    ctx.addError(activeFn_2.nameNode, "^ value type = " + returnedValue.eval_type);
                                                }
                                            }
                                        }
                                        argNode = activeFn_2.nameNode;
                                        if (returnedValue.hasFlag("optional")) {
                                            if (false == argNode.hasFlag("optional")) {
                                                ctx.addError(callArgs, "function return value optionality does not match, expected non-optional return value, optional given at " + argNode.getCode());
                                            }
                                        }
                                        if (argNode.hasFlag("optional")) {
                                            if (false == returnedValue.hasFlag("optional")) {
                                                ctx.addError(callArgs, "function return value optionality does not match, expected optional return value " + argNode.getCode());
                                            }
                                        }
                                        pp_1 = returnedValue.paramDesc;
                                        if ((typeof (pp_1) !== "undefined" && pp_1 != null)) {
                                            pp_1.moveRefTo(callArgs, activeFn_2, ctx);
                                        }
                                        _a.label = 78;
                                    case 78:
                                        if (typeof (callArgs.parent) === "undefined") {
                                            ctx.addError(callArgs, "did not have parent");
                                            console.log("no parent => " + callArgs.getCode());
                                        }
                                        callArgs.parent.didReturnAtIndex = callArgs.parent.children.indexOf(callArgs);
                                        _a.label = 79;
                                    case 79:
                                        if (nameNode.hasFlag("returns") == false) {
                                            match.setRvBasedOn(nameNode, callArgs);
                                            callArgs.evalTypeClass = TFactory.new_def_signature(nameNode, ctx, wr);
                                        }
                                        if (has_eval_ctx) {
                                            tmpCtx_3 = ctx;
                                            callArgs.evalCtx = tmpCtx_3;
                                        }
                                        nodeP = callArgs.parent;
                                        if ((typeof (nodeP) !== "undefined" && nodeP != null)) {
                                        }
                                        else {
                                        }
                                        /** unused:  const sig : string  = nameNode.buildTypeSignatureUsingMatch(match)   **/
                                        some_matched = true;
                                        callArgs.has_operator = true;
                                        callArgs.op_index = main_index;
                                        callArgs.operator_node = ch;
                                        for (arg_index = 0; arg_index < args.children.length; arg_index++) {
                                            arg_3 = args.children[arg_index];
                                            if (arg_3.has_vref_annotation) {
                                                anns = arg_3.vref_annotation;
                                                for (i_8 = 0; i_8 < anns.children.length; i_8++) {
                                                    ann_1 = anns.children[i_8];
                                                    if (ann_1.vref == "mutates") {
                                                        theArg = callArgs.children[(arg_index + 1)];
                                                        if (theArg.hasParamDesc) {
                                                            theArg.paramDesc.set_cnt = theArg.paramDesc.set_cnt + 1;
                                                        }
                                                    }
                                                }
                                                ;
                                            }
                                        }
                                        ;
                                        return [2 /*return*/, "break"];
                                    case 80: return [2 /*return*/];
                                }
                            });
                        };
                        this_2 = this;
                        main_index = 0;
                        _a.label = 2;
                    case 2:
                        if (!(main_index < op_list.length)) return [3 /*break*/, 5];
                        return [5 /*yield**/, _loop_5(main_index)];
                    case 3:
                        state_3 = _a.sent();
                        if (typeof state_3 === "object")
                            return [2 /*return*/, state_3.value];
                        if (state_3 === "break")
                            return [3 /*break*/, 5];
                        _a.label = 4;
                    case 4:
                        main_index++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        if ((require_all_match == true) && (some_matched == false)) {
                            ctx.addError(callArgs, "Could not match argument types for " + callFnName.vref);
                        }
                        if (expects_error) {
                            cnt_now = ctx.getErrorCount();
                            if (cnt_now == err_cnt) {
                                ctx.addParserError(callArgs, (("LANGUAGE_PARSER_ERROR: expected generated error, err counts : " + err_cnt) + " : ") + cnt_now);
                            }
                        }
                        else {
                            cnt_now_1 = ctx.getErrorCount();
                            if (cnt_now_1 > err_cnt) {
                                ctx.addParserError(callArgs, (("LANGUAGE_PARSER_ERROR: did not expect generated error, err counts : " + err_cnt) + " : ") + cnt_now_1);
                            }
                        }
                        ctx.removeOpNs(added_ns);
                        return [2 /*return*/, some_matched];
                }
            });
        });
    };
    ;
    return RangerFlowParser;
}());
exports.RangerFlowParser = RangerFlowParser;
var TFactory = /** @class */ (function () {
    function TFactory() {
    }
    // typescript static 
    TFactory.new_class_signature = function (node, ctx, wr) {
        var sig = node.vref;
        var tc = ctx.getTypeClass(sig);
        if (typeof (tc) === "undefined") {
            var newTC = ctx.addTypeClass(sig);
            newTC.value_type = node.value_type;
            newTC.is_class = true;
            newTC.name = sig;
            return newTC;
        }
        return tc;
    };
    ;
    // typescript static 
    TFactory.new_lambda_signature = function (node, ctx, wr) {
        var sig = TFactory.lambdaSignature(node);
        var tc = ctx.getTypeClass(sig);
        if (typeof (tc) === "undefined") {
            var newTC = ctx.addTypeClass(sig);
            newTC.value_type = node.value_type;
            newTC.is_lambda = true;
            newTC.name = sig;
            return newTC;
        }
        return tc;
    };
    ;
    // typescript static 
    TFactory.new_def_signature_from_simple_string = function (sig, ctx, wr) {
        var tc = ctx.getTypeClass(sig);
        if (typeof (tc) === "undefined") {
            var newTC = ctx.addTypeClass(sig);
            newTC.is_primitive = TTypes.isPrimitive(TTypes.nameToValue(sig));
            newTC.value_type = TTypes.nameToValue(sig);
            newTC.name = sig;
            if (((sig.length) > 0) == false) {
                newTC.is_empty = true;
            }
            return newTC;
        }
        return tc;
    };
    ;
    // typescript static 
    TFactory.sig = function (sig, ctx, wr) {
        return TFactory.new_def_signature_from_simple_string(sig, ctx, wr);
    };
    ;
    // typescript static 
    TFactory.new_def_signature = function (node, ctx, wr) {
        var sig = TFactory.baseSignature(node);
        var tc = ctx.getTypeClass(sig);
        if (typeof (tc) === "undefined") {
            var newTC = ctx.addTypeClass(sig);
            newTC.value_type = node.value_type;
            newTC.is_primitive = TTypes.isPrimitive(node.value_type);
            if (node.value_type == 17) {
                newTC.is_lambda = true;
            }
            if (node.value_type == 6) {
                newTC.arrayType = TFactory.new_def_signature_from_simple_string(node.array_type, ctx, wr);
            }
            if (node.value_type == 7) {
                newTC.keyType = TFactory.new_def_signature_from_simple_string(node.key_type, ctx, wr);
                newTC.arrayType = TFactory.new_def_signature_from_simple_string(node.array_type, ctx, wr);
            }
            newTC.name = sig;
            if (((sig.length) > 0) == false) {
                newTC.is_empty = true;
            }
            return newTC;
        }
        return tc;
    };
    ;
    // typescript static 
    TFactory.new_scalar_signature = function (node, ctx, wr) {
        var sig = TFactory.baseSignature(node);
        var tc = ctx.getTypeClass(sig);
        if (typeof (tc) === "undefined") {
            var newTC = ctx.addTypeClass(sig);
            newTC.is_primitive = true;
            newTC.value_type = node.value_type;
            newTC.name = sig;
            return newTC;
        }
        return tc;
    };
    ;
    // typescript static 
    TFactory.type_annotation = function (node) {
        if (node.has_type_annotation) {
            return ("@(" + TFactory.baseSignature((node.type_annotation))) + ")";
        }
        return "";
    };
    ;
    // typescript static 
    TFactory.lambdaSignature = function (node) {
        var fnNode = node.getFirst();
        var argNode = node.getSecond();
        var s = "";
        s = (s + "(_:") + TFactory.baseSignature(fnNode);
        s = ((s + " (") + (operatorsOf.map_47(argNode.children, (function (item, index) {
            return "_:" + TFactory.baseSignature(item);
        })).join(" "))) + "))";
        return s;
    };
    ;
    // typescript static 
    TFactory.baseSignature = function (node) {
        if (TTypes.isPrimitive(node.value_type)) {
            return TTypes.valueAsString(node.value_type);
        }
        var s = "";
        if (node.value_type == 6) {
            s = s + "[";
            s = s + node.array_type;
            s = s + "]";
            return s;
        }
        if (node.value_type == 7) {
            s = s + "[";
            s = s + node.key_type;
            s = s + ":";
            s = s + node.array_type;
            s = s + "]";
            return s;
        }
        if (node.value_type == 17) {
            var fnNode = node.expression_value.getFirst();
            var argNode = node.expression_value.getSecond();
            s = (s + "(_:") + TFactory.baseSignature(fnNode);
            s = ((s + " (") + (operatorsOf.map_47(argNode.children, (function (item, index) {
                return "_:" + TFactory.baseSignature(item);
            })).join(" "))) + "))";
            return s;
        }
        s = node.type_name + TFactory.type_annotation(node);
        return s;
    };
    ;
    return TFactory;
}());
exports.TFactory = TFactory;
var CallChain = /** @class */ (function () {
    function CallChain() {
        this.methodName = "";
    }
    return CallChain;
}());
exports.CallChain = CallChain;
var NodeEvalState = /** @class */ (function () {
    function NodeEvalState() {
        this.is_running = false; /** note: unused */
        this.child_index = -1; /** note: unused */
        this.cmd_index = -1; /** note: unused */
        this.is_ready = false; /** note: unused */
        this.is_waiting = false; /** note: unused */
        this.exit_after = false; /** note: unused */
        this.expand_args = false; /** note: unused */
        this.ask_expand = false; /** note: unused */
        this.eval_rest = false; /** note: unused */
        this.exec_cnt = 0; /** note: unused */
        this.b_debugger = false; /** note: unused */
        this.b_top_node = false; /** note: unused */
        this.ask_eval = false; /** note: unused */
        this.param_eval_on = false; /** note: unused */
        this.eval_index = -1; /** note: unused */
        this.eval_end_index = -1; /** note: unused */
        this.ask_eval_start = 0; /** note: unused */
        this.ask_eval_end = 0; /** note: unused */
    }
    return NodeEvalState;
}());
exports.NodeEvalState = NodeEvalState;
var RangerGenericClassWriter = /** @class */ (function () {
    function RangerGenericClassWriter() {
        this.compFlags = {};
    }
    RangerGenericClassWriter.prototype.lineEnding = function () {
        return "";
    };
    ;
    RangerGenericClassWriter.prototype.addSystemImport = function (cl, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var langName, sNode, impDefs;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!cl.is_system) return [3 /*break*/, 2];
                        langName = operatorsOf_21.getTargetLang_22(ctx);
                        if (!(typeof (cl.systemNodes[langName]) != "undefined" && cl.systemNodes.hasOwnProperty(langName))) return [3 /*break*/, 2];
                        sNode = (cl.systemNodes[langName]);
                        if (!((sNode.children.length) > 2)) return [3 /*break*/, 2];
                        impDefs = sNode.children[2];
                        return [4 /*yield*/, impDefs.forTree((function (item, i) {
                                if (item.isFirstVref("imp")) {
                                    var name_5 = item.getSecond();
                                    wr.addImport(name_5.string_value);
                                }
                            }))];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.EncodeString = function (node, ctx, wr) {
        /** unused:  const encoded_str : string  = ""   **/
        var str_length = node.string_value.length;
        var encoded_str_2 = "";
        var ii = 0;
        while (ii < str_length) {
            var cc = node.string_value.charCodeAt(ii);
            switch (cc) {
                case 8:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(98));
                    break;
                case 9:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(116));
                    break;
                case 10:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(110));
                    break;
                case 12:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(102));
                    break;
                case 13:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(114));
                    break;
                case 34:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(34));
                    break;
                case 92:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(92));
                    break;
                default:
                    encoded_str_2 = encoded_str_2 + (String.fromCharCode(cc));
                    break;
            }
            ;
            ii = ii + 1;
        }
        ;
        return encoded_str_2;
    };
    ;
    RangerGenericClassWriter.prototype.CustomOperator = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.WriteSetterVRef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.writeArrayTypeDef = function (node, ctx, wr) {
    };
    ;
    RangerGenericClassWriter.prototype.WriteEnum = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var rootObjName, e, enumName, pp, nn;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(node.eval_type == 13)) return [3 /*break*/, 3];
                        rootObjName = node.ns[0];
                        e = ctx.getEnum(rootObjName);
                        if (!(typeof (e) !== "undefined" && e != null)) return [3 /*break*/, 1];
                        enumName = node.ns[1];
                        wr.out("" + ((e.values[enumName])), false);
                        return [3 /*break*/, 3];
                    case 1:
                        if (!node.hasParamDesc) return [3 /*break*/, 3];
                        pp = node.paramDesc;
                        nn = pp.nameNode;
                        return [4 /*yield*/, this.WriteVRef(nn, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.WriteScalarValue = function (node, ctx, wr) {
        switch (node.value_type) {
            case 2:
                var dd_str = "" + node.double_value;
                var ii_str = "" + (Math.floor(node.double_value));
                if (dd_str == ii_str) {
                    wr.out(("" + node.double_value) + ".0", false);
                }
                else {
                    wr.out("" + node.double_value, false);
                }
                break;
            case 4:
                var s = this.EncodeString(node, ctx, wr);
                wr.out(("\"" + s) + "\"", false);
                break;
            case 3:
                wr.out("" + node.int_value, false);
                break;
            case 5:
                if (node.boolean_value) {
                    wr.out("true", false);
                }
                else {
                    wr.out("false", false);
                }
                break;
        }
        ;
    };
    ;
    RangerGenericClassWriter.prototype.getTypeString = function (type_string) {
        return type_string;
    };
    ;
    RangerGenericClassWriter.prototype.import_lib = function (lib_name, ctx, wr) {
        wr.addImport(lib_name);
    };
    ;
    RangerGenericClassWriter.prototype.getObjectTypeString = function (type_string, ctx) {
        switch (type_string) {
            case "int":
                return "Integer";
            case "string":
                return "String";
            case "chararray":
                return "byte[]";
            case "char":
                return "byte";
            case "boolean":
                return "Boolean";
            case "double":
                return "Double";
        }
        ;
        return type_string;
    };
    ;
    RangerGenericClassWriter.prototype.release_local_vars = function (node, ctx, wr) {
        for (var i = 0; i < ctx.localVarNames.length; i++) {
            var n = ctx.localVarNames[i];
            var p = ctx.localVariables[n];
            if (p.ref_cnt == 0) {
                continue;
            }
            if (p.isAllocatedType()) {
                if (1 == p.getStrength()) {
                    if (p.nameNode.eval_type == 7) {
                    }
                    if (p.nameNode.eval_type == 6) {
                    }
                    if ((p.nameNode.eval_type != 6) && (p.nameNode.eval_type != 7)) {
                    }
                }
                if (0 == p.getStrength()) {
                    if (p.nameNode.eval_type == 7) {
                    }
                    if (p.nameNode.eval_type == 6) {
                    }
                    if ((p.nameNode.eval_type != 6) && (p.nameNode.eval_type != 7)) {
                    }
                }
            }
        }
        ;
        if (ctx.is_function) {
            return;
        }
        if ((typeof (ctx.parent) !== "undefined" && ctx.parent != null)) {
            this.release_local_vars(node, ctx.parent, wr);
        }
    };
    ;
    RangerGenericClassWriter.prototype.WalkNode = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, operatorsOf.forEach_15(node.children, (function (item, index) {
                            if ((typeof (item.evalCtx) !== "undefined" && item.evalCtx != null)) {
                                if (operatorsOf_21.getTargetLang_22((item.evalCtx)) != operatorsOf_21.getTargetLang_22(ctx)) {
                                    item.evalCtx.targetLangName = operatorsOf_21.getTargetLang_22(ctx);
                                }
                            }
                        }))];
                    case 1:
                        _a.sent();
                        if (!(typeof (node.evalCtx) !== "undefined" && node.evalCtx != null)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.compiler.WalkNode(node, node.evalCtx, wr)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.compiler.WalkNode(node, ctx, wr)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.writeTypeDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                wr.out(node.type_name, false);
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.writeRawTypeDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.writeTypeDef(node, ctx, wr)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.adjustType = function (tn) {
        return tn;
    };
    ;
    RangerGenericClassWriter.prototype.WriteVRef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var rootObjName, enumName, e, i, p, i_1, part;
            return __generator(this, function (_a) {
                if (node.eval_type == 13) {
                    if ((node.ns.length) > 1) {
                        rootObjName = node.ns[0];
                        enumName = node.ns[1];
                        e = ctx.getEnum(rootObjName);
                        if ((typeof (e) !== "undefined" && e != null)) {
                            wr.out("" + ((e.values[enumName])), false);
                            return [2 /*return*/];
                        }
                    }
                }
                if ((node.nsp.length) > 0) {
                    for (i = 0; i < node.nsp.length; i++) {
                        p = node.nsp[i];
                        if (i > 0) {
                            wr.out(".", false);
                        }
                        if ((p.compiledName.length) > 0) {
                            wr.out(this.adjustType(p.compiledName), false);
                        }
                        else {
                            if ((p.name.length) > 0) {
                                wr.out(this.adjustType(p.name), false);
                            }
                            else {
                                wr.out(this.adjustType((node.ns[i])), false);
                            }
                        }
                    }
                    ;
                    return [2 /*return*/];
                }
                for (i_1 = 0; i_1 < node.ns.length; i_1++) {
                    part = node.ns[i_1];
                    if (i_1 > 0) {
                        wr.out(".", false);
                    }
                    wr.out(this.adjustType(part), false);
                }
                ;
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.writeVarDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var p, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasParamDesc) return [3 /*break*/, 3];
                        p = node.paramDesc;
                        if (p.set_cnt > 0) {
                            wr.out("var " + p.name, false);
                        }
                        else {
                            wr.out("const " + p.name, false);
                        }
                        if (!((node.children.length) > 2)) return [3 /*break*/, 2];
                        wr.out(" = ", false);
                        ctx.setInExpr();
                        value = node.getThird();
                        return [4 /*yield*/, this.WalkNode(value, ctx, wr)];
                    case 1:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out(";", true);
                        return [3 /*break*/, 3];
                    case 2:
                        wr.out(";", true);
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.CreateCallExpression = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var obj, method, args, pms, i, arg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.has_call) return [3 /*break*/, 6];
                        obj = node.getSecond();
                        method = node.getThird();
                        args = node.children[3];
                        wr.out("(", false);
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(obj, ctx, wr)];
                    case 1:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out(").", false);
                        wr.out(method.vref, false);
                        wr.out("(", false);
                        ctx.setInExpr();
                        pms = operatorsOf.filter_36(args.children, (function (item, index) {
                            if (item.hasFlag("keyword")) {
                                return false;
                            }
                            return true;
                        }));
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < pms.length)) return [3 /*break*/, 5];
                        arg = pms[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        return [4 /*yield*/, this.WalkNode(arg, ctx, wr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        ctx.unsetInExpr();
                        wr.out(")", false);
                        if (ctx.expressionLevel() == 0) {
                            wr.out(";", true);
                        }
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.CreateMethodCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var obj, args, pms, i, arg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        obj = node.getFirst();
                        args = node.getSecond();
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(obj, ctx, wr)];
                    case 1:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out("(", false);
                        ctx.setInExpr();
                        pms = operatorsOf.filter_36(args.children, (function (item, index) {
                            if (item.hasFlag("keyword")) {
                                return false;
                            }
                            return true;
                        }));
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < pms.length)) return [3 /*break*/, 5];
                        arg = pms[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        return [4 /*yield*/, this.WalkNode(arg, ctx, wr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        ctx.unsetInExpr();
                        wr.out(")", false);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.CreatePropertyGet = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var obj, prop;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        obj = node.getSecond();
                        prop = node.getThird();
                        wr.out("(", false);
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(obj, ctx, wr)];
                    case 1:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out(").", false);
                        return [4 /*yield*/, this.WalkNode(prop, ctx, wr)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.isPackaged = function (ctx) {
        var package_name = ctx.getCompilerSetting("package");
        if ((package_name.length) > 0) {
            return true;
        }
        return false;
    };
    ;
    RangerGenericClassWriter.prototype.CreateUnions = function (parser, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.CreateServices = function (parser, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.CreatePages = function (parser, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.CreatePage = function (parser, node, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                ctx.addError(node, "CreatePage not implemented for the build target");
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.CreateLambdaCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fName, args, i, arg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fName = node.children[0];
                        args = node.children[1];
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(fName, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out("(", false);
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < args.children.length)) return [3 /*break*/, 5];
                        arg = args.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        return [4 /*yield*/, this.WalkNode(arg, ctx, wr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        wr.out(")", false);
                        ctx.unsetInExpr();
                        if (ctx.expressionLevel() == 0) {
                            wr.out(";", true);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.CreateLambda = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var lambdaCtx, args, body, i, arg, i_1, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        lambdaCtx = node.lambda_ctx;
                        args = node.children[1];
                        body = node.children[2];
                        wr.out("(", false);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < args.children.length)) return [3 /*break*/, 6];
                        arg = args.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        if (!(arg.flow_done == false)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.compiler.parser.WalkNode(arg, lambdaCtx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [4 /*yield*/, this.WalkNode(arg, lambdaCtx, wr)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        i++;
                        return [3 /*break*/, 1];
                    case 6:
                        ;
                        wr.out(")", false);
                        wr.out(" => { ", true);
                        wr.indent(1);
                        lambdaCtx.restartExpressionLevel();
                        i_1 = 0;
                        _a.label = 7;
                    case 7:
                        if (!(i_1 < body.children.length)) return [3 /*break*/, 10];
                        item = body.children[i_1];
                        return [4 /*yield*/, this.WalkNode(item, lambdaCtx, wr)];
                    case 8:
                        _a.sent();
                        _a.label = 9;
                    case 9:
                        i_1++;
                        return [3 /*break*/, 7];
                    case 10:
                        ;
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.writeFnCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fc, givenArgs, cnt, i, arg, defVal, fc_1, n, i_1, cc, i_2, arg_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasFnCall) return [3 /*break*/, 18];
                        fc = node.getFirst();
                        return [4 /*yield*/, this.WriteVRef(fc, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out("(", false);
                        givenArgs = node.getSecond();
                        ctx.setInExpr();
                        cnt = 0;
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < node.fnDesc.params.length)) return [3 /*break*/, 9];
                        arg = node.fnDesc.params[i];
                        if (arg.nameNode.hasFlag("keyword")) {
                            return [3 /*break*/, 8];
                        }
                        if (cnt > 0) {
                            wr.out(", ", false);
                        }
                        cnt = cnt + 1;
                        if (!((givenArgs.children.length) <= i)) return [3 /*break*/, 6];
                        defVal = arg.nameNode.getFlag("default");
                        if (!(typeof (defVal) !== "undefined" && defVal != null)) return [3 /*break*/, 4];
                        fc_1 = defVal.vref_annotation.getFirst();
                        return [4 /*yield*/, this.WalkNode(fc_1, ctx, wr)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        ctx.addError(node, "Default argument was missing");
                        _a.label = 5;
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        n = givenArgs.children[i];
                        return [4 /*yield*/, this.WalkNode(n, ctx, wr)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        i++;
                        return [3 /*break*/, 2];
                    case 9:
                        ;
                        ctx.unsetInExpr();
                        wr.out(")", false);
                        if (!((node.methodChain.length) > 0)) return [3 /*break*/, 17];
                        i_1 = 0;
                        _a.label = 10;
                    case 10:
                        if (!(i_1 < node.methodChain.length)) return [3 /*break*/, 16];
                        cc = node.methodChain[i_1];
                        wr.out("." + cc.methodName, false);
                        wr.out("(", false);
                        ctx.setInExpr();
                        i_2 = 0;
                        _a.label = 11;
                    case 11:
                        if (!(i_2 < cc.args.children.length)) return [3 /*break*/, 14];
                        arg_1 = cc.args.children[i_2];
                        if (i_2 > 0) {
                            wr.out(", ", false);
                        }
                        return [4 /*yield*/, this.WalkNode(arg_1, ctx, wr)];
                    case 12:
                        _a.sent();
                        _a.label = 13;
                    case 13:
                        i_2++;
                        return [3 /*break*/, 11];
                    case 14:
                        ;
                        ctx.unsetInExpr();
                        wr.out(")", false);
                        _a.label = 15;
                    case 15:
                        i_1++;
                        return [3 /*break*/, 10];
                    case 16:
                        ;
                        _a.label = 17;
                    case 17:
                        if (ctx.expressionLevel() == 0) {
                            wr.out(";", true);
                        }
                        _a.label = 18;
                    case 18: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.writeNewCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cl, constr, givenArgs, i, arg, n;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasNewOper) return [3 /*break*/, 6];
                        cl = node.clDesc;
                        /** unused:  const fc : CodeNode  = node.getSecond()   **/
                        wr.out("new " + node.clDesc.name, false);
                        wr.out("(", false);
                        constr = cl.constructor_fn;
                        givenArgs = node.getThird();
                        if (!(typeof (constr) !== "undefined" && constr != null)) return [3 /*break*/, 5];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < constr.params.length)) return [3 /*break*/, 4];
                        arg = constr.params[i];
                        n = givenArgs.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        if (!(true || ((typeof (arg.nameNode) !== "undefined" && arg.nameNode != null)))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.WalkNode(n, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        _a.label = 5;
                    case 5:
                        wr.out(")", false);
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.writeInterface = function (cl, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.disabledVarDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.writeArrayLiteral = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        wr.out("[", false);
                        return [4 /*yield*/, operatorsOf.forEach_15(node.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (index > 0) {
                                                wr.out(", ", false);
                                            }
                                            return [4 /*yield*/, this.WalkNode(item, ctx, wr)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        wr.out("]", false);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGenericClassWriter.prototype.writeClass = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cl, i, pvar, i_1, pvar_1, i_2, fnVar, mVs, i_3, variant, subCtx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cl = node.clDesc;
                        if (typeof (cl) === "undefined") {
                            return [2 /*return*/];
                        }
                        wr.out(("class " + cl.name) + " { ", true);
                        wr.indent(1);
                        for (i = 0; i < cl.variables.length; i++) {
                            pvar = cl.variables[i];
                            wr.out(((("/* var " + pvar.name) + " => ") + pvar.nameNode.parent.getCode()) + " */ ", true);
                        }
                        ;
                        for (i_1 = 0; i_1 < cl.static_methods.length; i_1++) {
                            pvar_1 = cl.static_methods[i_1];
                            wr.out(("/* static " + pvar_1.name) + " */ ", true);
                        }
                        ;
                        i_2 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_2 < cl.defined_variants.length)) return [3 /*break*/, 7];
                        fnVar = cl.defined_variants[i_2];
                        mVs = cl.method_variants[fnVar];
                        i_3 = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i_3 < mVs.variants.length)) return [3 /*break*/, 5];
                        variant = mVs.variants[i_3];
                        wr.out(("function " + variant.name) + "() {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx = ctx.fork();
                        return [4 /*yield*/, this.WalkNode(variant.fnBody, subCtx, wr)];
                    case 3:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 4;
                    case 4:
                        i_3++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        _a.label = 6;
                    case 6:
                        i_2++;
                        return [3 /*break*/, 1];
                    case 7:
                        ;
                        wr.indent(-1);
                        wr.out("}", true);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    return RangerGenericClassWriter;
}());
exports.RangerGenericClassWriter = RangerGenericClassWriter;
var AndroidPageWriter = /** @class */ (function () {
    function AndroidPageWriter() {
    }
    AndroidPageWriter.prototype.BuildAST = function (code_string) {
        var lang_code = new SourceCode(code_string);
        lang_code.filename = "<AST>";
        var lang_parser = new RangerLispParser(lang_code);
        lang_parser.parse(false);
        var node = lang_parser.rootNode;
        return node;
    };
    ;
    AndroidPageWriter.prototype.CreatePage = function (parser, node, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var sc, pageName, wr, package_name, importFork, package_name_2, fnBody, subCtx, rootCtx, errCnt, copyOf, errCnt2, cnt, preBody, mainBody, newBody, stdCode, stdBody, in_stdCode, pushed_std, first_lines, pRef, pName, ast, mainPN, p, mainPN_2, p_2, mainPN_3, p_3, import_list, i, codeStr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sc = node.getSecond();
                        pageName = sc.vref;
                        wr = orig_wr.getFileWriter(".", (pageName + ".java"));
                        wr.out("// created by AndroidPageWriter ", true);
                        package_name = ctx.getCompilerSetting("package");
                        if ((package_name.length) > 0) {
                            wr.out(("package " + package_name) + ";", true);
                        }
                        importFork = wr.fork();
                        this.classWriter.import_lib("android.content.Context", ctx, wr);
                        this.classWriter.import_lib("android.support.v7.app.AppCompatActivity", ctx, wr);
                        this.classWriter.import_lib("android.widget.LinearLayout", ctx, wr);
                        this.classWriter.import_lib("android.view.LayoutInflater", ctx, wr);
                        this.classWriter.import_lib("android.os.Bundle", ctx, wr);
                        this.classWriter.import_lib("android.support.v4.app.Fragment", ctx, wr);
                        this.classWriter.import_lib("android.view.ViewGroup", ctx, wr);
                        this.classWriter.import_lib("android.view.View", ctx, wr);
                        package_name_2 = ctx.getCompilerSetting("package");
                        if (this.classWriter.isPackaged(ctx)) {
                            this.classWriter.import_lib(package_name_2 + ".interfaces.*", ctx, wr);
                            this.classWriter.import_lib(package_name_2 + ".operators.*", ctx, wr);
                            this.classWriter.import_lib(package_name_2 + ".immutables.*", ctx, wr);
                        }
                        wr.out(("public class " + pageName) + " extends Fragment  {", true);
                        wr.indent(1);
                        wr.out("public JinxProcess mainProcess; ", true);
                        wr.out("@Override ", true);
                        wr.out("public void onDestroyView() { ", true);
                        wr.indent(1);
                        wr.out("super.onDestroyView(); ", true);
                        wr.out("if( mainProcess != null) mainProcess.abort();", true);
                        wr.indent(-1);
                        wr.out("}", true);
                        wr.out("@Override", true);
                        wr.out("public View onCreateView(final LayoutInflater inflater, final ViewGroup container, final Bundle savedInstanceState) {", true);
                        wr.indent(1);
                        wr.out(("final View view = inflater.inflate(R.layout.activity_" + pageName) + ", container, false);", true);
                        fnBody = node.children[2];
                        subCtx = ctx.fork();
                        subCtx.is_function = true;
                        subCtx.in_static_method = true;
                        subCtx.setInMethod();
                        rootCtx = subCtx.getRoot();
                        errCnt = rootCtx.compilerErrors.length;
                        copyOf = fnBody.copy();
                        return [4 /*yield*/, parser.WalkNodeChildren(fnBody, subCtx, wr)];
                    case 1:
                        _a.sent();
                        subCtx.unsetInMethod();
                        subCtx.in_static_method = false;
                        subCtx.function_level_context = true;
                        errCnt2 = rootCtx.compilerErrors.length;
                        cnt = errCnt2 - errCnt;
                        while (cnt > 0) {
                            rootCtx.compilerErrors.pop();
                            cnt = cnt - 1;
                        }
                        ;
                        preBody = fnBody.newExpressionNode();
                        mainBody = fnBody.newExpressionNode();
                        newBody = fnBody.newExpressionNode();
                        stdCode = fnBody.newExpressionNode();
                        stdBody = fnBody.newExpressionNode();
                        in_stdCode = false;
                        pushed_std = false;
                        first_lines = true;
                        pRef = fnBody.newVRefNode("process");
                        pName = fnBody.newStringNode(pageName);
                        newBody.children.push(pRef);
                        newBody.children.push(pName);
                        if (!(pageName != "notme")) return [3 /*break*/, 3];
                        return [4 /*yield*/, operatorsOf.forEach_15(fnBody.children, (function (item, index) {
                                if (item.isFirstVref("ui") || (item.eval_type_name == "JinxProcess")) {
                                    if (in_stdCode) {
                                        newBody.children.push(stdCode);
                                        in_stdCode = false;
                                    }
                                    first_lines = false;
                                }
                                if (item.isFirstVref("ui")) {
                                    first_lines = false;
                                    var taskNode = copyOf.children[index];
                                    var codeToRun = taskNode.getSecond();
                                    var uiNode = CodeNode.op2("task.call", CodeNode.blockFromList([CodeNode.op3("def", [CodeNode.vref1("uictx"), CodeNode.op2("unwrap", CodeNode.op3("get", [CodeNode.vref1("ctx.anyValues"), CodeNode.newStr("uicontext")]))]), CodeNode.op2("print", CodeNode.newStr("after this should be ui_thread")), CodeNode.op3("case", [CodeNode.vref1("uictx"), CodeNode.vref2("c", "UIContextHandle"), CodeNode.blockFromList([CodeNode.op3("ui_thread", [CodeNode.vref1("c"), codeToRun])])])]));
                                    newBody.children.push(uiNode);
                                    return;
                                }
                                if (item.eval_type_name == "JinxProcess") {
                                    var taskNode_1 = copyOf.children[index];
                                    newBody.children.push(taskNode_1);
                                }
                                else {
                                    if (first_lines) {
                                        var tt = copyOf.children[index];
                                        preBody.children.push(tt);
                                    }
                                    else {
                                        if (in_stdCode == false) {
                                            stdCode = fnBody.newExpressionNode();
                                            stdCode.children.push(fnBody.newVRefNode("task.call"));
                                            var callBody = fnBody.newExpressionNode();
                                            callBody.is_block_node = true;
                                            var tryC = fnBody.newExpressionNode();
                                            var catchC = fnBody.newExpressionNode();
                                            catchC.is_block_node = true;
                                            tryC.children.push(fnBody.newVRefNode("try"));
                                            stdBody = fnBody.newExpressionNode();
                                            stdBody.is_block_node = true;
                                            tryC.children.push(stdBody);
                                            tryC.children.push(catchC);
                                            callBody.children.push(tryC);
                                            stdCode.children.push(callBody);
                                            in_stdCode = true;
                                            pushed_std = false;
                                        }
                                        var taskNode_2 = copyOf.children[index];
                                        stdBody.children.push(taskNode_2);
                                    }
                                }
                            }))];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        if (in_stdCode) {
                            newBody.children.push(stdCode);
                        }
                        ast = this.BuildAST("\r\n def ctx (new JinxProcessCtx)\r\n ctx.anyValues = (set ctx.anyValues \"view\" view)\r\n ctx.anyValues = (set ctx.anyValues \"uicontext\" (getUIContext))\r\n ctx.anyValues = (set ctx.anyValues \"process\" mainProcess)\r\n mainProcess.start(ctx)\r\n      ");
                        return [4 /*yield*/, operatorsOf.forEach_15(ast.children, (function (item, index) {
                                var n = item;
                                mainBody.children.push(n);
                            }))];
                    case 4:
                        _a.sent();
                        mainPN = fnBody.newVRefNode("mainProcess");
                        mainPN.type_name = "JinxProcess";
                        p = new RangerAppParamDesc();
                        p.name = "mainProcess";
                        p.compiledName = "mainProcess";
                        p.value_type = 11;
                        p.node = mainPN;
                        p.nameNode = mainPN;
                        p.is_optional = false;
                        p.init_cnt = 1;
                        subCtx.defineVariable(p.name, p);
                        mainPN_2 = fnBody.newVRefNode("view");
                        mainPN_2.type_name = "View";
                        p_2 = new RangerAppParamDesc();
                        p_2.name = "view";
                        p_2.compiledName = "view";
                        p_2.value_type = 11;
                        p_2.node = mainPN_2;
                        p_2.nameNode = mainPN_2;
                        p_2.is_optional = false;
                        p_2.init_cnt = 1;
                        subCtx.defineVariable(p_2.name, p_2);
                        mainPN_3 = fnBody.newVRefNode("ctx");
                        mainPN_3.type_name = "JinxProcessCtx";
                        p_3 = new RangerAppParamDesc();
                        p_3.name = "ctx";
                        p_3.compiledName = "ctx";
                        p_3.value_type = 11;
                        p_3.node = mainPN_3;
                        p_3.nameNode = mainPN_3;
                        p_3.is_optional = false;
                        p_3.init_cnt = 1;
                        subCtx.defineVariable(p_3.name, p_3);
                        subCtx.is_function = true;
                        subCtx.in_static_method = true;
                        subCtx.setInMethod();
                        return [4 /*yield*/, parser.WalkNode(preBody, subCtx, wr)];
                    case 5:
                        _a.sent();
                        return [4 /*yield*/, parser.WalkNode(newBody, subCtx, wr)];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, parser.WalkNode(mainBody, subCtx, wr)];
                    case 7:
                        _a.sent();
                        subCtx.unsetInMethod();
                        subCtx.in_static_method = false;
                        subCtx.function_level_context = true;
                        return [4 /*yield*/, this.classWriter.WalkNode(preBody, subCtx, wr)];
                    case 8:
                        _a.sent();
                        wr.out("mainProcess = (", false);
                        subCtx.setInExpr();
                        return [4 /*yield*/, this.classWriter.WalkNode(newBody, subCtx, wr)];
                    case 9:
                        _a.sent();
                        subCtx.unsetInExpr();
                        wr.out(");", true);
                        return [4 /*yield*/, this.classWriter.WalkNode(mainBody, subCtx, wr)];
                    case 10:
                        _a.sent();
                        wr.out("return view;", true);
                        wr.indent(-1);
                        wr.out("}", true);
                        wr.indent(-1);
                        wr.out("}", true);
                        import_list = wr.getImports();
                        for (i = 0; i < import_list.length; i++) {
                            codeStr = import_list[i];
                            importFork.out(("import " + codeStr) + ";", true);
                        }
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    return AndroidPageWriter;
}());
exports.AndroidPageWriter = AndroidPageWriter;
var RangerJava7ClassWriter = /** @class */ (function (_super) {
    __extends(RangerJava7ClassWriter, _super);
    function RangerJava7ClassWriter() {
        var _this = _super.call(this) || this;
        _this.signatures = {};
        _this.signature_cnt = 0;
        _this.iface_created = {};
        return _this;
    }
    RangerJava7ClassWriter.prototype.getSignatureInterface = function (s) {
        var idx = this.signatures[s];
        if ((typeof (idx) !== "undefined" && idx != null)) {
            return "LambdaSignature" + (idx);
        }
        this.signature_cnt = this.signature_cnt + 1;
        this.signatures[s] = this.signature_cnt;
        return "LambdaSignature" + this.signature_cnt;
    };
    ;
    RangerJava7ClassWriter.prototype.adjustType = function (tn) {
        if (tn == "this") {
            return "this";
        }
        return tn;
    };
    ;
    RangerJava7ClassWriter.prototype.getObjectTypeString2 = function (type_string, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cc, sName;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        switch (type_string) {
                            case "int":
                                return [2 /*return*/, "Integer"];
                            case "string":
                                return [2 /*return*/, "String"];
                            case "charbuffer":
                                return [2 /*return*/, "byte[]"];
                            case "char":
                                return [2 /*return*/, "byte"];
                            case "boolean":
                                return [2 /*return*/, "Boolean"];
                            case "double":
                                return [2 /*return*/, "Double"];
                        }
                        ;
                        if (!ctx.isDefinedClass(type_string)) return [3 /*break*/, 3];
                        cc = ctx.findClass(type_string);
                        if (!cc.is_system) return [3 /*break*/, 2];
                        sName = (cc.systemNames["java7"]);
                        return [4 /*yield*/, this.addSystemImport(cc, ctx, wr)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, sName];
                    case 2:
                        if (cc.is_union) {
                            return [2 /*return*/, "Object"];
                        }
                        _a.label = 3;
                    case 3: return [2 /*return*/, type_string];
                }
            });
        });
    };
    ;
    RangerJava7ClassWriter.prototype.getTypeString = function (type_string) {
        switch (type_string) {
            case "int":
                return "Integer";
            case "string":
                return "String";
            case "charbuffer":
                return "byte[]";
            case "char":
                return "byte";
            case "boolean":
                return "Boolean";
            case "double":
                return "Double";
        }
        ;
        return type_string;
    };
    ;
    RangerJava7ClassWriter.prototype.writeTypeDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var v_type, t_name, a_name, k_name, _a, sig, iface_name, package_name, fnNode, args, iface_dir, utilWr, package_name_1, importFork_2, i, arg, _b, _c, _d, _e, _f, _g, _h, _j, _k, cc, _l, sig_1, iface_name_1, fnNode_1, args_1, iface_dir_1, utilWr_1, package_name_3, importFork_1_1, i_1, arg_1, _m, _o, _p, _q, _r, _s, _t, b_object_set, cc_1, sName;
            return __generator(this, function (_u) {
                switch (_u.label) {
                    case 0:
                        v_type = node.value_type;
                        t_name = node.type_name;
                        a_name = node.array_type;
                        k_name = node.key_type;
                        if (((v_type == 10) || (v_type == 11)) || (v_type == 0)) {
                            v_type = node.typeNameAsType(ctx);
                        }
                        if (node.eval_type != 0) {
                            v_type = node.eval_type;
                            if ((node.eval_type_name.length) > 0) {
                                t_name = node.eval_type_name;
                            }
                            if ((node.eval_array_type.length) > 0) {
                                a_name = node.eval_array_type;
                            }
                            if ((node.eval_key_type.length) > 0) {
                                k_name = node.eval_key_type;
                            }
                        }
                        if (!node.hasFlag("optional")) return [3 /*break*/, 28];
                        _a = v_type;
                        switch (_a) {
                            case 17: return [3 /*break*/, 1];
                            case 13: return [3 /*break*/, 9];
                            case 3: return [3 /*break*/, 10];
                            case 2: return [3 /*break*/, 11];
                            case 4: return [3 /*break*/, 12];
                            case 5: return [3 /*break*/, 13];
                            case 14: return [3 /*break*/, 14];
                            case 15: return [3 /*break*/, 15];
                            case 7: return [3 /*break*/, 16];
                            case 6: return [3 /*break*/, 19];
                        }
                        return [3 /*break*/, 21];
                    case 1:
                        sig = this.buildLambdaSignature((node.expression_value));
                        iface_name = this.getSignatureInterface(sig);
                        wr.out(iface_name, false);
                        if (this.isPackaged(ctx)) {
                            package_name = ctx.getCompilerSetting("package");
                            wr.addImport(package_name + ".interfaces.*");
                        }
                        if (!(((typeof (this.iface_created[iface_name]) != "undefined" && this.iface_created.hasOwnProperty(iface_name))) == false)) return [3 /*break*/, 8];
                        fnNode = node.expression_value.children[0];
                        args = node.expression_value.children[1];
                        this.iface_created[iface_name] = true;
                        iface_dir = ".";
                        if (this.isPackaged(ctx)) {
                            iface_dir = "./interfaces/";
                        }
                        utilWr = wr.getFileWriter(iface_dir, (iface_name + ".java"));
                        if (this.isPackaged(ctx)) {
                            package_name_1 = ctx.getCompilerSetting("package");
                            if ((package_name_1.length) > 0) {
                                utilWr.out(("package " + package_name_1) + ".interfaces;", true);
                                utilWr.out(("import " + package_name_1) + ".*;", true);
                            }
                        }
                        importFork_2 = utilWr.fork();
                        utilWr.out(("public interface " + iface_name) + " { ", true);
                        utilWr.indent(1);
                        utilWr.out("public ", false);
                        return [4 /*yield*/, this.writeTypeDef(fnNode, ctx, utilWr)];
                    case 2:
                        _u.sent();
                        utilWr.out(" run(", false);
                        i = 0;
                        _u.label = 3;
                    case 3:
                        if (!(i < args.children.length)) return [3 /*break*/, 6];
                        arg = args.children[i];
                        if (i > 0) {
                            utilWr.out(", ", false);
                        }
                        utilWr.out(" final ", false);
                        return [4 /*yield*/, this.writeTypeDef(arg, ctx, utilWr)];
                    case 4:
                        _u.sent();
                        utilWr.out(" ", false);
                        utilWr.out(arg.vref, false);
                        _u.label = 5;
                    case 5:
                        i++;
                        return [3 /*break*/, 3];
                    case 6:
                        ;
                        utilWr.out(");", true);
                        utilWr.indent(-1);
                        utilWr.out("}", true);
                        return [4 /*yield*/, operatorsOf.forEach_12(utilWr.getImports(), (function (item, index) {
                                importFork_2.out(("import " + item) + ";", true);
                            }))];
                    case 7:
                        _u.sent();
                        _u.label = 8;
                    case 8: return [3 /*break*/, 27];
                    case 9:
                        wr.out("Integer", false);
                        return [3 /*break*/, 27];
                    case 10:
                        wr.out("Integer", false);
                        return [3 /*break*/, 27];
                    case 11:
                        wr.out("Double", false);
                        return [3 /*break*/, 27];
                    case 12:
                        wr.out("String", false);
                        return [3 /*break*/, 27];
                    case 13:
                        wr.out("Boolean", false);
                        return [3 /*break*/, 27];
                    case 14:
                        wr.out("byte", false);
                        return [3 /*break*/, 27];
                    case 15:
                        wr.out("byte[]", false);
                        return [3 /*break*/, 27];
                    case 16:
                        _c = (_b = wr).out;
                        _d = "HashMap<";
                        return [4 /*yield*/, this.getObjectTypeString2(k_name, ctx, wr)];
                    case 17:
                        _e = ((_d + (_u.sent())) + ",");
                        return [4 /*yield*/, this.getObjectTypeString2(a_name, ctx, wr)];
                    case 18:
                        _c.apply(_b, [(_e + (_u.sent())) + ">", false]);
                        wr.addImport("java.util.*");
                        return [3 /*break*/, 27];
                    case 19:
                        _g = (_f = wr).out;
                        _h = "ArrayList<";
                        return [4 /*yield*/, this.getObjectTypeString2(a_name, ctx, wr)];
                    case 20:
                        _g.apply(_f, [(_h + (_u.sent())) + ">", false]);
                        wr.addImport("java.util.*");
                        return [3 /*break*/, 27];
                    case 21:
                        if (!(t_name == "void")) return [3 /*break*/, 22];
                        wr.out("void", false);
                        return [3 /*break*/, 24];
                    case 22:
                        _k = (_j = wr).out;
                        return [4 /*yield*/, this.getObjectTypeString2(t_name, ctx, wr)];
                    case 23:
                        _k.apply(_j, [_u.sent(), false]);
                        _u.label = 24;
                    case 24:
                        if (!ctx.isDefinedClass(t_name)) return [3 /*break*/, 26];
                        cc = ctx.findClass(t_name);
                        if (!cc.is_system) return [3 /*break*/, 26];
                        return [4 /*yield*/, this.addSystemImport(cc, ctx, wr)];
                    case 25:
                        _u.sent();
                        _u.label = 26;
                    case 26: return [3 /*break*/, 27];
                    case 27:
                        ;
                        return [3 /*break*/, 53];
                    case 28:
                        _l = v_type;
                        switch (_l) {
                            case 17: return [3 /*break*/, 29];
                            case 13: return [3 /*break*/, 37];
                            case 3: return [3 /*break*/, 38];
                            case 2: return [3 /*break*/, 39];
                            case 14: return [3 /*break*/, 40];
                            case 15: return [3 /*break*/, 41];
                            case 4: return [3 /*break*/, 42];
                            case 5: return [3 /*break*/, 43];
                            case 7: return [3 /*break*/, 44];
                            case 6: return [3 /*break*/, 47];
                        }
                        return [3 /*break*/, 49];
                    case 29:
                        sig_1 = this.buildLambdaSignature((node.expression_value));
                        iface_name_1 = this.getSignatureInterface(sig_1);
                        wr.out(iface_name_1, false);
                        if (!(((typeof (this.iface_created[iface_name_1]) != "undefined" && this.iface_created.hasOwnProperty(iface_name_1))) == false)) return [3 /*break*/, 36];
                        fnNode_1 = node.expression_value.children[0];
                        args_1 = node.expression_value.children[1];
                        this.iface_created[iface_name_1] = true;
                        iface_dir_1 = ".";
                        if (this.isPackaged(ctx)) {
                            iface_dir_1 = "./interfaces/";
                        }
                        utilWr_1 = wr.getFileWriter(iface_dir_1, (iface_name_1 + ".java"));
                        if (this.isPackaged(ctx)) {
                            package_name_3 = ctx.getCompilerSetting("package");
                            if ((package_name_3.length) > 0) {
                                utilWr_1.out(("package " + package_name_3) + ".interfaces;", true);
                                utilWr_1.out(("import " + package_name_3) + ".*;", true);
                            }
                        }
                        importFork_1_1 = utilWr_1.fork();
                        utilWr_1.out(("public interface " + iface_name_1) + " { ", true);
                        utilWr_1.indent(1);
                        utilWr_1.out("public ", false);
                        return [4 /*yield*/, this.writeTypeDef(fnNode_1, ctx, utilWr_1)];
                    case 30:
                        _u.sent();
                        utilWr_1.out(" run(", false);
                        i_1 = 0;
                        _u.label = 31;
                    case 31:
                        if (!(i_1 < args_1.children.length)) return [3 /*break*/, 34];
                        arg_1 = args_1.children[i_1];
                        if (i_1 > 0) {
                            utilWr_1.out(", ", false);
                        }
                        utilWr_1.out(" final ", false);
                        return [4 /*yield*/, this.writeTypeDef(arg_1, ctx, utilWr_1)];
                    case 32:
                        _u.sent();
                        utilWr_1.out(" ", false);
                        utilWr_1.out(arg_1.vref, false);
                        _u.label = 33;
                    case 33:
                        i_1++;
                        return [3 /*break*/, 31];
                    case 34:
                        ;
                        utilWr_1.out(");", true);
                        utilWr_1.indent(-1);
                        utilWr_1.out("}", true);
                        return [4 /*yield*/, operatorsOf.forEach_12(utilWr_1.getImports(), (function (item, index) {
                                importFork_1_1.out(("import " + item) + ";", true);
                            }))];
                    case 35:
                        _u.sent();
                        _u.label = 36;
                    case 36: return [3 /*break*/, 52];
                    case 37:
                        wr.out("Integer", false);
                        return [3 /*break*/, 52];
                    case 38:
                        wr.out("Integer", false);
                        return [3 /*break*/, 52];
                    case 39:
                        wr.out("Double", false);
                        return [3 /*break*/, 52];
                    case 40:
                        wr.out("byte", false);
                        return [3 /*break*/, 52];
                    case 41:
                        wr.out("byte[]", false);
                        return [3 /*break*/, 52];
                    case 42:
                        wr.out("String", false);
                        return [3 /*break*/, 52];
                    case 43:
                        wr.out("Boolean", false);
                        return [3 /*break*/, 52];
                    case 44:
                        _o = (_m = wr).out;
                        _p = "HashMap<";
                        return [4 /*yield*/, this.getObjectTypeString2(k_name, ctx, wr)];
                    case 45:
                        _q = ((_p + (_u.sent())) + ",");
                        return [4 /*yield*/, this.getObjectTypeString2(a_name, ctx, wr)];
                    case 46:
                        _o.apply(_m, [(_q + (_u.sent())) + ">", false]);
                        wr.addImport("java.util.*");
                        return [3 /*break*/, 52];
                    case 47:
                        _s = (_r = wr).out;
                        _t = "ArrayList<";
                        return [4 /*yield*/, this.getObjectTypeString2(a_name, ctx, wr)];
                    case 48:
                        _s.apply(_r, [(_t + (_u.sent())) + ">", false]);
                        wr.addImport("java.util.*");
                        return [3 /*break*/, 52];
                    case 49:
                        b_object_set = false;
                        if (!ctx.isDefinedClass(t_name)) return [3 /*break*/, 51];
                        cc_1 = ctx.findClass(t_name);
                        if (cc_1.is_union) {
                            wr.out("Object", false);
                            b_object_set = true;
                        }
                        if (!cc_1.is_system) return [3 /*break*/, 51];
                        return [4 /*yield*/, this.addSystemImport(cc_1, ctx, wr)];
                    case 50:
                        _u.sent();
                        sName = (cc_1.systemNames["java7"]);
                        wr.out(sName, false);
                        return [2 /*return*/];
                    case 51:
                        if (b_object_set == false) {
                            if (t_name == "void") {
                                wr.out("void", false);
                            }
                            else {
                                wr.out(this.getTypeString(t_name), false);
                            }
                        }
                        return [3 /*break*/, 52];
                    case 52:
                        ;
                        _u.label = 53;
                    case 53: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJava7ClassWriter.prototype.WriteVRef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var currC, rootObjName, enumName, e, max_len, i, p, p_captured_mutable, part, currC_1, currC_2, p_1, p_captured_mutable_1, i_1, part_1, currC_3;
            return __generator(this, function (_a) {
                if (node.vref == "this") {
                    if (ctx.inLambda()) {
                        currC = ctx.getCurrentClass();
                        wr.out(currC.name + ".this", false);
                    }
                    else {
                        wr.out("this", false);
                    }
                    return [2 /*return*/];
                }
                if (node.eval_type == 13) {
                    if ((node.ns.length) > 1) {
                        rootObjName = node.ns[0];
                        enumName = node.ns[1];
                        e = ctx.getEnum(rootObjName);
                        if ((typeof (e) !== "undefined" && e != null)) {
                            wr.out("" + ((e.values[enumName])), false);
                            return [2 /*return*/];
                        }
                    }
                }
                max_len = node.ns.length;
                if ((node.nsp.length) > 0) {
                    for (i = 0; i < node.nsp.length; i++) {
                        p = node.nsp[i];
                        if (i == 0) {
                            p_captured_mutable = ((p.set_cnt > 0) && p.is_captured) && (p.is_class_variable == false);
                            if ((p.nameNode.value_type == 7) || (p.nameNode.value_type == 6)) {
                                p_captured_mutable = false;
                            }
                            part = node.ns[0];
                            if (part == "this") {
                                if (ctx.inLambda()) {
                                    currC_1 = ctx.getCurrentClass();
                                    wr.out(currC_1.name + ".this", false);
                                }
                                else {
                                    currC_2 = ctx.getCurrentClass();
                                    wr.out(currC_2.name + ".this", false);
                                }
                                continue;
                            }
                            if (p_captured_mutable) {
                                wr.out("[0]", false);
                            }
                        }
                        if (i > 0) {
                            wr.out(".", false);
                        }
                        if ((p.compiledName.length) > 0) {
                            wr.out(this.adjustType(p.compiledName), false);
                        }
                        else {
                            if ((p.name.length) > 0) {
                                wr.out(this.adjustType(p.name), false);
                            }
                            else {
                                wr.out(this.adjustType((node.ns[i])), false);
                            }
                        }
                        if (i < (max_len - 1)) {
                            if (p.nameNode.hasFlag("optional")) {
                            }
                        }
                    }
                    ;
                    return [2 /*return*/];
                }
                if (node.hasParamDesc) {
                    p_1 = node.paramDesc;
                    wr.out(p_1.compiledName, false);
                    p_captured_mutable_1 = ((p_1.set_cnt > 0) && p_1.is_captured) && (p_1.is_class_variable == false);
                    if ((p_1.nameNode.value_type == 7) || (p_1.nameNode.value_type == 6)) {
                        p_captured_mutable_1 = false;
                    }
                    if (p_captured_mutable_1) {
                        wr.out("[0]", false);
                    }
                    return [2 /*return*/];
                }
                for (i_1 = 0; i_1 < node.ns.length; i_1++) {
                    part_1 = node.ns[i_1];
                    if (i_1 > 0) {
                        wr.out(".", false);
                    }
                    if (part_1 == "this") {
                        if (ctx.inLambda()) {
                            currC_3 = ctx.getCurrentClass();
                            wr.out(currC_3.name + ".this", false);
                            continue;
                        }
                    }
                    wr.out(this.adjustType(part_1), false);
                }
                ;
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerJava7ClassWriter.prototype.disabledVarDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var nn, p, value, b_was_set;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasParamDesc) return [3 /*break*/, 8];
                        nn = node.children[1];
                        p = nn.paramDesc;
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("/** unused:  ", false);
                        }
                        wr.out(p.compiledName, false);
                        if (!((node.children.length) > 2)) return [3 /*break*/, 2];
                        wr.out(" = ", false);
                        ctx.setInExpr();
                        value = node.getThird();
                        return [4 /*yield*/, this.WalkNode(value, ctx, wr)];
                    case 1:
                        _a.sent();
                        ctx.unsetInExpr();
                        return [3 /*break*/, 7];
                    case 2:
                        b_was_set = false;
                        if (!(nn.value_type == 6)) return [3 /*break*/, 4];
                        wr.out(" = new ", false);
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 3:
                        _a.sent();
                        wr.out("()", false);
                        b_was_set = true;
                        _a.label = 4;
                    case 4:
                        if (!(nn.value_type == 7)) return [3 /*break*/, 6];
                        wr.out(" = new ", false);
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 5:
                        _a.sent();
                        wr.out("()", false);
                        b_was_set = true;
                        _a.label = 6;
                    case 6:
                        if ((b_was_set == false) && nn.hasFlag("optional")) {
                            wr.out(" = null", false);
                        }
                        _a.label = 7;
                    case 7:
                        if ((p.ref_cnt == 0) && (p.is_class_variable == true)) {
                            wr.out("     /** note: unused */", false);
                        }
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("   **/ ;", true);
                        }
                        else {
                            wr.out(";", false);
                            wr.newline();
                        }
                        _a.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJava7ClassWriter.prototype.writeVarDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var nn, p, p_captured_mutable, value, b_was_set;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasParamDesc) return [3 /*break*/, 13];
                        nn = node.children[1];
                        p = nn.paramDesc;
                        p_captured_mutable = ((p.set_cnt > 0) && p.is_captured) && (p.is_class_variable == false);
                        if ((nn.value_type == 7) || (nn.value_type == 6)) {
                            p_captured_mutable = false;
                        }
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("/** unused:  ", false);
                        }
                        if ((p.is_captured && (p.is_class_variable == false)) && ((nn.value_type == 7) || (nn.value_type == 6))) {
                            wr.out("final ", false);
                        }
                        else {
                            if ((p_captured_mutable == false) && ((p.set_cnt > 0) || p.is_class_variable)) {
                                wr.out("", false);
                            }
                            else {
                                wr.out("final ", false);
                            }
                        }
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 1:
                        _a.sent();
                        if (p_captured_mutable) {
                            wr.out("[]", false);
                        }
                        wr.out(" ", false);
                        wr.out(p.compiledName, false);
                        if (!((node.children.length) > 2)) return [3 /*break*/, 5];
                        wr.out(" = ", false);
                        ctx.setInExpr();
                        value = node.getThird();
                        if (!p_captured_mutable) return [3 /*break*/, 3];
                        wr.out(" new ", false);
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 2:
                        _a.sent();
                        wr.out("[]{", false);
                        _a.label = 3;
                    case 3: return [4 /*yield*/, this.WalkNode(value, ctx, wr)];
                    case 4:
                        _a.sent();
                        if (p_captured_mutable) {
                            wr.out("}", false);
                        }
                        ctx.unsetInExpr();
                        return [3 /*break*/, 12];
                    case 5:
                        if (!p_captured_mutable) return [3 /*break*/, 7];
                        wr.out(" = new ", false);
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 6:
                        _a.sent();
                        wr.out("[]{ null }", false);
                        return [3 /*break*/, 12];
                    case 7:
                        b_was_set = false;
                        if (!(nn.value_type == 6)) return [3 /*break*/, 9];
                        wr.out(" = new ", false);
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 8:
                        _a.sent();
                        wr.out("()", false);
                        b_was_set = true;
                        _a.label = 9;
                    case 9:
                        if (!(nn.value_type == 7)) return [3 /*break*/, 11];
                        wr.out(" = new ", false);
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 10:
                        _a.sent();
                        wr.out("()", false);
                        b_was_set = true;
                        _a.label = 11;
                    case 11:
                        if ((b_was_set == false) && nn.hasFlag("optional")) {
                            wr.out(" = null", false);
                        }
                        _a.label = 12;
                    case 12:
                        if ((p.ref_cnt == 0) && (p.is_class_variable == true)) {
                            wr.out("     /** note: unused */", false);
                        }
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("   **/ ;", true);
                        }
                        else {
                            wr.out(";", false);
                            wr.newline();
                        }
                        _a.label = 13;
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJava7ClassWriter.prototype.writeArgsDef = function (fnDesc, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var i, arg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < fnDesc.params.length)) return [3 /*break*/, 4];
                        arg = fnDesc.params[i];
                        if (i > 0) {
                            wr.out(",", false);
                        }
                        wr.out(" final ", false);
                        return [4 /*yield*/, this.writeTypeDef(arg.nameNode, ctx, wr)];
                    case 2:
                        _a.sent();
                        wr.out((" " + arg.compiledName) + " ", false);
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJava7ClassWriter.prototype.CustomOperator = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fc, cmd, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fc = node.getFirst();
                        cmd = fc.vref;
                        if (!(cmd == "return")) return [3 /*break*/, 3];
                        wr.newline();
                        if (!((node.children.length) > 1)) return [3 /*break*/, 2];
                        value = node.getSecond();
                        wr.out("return ", false);
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(value, ctx, wr)];
                    case 1:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out(";", true);
                        return [3 /*break*/, 3];
                    case 2:
                        wr.out("return;", true);
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJava7ClassWriter.prototype.buildLambdaSignature = function (node) {
        var exp = node;
        var exp_s = "";
        var fc = exp.getFirst();
        var args = exp.getSecond();
        exp_s = exp_s + fc.buildTypeSignature();
        exp_s = exp_s + "(";
        for (var i = 0; i < args.children.length; i++) {
            var arg = args.children[i];
            exp_s = exp_s + arg.buildTypeSignature();
            exp_s = exp_s + ",";
        }
        ;
        exp_s = exp_s + ")";
        return exp_s;
    };
    ;
    RangerJava7ClassWriter.prototype.CreateLambdaCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fName, givenArgs, rv, args, param, i, arg, n;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fName = node.children[0];
                        givenArgs = node.children[1];
                        if ((typeof (fName.expression_value) !== "undefined" && fName.expression_value != null)) {
                            rv = fName.expression_value.children[0];
                            args = fName.expression_value.children[1];
                        }
                        else {
                            param = ctx.getVariableDef(fName.vref);
                            rv = param.nameNode.expression_value.children[0];
                            args = param.nameNode.expression_value.children[1];
                        }
                        return [4 /*yield*/, this.WalkNode(fName, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out(".run(", false);
                        ctx.setInExpr();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < args.children.length)) return [3 /*break*/, 5];
                        arg = args.children[i];
                        n = givenArgs.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        if (!(arg.value_type != 0)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.WalkNode(n, ctx, wr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        ctx.unsetInExpr();
                        if (ctx.expressionLevel() == 0) {
                            wr.out(");", true);
                        }
                        else {
                            wr.out(")", false);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJava7ClassWriter.prototype.writeArrayLiteral = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d;
            var _this = this;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        wr.addImport("java.util.*");
                        wr.out("new ArrayList<", false);
                        _b = (_a = wr).out;
                        return [4 /*yield*/, this.getObjectTypeString2(node.eval_array_type, ctx, wr)];
                    case 1:
                        _b.apply(_a, [_e.sent(), false]);
                        wr.out(">(Arrays.asList( new ", false);
                        _d = (_c = wr).out;
                        return [4 /*yield*/, this.getObjectTypeString2(node.eval_array_type, ctx, wr)];
                    case 2:
                        _d.apply(_c, [_e.sent(), false]);
                        wr.out("[] {", false);
                        return [4 /*yield*/, operatorsOf.forEach_15(node.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (index > 0) {
                                                wr.out(", ", false);
                                            }
                                            return [4 /*yield*/, this.WalkNode(item, ctx, wr)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 3:
                        _e.sent();
                        wr.out("}))", false);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJava7ClassWriter.prototype.CreateLambda = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var lambdaCtx, fnNode, args, body, sig, iface_name, iface_dir, utilWr_1, package_name_2, importFork_3, i, arg, i_1, arg_1, i_2, item, i_3, cname;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        lambdaCtx = node.lambda_ctx;
                        fnNode = node.children[0];
                        args = node.children[1];
                        body = node.children[2];
                        sig = this.buildLambdaSignature(node);
                        iface_name = this.getSignatureInterface(sig);
                        if (!(((typeof (this.iface_created[iface_name]) != "undefined" && this.iface_created.hasOwnProperty(iface_name))) == false)) return [3 /*break*/, 7];
                        this.iface_created[iface_name] = true;
                        iface_dir = ".";
                        if (this.isPackaged(ctx)) {
                            iface_dir = "./interfaces/";
                        }
                        utilWr_1 = wr.getFileWriter(iface_dir, (iface_name + ".java"));
                        if (this.isPackaged(ctx)) {
                            package_name_2 = ctx.getCompilerSetting("package");
                            if ((package_name_2.length) > 0) {
                                utilWr_1.out(("package " + package_name_2) + ".interfaces;", true);
                                utilWr_1.out(("import " + package_name_2) + ".*;", true);
                            }
                        }
                        importFork_3 = utilWr_1.fork();
                        utilWr_1.out(("public interface " + iface_name) + " { ", true);
                        utilWr_1.indent(1);
                        utilWr_1.out("public ", false);
                        return [4 /*yield*/, this.writeTypeDef(fnNode, ctx, utilWr_1)];
                    case 1:
                        _a.sent();
                        utilWr_1.out(" run(", false);
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < args.children.length)) return [3 /*break*/, 5];
                        arg = args.children[i];
                        if (i > 0) {
                            utilWr_1.out(", ", false);
                        }
                        utilWr_1.out(" final ", false);
                        return [4 /*yield*/, this.writeTypeDef(arg, lambdaCtx, utilWr_1)];
                    case 3:
                        _a.sent();
                        utilWr_1.out(" ", false);
                        utilWr_1.out(arg.vref, false);
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        utilWr_1.out(");", true);
                        utilWr_1.indent(-1);
                        utilWr_1.out("}", true);
                        return [4 /*yield*/, operatorsOf.forEach_12(utilWr_1.getImports(), (function (item, index) {
                                importFork_3.out(("import " + item) + ";", true);
                            }))];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7:
                        wr.out(("new " + iface_name) + "() { ", true);
                        wr.indent(1);
                        wr.out("public ", false);
                        return [4 /*yield*/, this.writeTypeDef(fnNode, ctx, wr)];
                    case 8:
                        _a.sent();
                        wr.out(" run(", false);
                        i_1 = 0;
                        _a.label = 9;
                    case 9:
                        if (!(i_1 < args.children.length)) return [3 /*break*/, 12];
                        arg_1 = args.children[i_1];
                        if (i_1 > 0) {
                            wr.out(", ", false);
                        }
                        wr.out(" final ", false);
                        return [4 /*yield*/, this.writeTypeDef(arg_1, lambdaCtx, wr)];
                    case 10:
                        _a.sent();
                        wr.out(" ", false);
                        wr.out(arg_1.vref, false);
                        _a.label = 11;
                    case 11:
                        i_1++;
                        return [3 /*break*/, 9];
                    case 12:
                        ;
                        wr.out(") {", true);
                        wr.indent(1);
                        lambdaCtx.restartExpressionLevel();
                        lambdaCtx.is_lambda = true;
                        i_2 = 0;
                        _a.label = 13;
                    case 13:
                        if (!(i_2 < body.children.length)) return [3 /*break*/, 16];
                        item = body.children[i_2];
                        return [4 /*yield*/, this.WalkNode(item, lambdaCtx, wr)];
                    case 14:
                        _a.sent();
                        _a.label = 15;
                    case 15:
                        i_2++;
                        return [3 /*break*/, 13];
                    case 16:
                        ;
                        wr.newline();
                        for (i_3 = 0; i_3 < lambdaCtx.captured_variables.length; i_3++) {
                            cname = lambdaCtx.captured_variables[i_3];
                            wr.out("// captured var " + cname, true);
                        }
                        ;
                        wr.indent(-1);
                        wr.out("}", true);
                        wr.indent(-1);
                        wr.out("}", false);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJava7ClassWriter.prototype.getCounters = function (ctx) {
        var root = ctx.getRoot();
        var counters = root.counters;
        if (counters.b_counted == false) {
            var list = Object.keys(root.definedClasses);
            for (var i = 0; i < list.length; i++) {
                var name = list[i];
                if ((name.indexOf("operatorsOf")) == 0) {
                    counters.operator_cnt = counters.operator_cnt + 1;
                }
                if ((name.indexOf("Map_")) == 0) {
                    counters.immutable_cnt = counters.immutable_cnt + 1;
                }
                if ((name.indexOf("Vector_")) == 0) {
                    counters.immutable_cnt = counters.immutable_cnt + 1;
                }
            }
            ;
        }
        counters.b_counted = true;
        return counters;
    };
    ;
    RangerJava7ClassWriter.prototype.writeClass = function (node, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cl, declaredVariable, i, pName, pC, i_1, pvar, class_dir, package_end, wr, package_name, importFork, counters, i_2, dd, i_3, pName_1, i_4, pvar_1, constr, subCtx, i_5, variant, subCtx_1, i_6, fnVar, mVs, i_7, variant_1, subCtx_2, import_list, i_8, codeStr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cl = node.clDesc;
                        if (typeof (cl) === "undefined") {
                            return [2 /*return*/];
                        }
                        declaredVariable = {};
                        if ((cl.extends_classes.length) > 0) {
                            for (i = 0; i < cl.extends_classes.length; i++) {
                                pName = cl.extends_classes[i];
                                pC = ctx.findClass(pName);
                                for (i_1 = 0; i_1 < pC.variables.length; i_1++) {
                                    pvar = pC.variables[i_1];
                                    declaredVariable[pvar.name] = true;
                                }
                                ;
                            }
                            ;
                        }
                        class_dir = ".";
                        package_end = "";
                        if (this.isPackaged(ctx)) {
                            if ((cl.name.indexOf("operatorsOf")) == 0) {
                                class_dir = "./operators/";
                                package_end = ".operators";
                            }
                            if ((cl.name.indexOf("Map_")) == 0) {
                                class_dir = "./immutables/";
                                package_end = ".immutables";
                            }
                            if ((cl.name.indexOf("Vector_")) == 0) {
                                class_dir = "./immutables/";
                                package_end = ".immutables";
                            }
                        }
                        wr = orig_wr.getFileWriter(class_dir, (cl.name + ".java"));
                        package_name = ctx.getCompilerSetting("package");
                        if (this.isPackaged(ctx)) {
                            if ((package_name.length) > 0) {
                                wr.out((("package " + package_name) + package_end) + ";", true);
                            }
                        }
                        importFork = wr.fork();
                        if (this.isPackaged(ctx)) {
                            counters = this.getCounters(ctx);
                            if (counters.interface_cnt > 0) {
                                importFork.addImport(package_name + ".interfaces.*");
                            }
                            if (counters.immutable_cnt > 0) {
                                importFork.addImport(package_name + ".immutables.*");
                            }
                            if (counters.operator_cnt > 0) {
                                importFork.addImport(package_name + ".operators.*");
                            }
                            if ((package_end.length) > 0) {
                                importFork.addImport(package_name + ".*");
                            }
                        }
                        for (i_2 = 0; i_2 < cl.capturedLocals.length; i_2++) {
                            dd = cl.capturedLocals[i_2];
                            if (dd.is_class_variable == false) {
                                if (dd.set_cnt > 0) {
                                    if (ctx.hasCompilerFlag("allow-mutate")) {
                                    }
                                    else {
                                    }
                                }
                            }
                        }
                        ;
                        wr.out("", true);
                        wr.out("public class " + cl.name, false);
                        if ((cl.extends_classes.length) > 0) {
                            wr.out(" extends ", false);
                            for (i_3 = 0; i_3 < cl.extends_classes.length; i_3++) {
                                pName_1 = cl.extends_classes[i_3];
                                wr.out(pName_1, false);
                            }
                            ;
                        }
                        wr.out(" { ", true);
                        wr.indent(1);
                        wr.createTag("utilities");
                        i_4 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_4 < cl.variables.length)) return [3 /*break*/, 4];
                        pvar_1 = cl.variables[i_4];
                        if ((typeof (declaredVariable[pvar_1.name]) != "undefined" && declaredVariable.hasOwnProperty(pvar_1.name))) {
                            return [3 /*break*/, 3];
                        }
                        wr.out("public ", false);
                        return [4 /*yield*/, this.writeVarDef(pvar_1.node, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i_4++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        if (!cl.has_constructor) return [3 /*break*/, 7];
                        constr = cl.constructor_fn;
                        wr.out("", true);
                        wr.out(cl.name + "(", false);
                        return [4 /*yield*/, this.writeArgsDef(constr, ctx, wr)];
                    case 5:
                        _a.sent();
                        wr.out(" ) {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx = constr.fnCtx;
                        subCtx.is_function = true;
                        return [4 /*yield*/, this.WalkNode(constr.fnBody, subCtx, wr)];
                    case 6:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 7;
                    case 7:
                        i_5 = 0;
                        _a.label = 8;
                    case 8:
                        if (!(i_5 < cl.static_methods.length)) return [3 /*break*/, 15];
                        variant = cl.static_methods[i_5];
                        wr.out("", true);
                        if (variant.nameNode.hasFlag("main") && (variant.nameNode.code.filename != ctx.getRootFile())) {
                            return [3 /*break*/, 14];
                        }
                        if (!variant.nameNode.hasFlag("main")) return [3 /*break*/, 9];
                        ctx.setCompilerSetting("mainclass", cl.name);
                        wr.out("public static void main(String [] args ) {", true);
                        return [3 /*break*/, 12];
                    case 9:
                        wr.out("public static ", false);
                        return [4 /*yield*/, this.writeTypeDef(variant.nameNode, ctx, wr)];
                    case 10:
                        _a.sent();
                        wr.out(" ", false);
                        wr.out(variant.compiledName + "(", false);
                        return [4 /*yield*/, this.writeArgsDef(variant, ctx, wr)];
                    case 11:
                        _a.sent();
                        wr.out(") {", true);
                        _a.label = 12;
                    case 12:
                        wr.indent(1);
                        wr.newline();
                        subCtx_1 = variant.fnCtx;
                        subCtx_1.is_function = true;
                        return [4 /*yield*/, this.WalkNode(variant.fnBody, subCtx_1, wr)];
                    case 13:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 14;
                    case 14:
                        i_5++;
                        return [3 /*break*/, 8];
                    case 15:
                        ;
                        i_6 = 0;
                        _a.label = 16;
                    case 16:
                        if (!(i_6 < cl.defined_variants.length)) return [3 /*break*/, 24];
                        fnVar = cl.defined_variants[i_6];
                        mVs = cl.method_variants[fnVar];
                        i_7 = 0;
                        _a.label = 17;
                    case 17:
                        if (!(i_7 < mVs.variants.length)) return [3 /*break*/, 22];
                        variant_1 = mVs.variants[i_7];
                        wr.out("", true);
                        wr.out("public ", false);
                        return [4 /*yield*/, this.writeTypeDef(variant_1.nameNode, ctx, wr)];
                    case 18:
                        _a.sent();
                        wr.out(" ", false);
                        wr.out(variant_1.compiledName + "(", false);
                        return [4 /*yield*/, this.writeArgsDef(variant_1, ctx, wr)];
                    case 19:
                        _a.sent();
                        wr.out(") {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx_2 = variant_1.fnCtx;
                        subCtx_2.is_function = true;
                        return [4 /*yield*/, this.WalkNode(variant_1.fnBody, subCtx_2, wr)];
                    case 20:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 21;
                    case 21:
                        i_7++;
                        return [3 /*break*/, 17];
                    case 22:
                        ;
                        _a.label = 23;
                    case 23:
                        i_6++;
                        return [3 /*break*/, 16];
                    case 24:
                        ;
                        wr.indent(-1);
                        wr.out("}", true);
                        import_list = wr.getImports();
                        for (i_8 = 0; i_8 < import_list.length; i_8++) {
                            codeStr = import_list[i_8];
                            importFork.out(("import " + codeStr) + ";", true);
                        }
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJava7ClassWriter.prototype.CreateServices = function (parser, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerJava7ClassWriter.prototype.CreatePages = function (parser, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, operatorsOf_13.forEach_25(ctx.appPages, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.CreatePage(parser, item, ctx, orig_wr)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJava7ClassWriter.prototype.CreatePage = function (parser, node, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var writer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        writer = new AndroidPageWriter();
                        writer.classWriter = this;
                        return [4 /*yield*/, writer.CreatePage(parser, node, ctx, orig_wr)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    return RangerJava7ClassWriter;
}(RangerGenericClassWriter));
exports.RangerJava7ClassWriter = RangerJava7ClassWriter;
var RangerSwift3ClassWriter = /** @class */ (function (_super) {
    __extends(RangerSwift3ClassWriter, _super);
    function RangerSwift3ClassWriter() {
        var _this = _super.call(this) || this;
        _this.header_created = false;
        return _this;
    }
    RangerSwift3ClassWriter.prototype.adjustType = function (tn) {
        if (tn == "this") {
            return "self";
        }
        return tn;
    };
    ;
    RangerSwift3ClassWriter.prototype.getObjectTypeString = function (type_string, ctx) {
        if (ctx.isDefinedClass(type_string)) {
            var cc = ctx.findClass(type_string);
            if (cc.is_union) {
                return "Any";
            }
            if (cc.is_system) {
                var sysName = cc.systemNames["swift3"];
                if ((typeof (sysName) !== "undefined" && sysName != null)) {
                    return sysName;
                }
                else {
                    var node = new CodeNode(new SourceCode(""), 0, 0);
                    ctx.addError(node, ("No system class " + type_string) + "defined for Swift ");
                }
            }
        }
        switch (type_string) {
            case "int":
                return "Int";
            case "string":
                return "String";
            case "charbuffer":
                return "[UInt8]";
            case "char":
                return "UInt8";
            case "boolean":
                return "Bool";
            case "double":
                return "Double";
        }
        ;
        return type_string;
    };
    ;
    RangerSwift3ClassWriter.prototype.getTypeString = function (type_string) {
        switch (type_string) {
            case "int":
                return "Int";
            case "string":
                return "String";
            case "charbuffer":
                return "[UInt8]";
            case "char":
                return "UInt8";
            case "boolean":
                return "Bool";
            case "double":
                return "Double";
        }
        ;
        return type_string;
    };
    ;
    RangerSwift3ClassWriter.prototype.writeTypeDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var v_type, t_name, a_name, k_name, _a, rv, sec, i, arg, cc, sysName;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        v_type = node.value_type;
                        t_name = node.type_name;
                        a_name = node.array_type;
                        k_name = node.key_type;
                        if (((v_type == 10) || (v_type == 11)) || (v_type == 0)) {
                            v_type = node.typeNameAsType(ctx);
                        }
                        if (node.eval_type != 0) {
                            v_type = node.eval_type;
                            if ((node.eval_type_name.length) > 0) {
                                t_name = node.eval_type_name;
                            }
                            if ((node.eval_array_type.length) > 0) {
                                a_name = node.eval_array_type;
                            }
                            if ((node.eval_key_type.length) > 0) {
                                k_name = node.eval_key_type;
                            }
                        }
                        _a = v_type;
                        switch (_a) {
                            case 17: return [3 /*break*/, 1];
                            case 13: return [3 /*break*/, 7];
                            case 3: return [3 /*break*/, 8];
                            case 2: return [3 /*break*/, 9];
                            case 4: return [3 /*break*/, 10];
                            case 14: return [3 /*break*/, 11];
                            case 15: return [3 /*break*/, 12];
                            case 5: return [3 /*break*/, 13];
                            case 7: return [3 /*break*/, 14];
                            case 6: return [3 /*break*/, 15];
                        }
                        return [3 /*break*/, 16];
                    case 1:
                        rv = node.expression_value.children[0];
                        sec = node.expression_value.children[1];
                        /** unused:  const fc : CodeNode  = sec.getFirst()   **/
                        wr.out("(", false);
                        wr.out("(", false);
                        i = 0;
                        _b.label = 2;
                    case 2:
                        if (!(i < sec.children.length)) return [3 /*break*/, 5];
                        arg = sec.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        wr.out(" _ : ", false);
                        return [4 /*yield*/, this.writeTypeDef(arg, ctx, wr)];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        wr.out(") -> ", false);
                        return [4 /*yield*/, this.writeTypeDef(rv, ctx, wr)];
                    case 6:
                        _b.sent();
                        wr.out(")", false);
                        return [3 /*break*/, 17];
                    case 7:
                        wr.out("Int", false);
                        return [3 /*break*/, 17];
                    case 8:
                        wr.out("Int", false);
                        return [3 /*break*/, 17];
                    case 9:
                        wr.out("Double", false);
                        return [3 /*break*/, 17];
                    case 10:
                        wr.out("String", false);
                        return [3 /*break*/, 17];
                    case 11:
                        wr.out("UInt8", false);
                        return [3 /*break*/, 17];
                    case 12:
                        wr.out("[UInt8]", false);
                        return [3 /*break*/, 17];
                    case 13:
                        wr.out("Bool", false);
                        return [3 /*break*/, 17];
                    case 14:
                        wr.out(((("[" + this.getObjectTypeString(k_name, ctx)) + ":") + this.getObjectTypeString(a_name, ctx)) + "]", false);
                        return [3 /*break*/, 17];
                    case 15:
                        wr.out(("[" + this.getObjectTypeString(a_name, ctx)) + "]", false);
                        return [3 /*break*/, 17];
                    case 16:
                        if (t_name == "void") {
                            wr.out("Void", false);
                            return [2 /*return*/];
                        }
                        if (ctx.isDefinedClass(t_name)) {
                            cc = ctx.findClass(t_name);
                            if (cc.is_union) {
                                wr.out("Any", false);
                                if (node.hasFlag("optional")) {
                                    wr.out("?", false);
                                }
                                return [2 /*return*/];
                            }
                            if (cc.is_system) {
                                sysName = cc.systemNames["swift3"];
                                if ((typeof (sysName) !== "undefined" && sysName != null)) {
                                    wr.out(sysName, false);
                                }
                                else {
                                    ctx.addError(node, ("No system class " + t_name) + "defined for Swift ");
                                }
                                if (node.hasFlag("optional")) {
                                    wr.out("?", false);
                                }
                                return [2 /*return*/];
                            }
                        }
                        wr.out(this.getTypeString(t_name), false);
                        return [3 /*break*/, 17];
                    case 17:
                        ;
                        if (node.hasFlag("optional")) {
                            wr.out("?", false);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerSwift3ClassWriter.prototype.WriteEnum = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var rootObjName, e, enumName, pp, nn;
            return __generator(this, function (_a) {
                if (node.eval_type == 13) {
                    rootObjName = node.ns[0];
                    e = ctx.getEnum(rootObjName);
                    if ((typeof (e) !== "undefined" && e != null)) {
                        enumName = node.ns[1];
                        wr.out("" + ((e.values[enumName])), false);
                    }
                    else {
                        if (node.hasParamDesc) {
                            pp = node.paramDesc;
                            nn = pp.nameNode;
                            wr.out(nn.vref, false);
                        }
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerSwift3ClassWriter.prototype.WriteVRef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var rootObjName, enumName, e, max_len, i, p, part, uc, currC, up, p_1, part_1, uc_1, currC_1, up_1, i_1, part_2, uc_2, currC_2, up_2, classDesc;
            return __generator(this, function (_a) {
                if (node.vref == "this") {
                    wr.out("self", false);
                    return [2 /*return*/];
                }
                if (node.eval_type == 13) {
                    if ((node.ns.length) > 1) {
                        rootObjName = node.ns[0];
                        enumName = node.ns[1];
                        e = ctx.getEnum(rootObjName);
                        if ((typeof (e) !== "undefined" && e != null)) {
                            wr.out("" + ((e.values[enumName])), false);
                            return [2 /*return*/];
                        }
                    }
                }
                max_len = node.ns.length;
                if ((node.nsp.length) > 0) {
                    for (i = 0; i < node.nsp.length; i++) {
                        p = node.nsp[i];
                        if (i == 0) {
                            part = node.ns[0];
                            if (part == "this") {
                                wr.out("self", false);
                                continue;
                            }
                            if ((part != "this") && ctx.isMemberVariable(part)) {
                                uc = ctx.getCurrentClass();
                                currC = uc;
                                up = currC.findVariable(part);
                                if ((typeof (up) !== "undefined" && up != null)) {
                                    if (false == ctx.isInStatic()) {
                                        wr.out("self.", false);
                                    }
                                }
                            }
                        }
                        if (i > 0) {
                            wr.out(".", false);
                        }
                        if ((p.compiledName.length) > 0) {
                            wr.out(this.adjustType(p.compiledName), false);
                        }
                        else {
                            if ((p.name.length) > 0) {
                                wr.out(this.adjustType(p.name), false);
                            }
                            else {
                                wr.out(this.adjustType((node.ns[i])), false);
                            }
                        }
                        if (i < (max_len - 1)) {
                            if (p.nameNode.hasFlag("optional")) {
                                wr.out("!", false);
                            }
                        }
                    }
                    ;
                    return [2 /*return*/];
                }
                if (node.hasParamDesc) {
                    p_1 = node.paramDesc;
                    part_1 = node.ns[0];
                    if ((part_1 != "this") && ctx.isMemberVariable(part_1)) {
                        uc_1 = ctx.getCurrentClass();
                        currC_1 = uc_1;
                        up_1 = currC_1.findVariable(part_1);
                        if ((typeof (up_1) !== "undefined" && up_1 != null)) {
                            if (false == ctx.isInStatic()) {
                                wr.out("self.", false);
                            }
                        }
                    }
                    wr.out(p_1.compiledName, false);
                    return [2 /*return*/];
                }
                for (i_1 = 0; i_1 < node.ns.length; i_1++) {
                    part_2 = node.ns[i_1];
                    if (i_1 == 0) {
                        if ((part_2 != "this") && ctx.isMemberVariable(part_2)) {
                            uc_2 = ctx.getCurrentClass();
                            currC_2 = uc_2;
                            up_2 = currC_2.findVariable(part_2);
                            if ((typeof (up_2) !== "undefined" && up_2 != null)) {
                                if (false == ctx.isInStatic()) {
                                    wr.out("self.", false);
                                }
                            }
                        }
                        if (ctx.hasClass(part_2)) {
                            classDesc = ctx.findClass(part_2);
                            wr.out(classDesc.compiledName, false);
                            continue;
                        }
                    }
                    if (i_1 > 0) {
                        wr.out(".", false);
                    }
                    wr.out(this.adjustType(part_2), false);
                }
                ;
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerSwift3ClassWriter.prototype.writeVarDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var nn, p, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasParamDesc) return [3 /*break*/, 8];
                        nn = node.children[1];
                        p = nn.paramDesc;
                        if (nn.hasFlag("optional")) {
                            if (((p.set_cnt == 1) && (p.ref_cnt == 2)) && (p.is_class_variable == false)) {
                                ctx.addError(node, "Optional variable is only set but never read.");
                            }
                        }
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("/** unused:  ", false);
                        }
                        if ((p.set_cnt > 0) || p.is_class_variable) {
                            wr.out(("var " + p.compiledName) + " : ", false);
                        }
                        else {
                            wr.out(("let " + p.compiledName) + " : ", false);
                        }
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 1:
                        _a.sent();
                        if (!((node.children.length) > 2)) return [3 /*break*/, 3];
                        wr.out(" = ", false);
                        ctx.setInExpr();
                        value = node.getThird();
                        return [4 /*yield*/, this.WalkNode(value, ctx, wr)];
                    case 2:
                        _a.sent();
                        ctx.unsetInExpr();
                        return [3 /*break*/, 7];
                    case 3:
                        if (!(nn.value_type == 6)) return [3 /*break*/, 5];
                        wr.out(" = ", false);
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 4:
                        _a.sent();
                        wr.out("()", false);
                        _a.label = 5;
                    case 5:
                        if (!(nn.value_type == 7)) return [3 /*break*/, 7];
                        wr.out(" = ", false);
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 6:
                        _a.sent();
                        wr.out("()", false);
                        _a.label = 7;
                    case 7:
                        if ((p.ref_cnt == 0) && (p.is_class_variable == true)) {
                            wr.out("     /** note: unused */", false);
                        }
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("   **/ ", true);
                        }
                        else {
                            wr.newline();
                        }
                        _a.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerSwift3ClassWriter.prototype.writeArgsDef = function (fnDesc, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var i, arg, nn;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < fnDesc.params.length)) return [3 /*break*/, 4];
                        arg = fnDesc.params[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        wr.out(arg.compiledName + " : ", false);
                        nn = arg.nameNode;
                        if (nn.value_type == 17) {
                            wr.out("  @escaping  ", false);
                        }
                        return [4 /*yield*/, this.writeTypeDef(arg.nameNode, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerSwift3ClassWriter.prototype.writeArgsDefWithLocals = function (fnDesc, localFnDesc, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var i, arg, local, nn;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if ((fnDesc.params.length) != (localFnDesc.params.length)) {
                            ctx.addError(localFnDesc.node, "Parameter count does not match with the function prototype");
                            return [2 /*return*/];
                        }
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < fnDesc.params.length)) return [3 /*break*/, 4];
                        arg = fnDesc.params[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        local = localFnDesc.params[i];
                        if (local.name != arg.name) {
                            wr.out(arg.compiledName + " ", false);
                        }
                        wr.out(local.compiledName + " : ", false);
                        nn = arg.nameNode;
                        if (nn.hasFlag("strong")) {
                            if (nn.value_type == 17) {
                                wr.out("  @escaping  ", false);
                            }
                        }
                        return [4 /*yield*/, this.writeTypeDef(arg.nameNode, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerSwift3ClassWriter.prototype.CreateCallExpression = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var obj, method, args, i, arg, clDef, clMethod, mm, pDesc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.has_call) return [3 /*break*/, 10];
                        obj = node.getSecond();
                        method = node.getThird();
                        args = node.children[3];
                        wr.out("(", false);
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(obj, ctx, wr)];
                    case 1:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out(").", false);
                        wr.out(method.vref, false);
                        wr.out("(", false);
                        ctx.setInExpr();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < args.children.length)) return [3 /*break*/, 9];
                        arg = args.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        if (!ctx.isDefinedClass(obj.eval_type_name)) return [3 /*break*/, 5];
                        clDef = ctx.findClass(obj.eval_type_name);
                        clMethod = clDef.findMethod(method.vref);
                        if (!(typeof (clMethod) !== "undefined" && clMethod != null)) return [3 /*break*/, 4];
                        mm = clMethod;
                        pDesc = mm.params[i];
                        wr.out(pDesc.compiledName + " : ", false);
                        return [4 /*yield*/, this.WalkNode(arg, ctx, wr)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 8];
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        ctx.addError(arg, "Could not find evaluated class for the call");
                        _a.label = 6;
                    case 6: return [4 /*yield*/, this.WalkNode(arg, ctx, wr)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        i++;
                        return [3 /*break*/, 2];
                    case 9:
                        ;
                        ctx.unsetInExpr();
                        wr.out(")", false);
                        if (ctx.expressionLevel() == 0) {
                            wr.out(";", true);
                        }
                        _a.label = 10;
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerSwift3ClassWriter.prototype.writeFnCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fc, fnName, givenArgs, i, arg, defVal, fc_1, n;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasFnCall) return [3 /*break*/, 10];
                        fc = node.getFirst();
                        fnName = node.fnDesc.nameNode;
                        if (ctx.expressionLevel() == 0) {
                            if (fnName.type_name != "void") {
                                wr.out("_ = ", false);
                            }
                        }
                        return [4 /*yield*/, this.WriteVRef(fc, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out("(", false);
                        ctx.setInExpr();
                        givenArgs = node.getSecond();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < node.fnDesc.params.length)) return [3 /*break*/, 9];
                        arg = node.fnDesc.params[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        if (!((givenArgs.children.length) <= i)) return [3 /*break*/, 6];
                        defVal = arg.nameNode.getFlag("default");
                        if (!(typeof (defVal) !== "undefined" && defVal != null)) return [3 /*break*/, 4];
                        fc_1 = defVal.vref_annotation.getFirst();
                        return [4 /*yield*/, this.WalkNode(fc_1, ctx, wr)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        ctx.addError(node, "Default argument was missing");
                        _a.label = 5;
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        n = givenArgs.children[i];
                        wr.out(arg.compiledName + " : ", false);
                        return [4 /*yield*/, this.WalkNode(n, ctx, wr)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        i++;
                        return [3 /*break*/, 2];
                    case 9:
                        ;
                        ctx.unsetInExpr();
                        wr.out(")", false);
                        if (ctx.expressionLevel() == 0) {
                            wr.newline();
                        }
                        _a.label = 10;
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerSwift3ClassWriter.prototype.CreateLambdaCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fName, givenArgs, rv, args, param, i, arg, n;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fName = node.children[0];
                        givenArgs = node.children[1];
                        if ((typeof (fName.expression_value) !== "undefined" && fName.expression_value != null)) {
                            rv = fName.expression_value.children[0];
                            args = fName.expression_value.children[1];
                        }
                        else {
                            param = ctx.getVariableDef(fName.vref);
                            rv = param.nameNode.expression_value.children[0];
                            args = param.nameNode.expression_value.children[1];
                        }
                        if (ctx.expressionLevel() == 0) {
                            if (rv.type_name != "void") {
                                wr.out("_ = ", false);
                            }
                        }
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(fName, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out("(", false);
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < args.children.length)) return [3 /*break*/, 5];
                        arg = args.children[i];
                        n = givenArgs.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        if (!(arg.value_type != 0)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.WalkNode(n, ctx, wr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        ctx.unsetInExpr();
                        wr.out(")", false);
                        if (ctx.expressionLevel() == 0) {
                            wr.out(";", true);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerSwift3ClassWriter.prototype.CreateLambda = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var lambdaCtx, fnNode, args, body, i, arg, i_1, item, i_2, cname;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        lambdaCtx = node.lambda_ctx;
                        fnNode = node.children[0];
                        args = node.children[1];
                        body = node.children[2];
                        wr.out("({ (", false);
                        for (i = 0; i < args.children.length; i++) {
                            arg = args.children[i];
                            if (i > 0) {
                                wr.out(", ", false);
                            }
                            wr.out(arg.vref, false);
                        }
                        ;
                        wr.out(") ->  ", false);
                        return [4 /*yield*/, this.writeTypeDef(fnNode, lambdaCtx, wr)];
                    case 1:
                        _a.sent();
                        wr.out(" in ", true);
                        wr.indent(1);
                        lambdaCtx.restartExpressionLevel();
                        i_1 = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i_1 < body.children.length)) return [3 /*break*/, 5];
                        item = body.children[i_1];
                        return [4 /*yield*/, this.WalkNode(item, lambdaCtx, wr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i_1++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        wr.newline();
                        for (i_2 = 0; i_2 < lambdaCtx.captured_variables.length; i_2++) {
                            cname = lambdaCtx.captured_variables[i_2];
                            wr.out("// captured var " + cname, true);
                        }
                        ;
                        wr.indent(-1);
                        wr.out("})", false);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerSwift3ClassWriter.prototype.writeNewCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cl, constr, givenArgs, i, arg, n;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasNewOper) return [3 /*break*/, 6];
                        cl = node.clDesc;
                        /** unused:  const fc : CodeNode  = node.getSecond()   **/
                        wr.out(node.clDesc.name, false);
                        wr.out("(", false);
                        constr = cl.constructor_fn;
                        givenArgs = node.getThird();
                        if (!(typeof (constr) !== "undefined" && constr != null)) return [3 /*break*/, 5];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < constr.params.length)) return [3 /*break*/, 4];
                        arg = constr.params[i];
                        n = givenArgs.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        wr.out(arg.name + " : ", false);
                        return [4 /*yield*/, this.WalkNode(n, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        _a.label = 5;
                    case 5:
                        wr.out(")", false);
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerSwift3ClassWriter.prototype.haveSameSig = function (fn1, fn2, ctx) {
        if (fn1.name != fn2.name) {
            return false;
        }
        var match = new RangerArgMatch();
        var n1 = fn1.nameNode;
        var n2 = fn1.nameNode;
        if (match.doesDefsMatch(n1, n2, ctx) == false) {
            return false;
        }
        if ((fn1.params.length) != (fn2.params.length)) {
            return false;
        }
        for (var i = 0; i < fn1.params.length; i++) {
            var p = fn1.params[i];
            var p2 = fn2.params[i];
            if (match.doesDefsMatch((p.nameNode), (p2.nameNode), ctx) == false) {
                return false;
            }
        }
        ;
        return true;
    };
    ;
    RangerSwift3ClassWriter.prototype.CustomOperator = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fc, cmd, condition, case_nodes, found_default, i, ch, blockName;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fc = node.getFirst();
                        cmd = fc.vref;
                        if (!(cmd == "switch")) return [3 /*break*/, 8];
                        condition = node.getSecond();
                        case_nodes = node.getThird();
                        wr.newline();
                        wr.out("switch (", false);
                        return [4 /*yield*/, this.WalkNode(condition, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out(") {", true);
                        wr.indent(1);
                        found_default = false;
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < case_nodes.children.length)) return [3 /*break*/, 7];
                        ch = case_nodes.children[i];
                        blockName = ch.getFirst();
                        if (!(blockName.vref == "default")) return [3 /*break*/, 4];
                        found_default = true;
                        return [4 /*yield*/, this.WalkNode(ch, ctx, wr)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, this.WalkNode(ch, ctx, wr)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        i++;
                        return [3 /*break*/, 2];
                    case 7:
                        ;
                        if (false == found_default) {
                            wr.newline();
                            wr.out("default :", true);
                            wr.indent(1);
                            wr.out("break", true);
                            wr.indent(-1);
                        }
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerSwift3ClassWriter.prototype.writeClass = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cl, declaredVariable, dblDeclaredFunction, declaredFunction, declaredStaticFunction, parentFunction, i, pName, pC, i_1, pvar, i_2, fnVar, mVs, i_3, variant, i_4, variant_1, parentClass, i_5, pName_1, i_6, pvar_1, constr, b_must_override, p_constr, subCtx, i_7, variant_2, subCtx_1, i_8, fnVar_1, mVs_1, i_9, variant_3, subCtx_2, i_10, variant_4, theEnd, subCtx_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cl = node.clDesc;
                        if (typeof (cl) === "undefined") {
                            return [2 /*return*/];
                        }
                        declaredVariable = {};
                        dblDeclaredFunction = {};
                        declaredFunction = {};
                        declaredStaticFunction = {};
                        parentFunction = {};
                        if ((cl.extends_classes.length) > 0) {
                            for (i = 0; i < cl.extends_classes.length; i++) {
                                pName = cl.extends_classes[i];
                                pC = ctx.findClass(pName);
                                for (i_1 = 0; i_1 < pC.variables.length; i_1++) {
                                    pvar = pC.variables[i_1];
                                    declaredVariable[pvar.name] = true;
                                }
                                ;
                                for (i_2 = 0; i_2 < pC.defined_variants.length; i_2++) {
                                    fnVar = pC.defined_variants[i_2];
                                    mVs = pC.method_variants[fnVar];
                                    for (i_3 = 0; i_3 < mVs.variants.length; i_3++) {
                                        variant = mVs.variants[i_3];
                                        declaredFunction[variant.name] = true;
                                        parentFunction[variant.name] = variant;
                                    }
                                    ;
                                }
                                ;
                                for (i_4 = 0; i_4 < pC.static_methods.length; i_4++) {
                                    variant_1 = pC.static_methods[i_4];
                                    declaredStaticFunction[variant_1.name] = true;
                                }
                                ;
                            }
                            ;
                        }
                        if (this.header_created == false) {
                            wr.createTag("utilities");
                            this.header_created = true;
                        }
                        wr.out(((("func ==(l: " + cl.compiledName) + ", r: ") + cl.compiledName) + ") -> Bool {", true);
                        wr.indent(1);
                        wr.out("return l === r", true);
                        wr.indent(-1);
                        wr.out("}", true);
                        wr.out("class " + cl.compiledName, false);
                        if ((cl.extends_classes.length) > 0) {
                            wr.out(" : ", false);
                            for (i_5 = 0; i_5 < cl.extends_classes.length; i_5++) {
                                pName_1 = cl.extends_classes[i_5];
                                parentClass = ctx.findClass(pName_1);
                                wr.out(parentClass.compiledName, false);
                            }
                            ;
                        }
                        else {
                            wr.out(" : Equatable ", false);
                        }
                        wr.out(" { ", true);
                        wr.indent(1);
                        i_6 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_6 < cl.variables.length)) return [3 /*break*/, 4];
                        pvar_1 = cl.variables[i_6];
                        if ((typeof (declaredVariable[pvar_1.name]) != "undefined" && declaredVariable.hasOwnProperty(pvar_1.name))) {
                            wr.out("// WAS DECLARED : " + pvar_1.name, true);
                            return [3 /*break*/, 3];
                        }
                        return [4 /*yield*/, this.writeVarDef(pvar_1.node, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i_6++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        if (!cl.has_constructor) return [3 /*break*/, 7];
                        constr = cl.constructor_fn;
                        b_must_override = false;
                        if (typeof (parentClass) != "undefined") {
                            if ((constr.params.length) == 0) {
                                b_must_override = true;
                            }
                            else {
                                if (parentClass.has_constructor) {
                                    p_constr = parentClass.constructor_fn;
                                    if (this.haveSameSig((constr), p_constr, ctx)) {
                                        b_must_override = true;
                                    }
                                }
                            }
                        }
                        if (b_must_override) {
                            wr.out("override ", false);
                        }
                        wr.out("init(", false);
                        return [4 /*yield*/, this.writeArgsDef(constr, ctx, wr)];
                    case 5:
                        _a.sent();
                        wr.out(" ) {", true);
                        wr.indent(1);
                        if (typeof (parentClass) != "undefined") {
                            wr.out("super.init()", true);
                        }
                        wr.newline();
                        subCtx = constr.fnCtx;
                        subCtx.is_function = true;
                        return [4 /*yield*/, this.WalkNode(constr.fnBody, subCtx, wr)];
                    case 6:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 7;
                    case 7:
                        i_7 = 0;
                        _a.label = 8;
                    case 8:
                        if (!(i_7 < cl.static_methods.length)) return [3 /*break*/, 13];
                        variant_2 = cl.static_methods[i_7];
                        if (variant_2.nameNode.hasFlag("main")) {
                            return [3 /*break*/, 12];
                        }
                        if ((typeof (declaredStaticFunction[variant_2.name]) != "undefined" && declaredStaticFunction.hasOwnProperty(variant_2.name))) {
                            wr.out("override ", false);
                        }
                        wr.out(("class func " + variant_2.compiledName) + "(", false);
                        return [4 /*yield*/, this.writeArgsDef(variant_2, ctx, wr)];
                    case 9:
                        _a.sent();
                        wr.out(") -> ", false);
                        return [4 /*yield*/, this.writeTypeDef(variant_2.nameNode, ctx, wr)];
                    case 10:
                        _a.sent();
                        wr.out(" {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx_1 = variant_2.fnCtx;
                        subCtx_1.is_function = true;
                        return [4 /*yield*/, this.WalkNode(variant_2.fnBody, subCtx_1, wr)];
                    case 11:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 12;
                    case 12:
                        i_7++;
                        return [3 /*break*/, 8];
                    case 13:
                        ;
                        i_8 = 0;
                        _a.label = 14;
                    case 14:
                        if (!(i_8 < cl.defined_variants.length)) return [3 /*break*/, 25];
                        fnVar_1 = cl.defined_variants[i_8];
                        mVs_1 = cl.method_variants[fnVar_1];
                        i_9 = 0;
                        _a.label = 15;
                    case 15:
                        if (!(i_9 < mVs_1.variants.length)) return [3 /*break*/, 23];
                        variant_3 = mVs_1.variants[i_9];
                        if ((typeof (dblDeclaredFunction[variant_3.name]) != "undefined" && dblDeclaredFunction.hasOwnProperty(variant_3.name))) {
                            return [3 /*break*/, 22];
                        }
                        if ((typeof (declaredFunction[variant_3.name]) != "undefined" && declaredFunction.hasOwnProperty(variant_3.name))) {
                            wr.out("override ", false);
                        }
                        dblDeclaredFunction[variant_3.name] = true;
                        wr.out(("func " + variant_3.compiledName) + "(", false);
                        if (!(typeof (parentFunction[variant_3.name]) != "undefined" && parentFunction.hasOwnProperty(variant_3.name))) return [3 /*break*/, 17];
                        return [4 /*yield*/, this.writeArgsDefWithLocals((parentFunction[variant_3.name]), variant_3, ctx, wr)];
                    case 16:
                        _a.sent();
                        return [3 /*break*/, 19];
                    case 17: return [4 /*yield*/, this.writeArgsDef(variant_3, ctx, wr)];
                    case 18:
                        _a.sent();
                        _a.label = 19;
                    case 19:
                        wr.out(") -> ", false);
                        return [4 /*yield*/, this.writeTypeDef(variant_3.nameNode, ctx, wr)];
                    case 20:
                        _a.sent();
                        wr.out(" {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx_2 = variant_3.fnCtx;
                        subCtx_2.is_function = true;
                        return [4 /*yield*/, this.WalkNode(variant_3.fnBody, subCtx_2, wr)];
                    case 21:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 22;
                    case 22:
                        i_9++;
                        return [3 /*break*/, 15];
                    case 23:
                        ;
                        _a.label = 24;
                    case 24:
                        i_8++;
                        return [3 /*break*/, 14];
                    case 25:
                        ;
                        wr.indent(-1);
                        wr.out("}", true);
                        i_10 = 0;
                        _a.label = 26;
                    case 26:
                        if (!(i_10 < cl.static_methods.length)) return [3 /*break*/, 29];
                        variant_4 = cl.static_methods[i_10];
                        if (!(variant_4.nameNode.hasFlag("main") && (variant_4.nameNode.code.filename == ctx.getRootFile()))) return [3 /*break*/, 28];
                        theEnd = wr.getTag("file_end");
                        theEnd.newline();
                        theEnd.out("func __main__swift() {", true);
                        theEnd.indent(1);
                        subCtx_3 = variant_4.fnCtx;
                        subCtx_3.is_function = true;
                        return [4 /*yield*/, this.WalkNode(variant_4.fnBody, subCtx_3, theEnd)];
                    case 27:
                        _a.sent();
                        theEnd.newline();
                        theEnd.indent(-1);
                        theEnd.out("}", true);
                        theEnd.out("// call the main function", true);
                        theEnd.out("__main__swift()", true);
                        if (ctx.hasCompilerFlag("forever")) {
                            theEnd.out("CFRunLoopRun()", true);
                        }
                        _a.label = 28;
                    case 28:
                        i_10++;
                        return [3 /*break*/, 26];
                    case 29:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    return RangerSwift3ClassWriter;
}(RangerGenericClassWriter));
exports.RangerSwift3ClassWriter = RangerSwift3ClassWriter;
var RangerCppClassWriter = /** @class */ (function (_super) {
    __extends(RangerCppClassWriter, _super);
    function RangerCppClassWriter() {
        var _this = _super.call(this) || this;
        _this.header_created = false;
        return _this;
    }
    RangerCppClassWriter.prototype.adjustType = function (tn) {
        if (tn == "this") {
            return "this";
        }
        return tn;
    };
    ;
    RangerCppClassWriter.prototype.WriteScalarValue = function (node, ctx, wr) {
        switch (node.value_type) {
            case 2:
                wr.out("" + node.double_value, false);
                break;
            case 4:
                var s = this.EncodeString(node, ctx, wr);
                wr.out(("std::string(" + (("\"" + s) + "\"")) + ")", false);
                break;
            case 3:
                wr.out("" + node.int_value, false);
                break;
            case 5:
                if (node.boolean_value) {
                    wr.out("true", false);
                }
                else {
                    wr.out("false", false);
                }
                break;
        }
        ;
    };
    ;
    RangerCppClassWriter.prototype.getObjectTypeString = function (type_string, ctx) {
        switch (type_string) {
            case "char":
                return "char";
            case "charbuffer":
                return "const char*";
            case "int":
                return "int";
            case "string":
                return "std::string";
            case "boolean":
                return "bool";
            case "double":
                return "double";
        }
        ;
        if (ctx.isEnumDefined(type_string)) {
            return "int";
        }
        if (ctx.isDefinedClass(type_string)) {
            var cc = ctx.findClass(type_string);
            if (cc.is_union) {
                return "r_union_" + type_string;
            }
            return ("std::shared_ptr<" + type_string) + ">";
        }
        return type_string;
    };
    ;
    RangerCppClassWriter.prototype.getTypeString2 = function (type_string, ctx) {
        switch (type_string) {
            case "char":
                return "char";
            case "charbuffer":
                return "const char*";
            case "int":
                return "int";
            case "string":
                return "std::string";
            case "boolean":
                return "bool";
            case "double":
                return "double";
        }
        ;
        if (ctx.isEnumDefined(type_string)) {
            return "int";
        }
        return type_string;
    };
    ;
    RangerCppClassWriter.prototype.writePtr = function (node, ctx, wr) {
        if (node.type_name == "void") {
            return;
        }
    };
    ;
    RangerCppClassWriter.prototype.writeTypeDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var v_type, t_name, a_name, k_name, _a, rv, sec, i, arg, cc, cc_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        v_type = node.value_type;
                        t_name = node.type_name;
                        a_name = node.array_type;
                        k_name = node.key_type;
                        if (((v_type == 10) || (v_type == 11)) || (v_type == 0)) {
                            v_type = node.typeNameAsType(ctx);
                        }
                        if (node.eval_type != 0) {
                            v_type = node.eval_type;
                            if ((node.eval_type_name.length) > 0) {
                                t_name = node.eval_type_name;
                            }
                            if ((node.eval_array_type.length) > 0) {
                                a_name = node.eval_array_type;
                            }
                            if ((node.eval_key_type.length) > 0) {
                                k_name = node.eval_key_type;
                            }
                        }
                        _a = v_type;
                        switch (_a) {
                            case 17: return [3 /*break*/, 1];
                            case 13: return [3 /*break*/, 7];
                            case 3: return [3 /*break*/, 8];
                            case 14: return [3 /*break*/, 9];
                            case 15: return [3 /*break*/, 10];
                            case 2: return [3 /*break*/, 11];
                            case 4: return [3 /*break*/, 12];
                            case 5: return [3 /*break*/, 13];
                            case 7: return [3 /*break*/, 14];
                            case 6: return [3 /*break*/, 15];
                        }
                        return [3 /*break*/, 16];
                    case 1:
                        rv = node.expression_value.children[0];
                        sec = node.expression_value.children[1];
                        /** unused:  const fc : CodeNode  = sec.getFirst()   **/
                        this.import_lib("<functional>", ctx, wr);
                        wr.out("std::function<", false);
                        return [4 /*yield*/, this.writeTypeDef(rv, ctx, wr)];
                    case 2:
                        _b.sent();
                        wr.out("(", false);
                        i = 0;
                        _b.label = 3;
                    case 3:
                        if (!(i < sec.children.length)) return [3 /*break*/, 6];
                        arg = sec.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        return [4 /*yield*/, this.writeTypeDef(arg, ctx, wr)];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5:
                        i++;
                        return [3 /*break*/, 3];
                    case 6:
                        ;
                        wr.out(")>", false);
                        return [3 /*break*/, 17];
                    case 7:
                        wr.out("int", false);
                        return [3 /*break*/, 17];
                    case 8:
                        if (node.hasFlag("optional")) {
                            wr.out(" r_optional_primitive<int> ", false);
                        }
                        else {
                            wr.out("int", false);
                        }
                        return [3 /*break*/, 17];
                    case 9:
                        wr.out("char", false);
                        return [3 /*break*/, 17];
                    case 10:
                        wr.out("const char*", false);
                        return [3 /*break*/, 17];
                    case 11:
                        if (node.hasFlag("optional")) {
                            wr.out(" r_optional_primitive<double> ", false);
                        }
                        else {
                            wr.out("double", false);
                        }
                        return [3 /*break*/, 17];
                    case 12:
                        wr.addImport("<string>");
                        wr.out("std::string", false);
                        return [3 /*break*/, 17];
                    case 13:
                        wr.out("bool", false);
                        return [3 /*break*/, 17];
                    case 14:
                        wr.out(((("std::map<" + this.getObjectTypeString(k_name, ctx)) + ",") + this.getObjectTypeString(a_name, ctx)) + ">", false);
                        wr.addImport("<map>");
                        return [3 /*break*/, 17];
                    case 15:
                        wr.out(("std::vector<" + this.getObjectTypeString(a_name, ctx)) + ">", false);
                        wr.addImport("<vector>");
                        return [3 /*break*/, 17];
                    case 16:
                        if (node.type_name == "void") {
                            wr.out("void", false);
                            return [2 /*return*/];
                        }
                        if (ctx.isDefinedClass(t_name)) {
                            cc = ctx.findClass(t_name);
                            if (cc.is_union) {
                                wr.out("r_union_", false);
                                wr.out(t_name, false);
                                return [2 /*return*/];
                            }
                            cc_1 = ctx.findClass(t_name);
                            wr.out("std::shared_ptr<", false);
                            wr.out(cc_1.name, false);
                            wr.out(">", false);
                            return [2 /*return*/];
                        }
                        if (node.hasFlag("optional")) {
                            wr.out("std::shared_ptr<std::vector<", false);
                            wr.out(this.getTypeString2(t_name, ctx), false);
                            wr.out(">", false);
                            return [2 /*return*/];
                        }
                        wr.out(this.getTypeString2(t_name, ctx), false);
                        return [3 /*break*/, 17];
                    case 17:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCppClassWriter.prototype.WriteVRef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var currC, cc, rootObjName, enumName, e, had_static, i, p, part, p_1, i_1, part_1;
            return __generator(this, function (_a) {
                if (node.vref == "this") {
                    currC = ctx.getCurrentClass();
                    if ((typeof (currC) !== "undefined" && currC != null)) {
                        cc = currC;
                        if ((cc.extends_classes.length) > 0) {
                            wr.out(("std::dynamic_pointer_cast<" + cc.name) + ">(shared_from_this())", false);
                            return [2 /*return*/];
                        }
                    }
                    wr.out("shared_from_this()", false);
                    return [2 /*return*/];
                }
                if (node.eval_type == 13) {
                    rootObjName = node.ns[0];
                    if ((node.ns.length) > 1) {
                        enumName = node.ns[1];
                        e = ctx.getEnum(rootObjName);
                        if ((typeof (e) !== "undefined" && e != null)) {
                            wr.out("" + ((e.values[enumName])), false);
                            return [2 /*return*/];
                        }
                    }
                }
                had_static = false;
                if ((node.nsp.length) > 0) {
                    for (i = 0; i < node.nsp.length; i++) {
                        p = node.nsp[i];
                        if (i > 0) {
                            if (had_static) {
                                wr.out("::", false);
                            }
                            else {
                                wr.out("->", false);
                            }
                        }
                        if (i == 0) {
                            part = node.ns[0];
                            if (part == "this") {
                                wr.out("this", false);
                                continue;
                            }
                        }
                        if ((p.compiledName.length) > 0) {
                            wr.out(this.adjustType(p.compiledName), false);
                        }
                        else {
                            if ((p.name.length) > 0) {
                                wr.out(this.adjustType(p.name), false);
                            }
                            else {
                                wr.out(this.adjustType((node.ns[i])), false);
                            }
                        }
                        if (p.isClass()) {
                            had_static = true;
                        }
                    }
                    ;
                    return [2 /*return*/];
                }
                if (node.hasParamDesc) {
                    p_1 = node.paramDesc;
                    wr.out(p_1.compiledName, false);
                    return [2 /*return*/];
                }
                for (i_1 = 0; i_1 < node.ns.length; i_1++) {
                    part_1 = node.ns[i_1];
                    if (i_1 > 0) {
                        if (had_static) {
                            wr.out("::", false);
                        }
                        else {
                            wr.out("->", false);
                        }
                    }
                    if (ctx.hasClass(part_1)) {
                        had_static = true;
                    }
                    else {
                        had_static = false;
                    }
                    wr.out(this.adjustType(part_1), false);
                }
                ;
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerCppClassWriter.prototype.writeVarDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var nn, p, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasParamDesc) return [3 /*break*/, 4];
                        nn = node.children[1];
                        p = nn.paramDesc;
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("/** unused:  ", false);
                        }
                        if ((p.set_cnt > 0) || p.is_class_variable) {
                            wr.out("", false);
                        }
                        else {
                            wr.out("", false);
                        }
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out(" ", false);
                        wr.out(p.compiledName, false);
                        if (!((node.children.length) > 2)) return [3 /*break*/, 3];
                        wr.out(" = ", false);
                        ctx.setInExpr();
                        value = node.getThird();
                        return [4 /*yield*/, this.WalkNode(value, ctx, wr)];
                    case 2:
                        _a.sent();
                        ctx.unsetInExpr();
                        return [3 /*break*/, 3];
                    case 3:
                        if ((p.ref_cnt == 0) && (p.is_class_variable == true)) {
                            wr.out("     /** note: unused */", false);
                        }
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("   **/ ;", true);
                        }
                        else {
                            wr.out(";", false);
                            wr.newline();
                        }
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCppClassWriter.prototype.disabledVarDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var nn, p, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasParamDesc) return [3 /*break*/, 3];
                        nn = node.children[1];
                        p = nn.paramDesc;
                        if ((p.set_cnt > 0) || p.is_class_variable) {
                            wr.out("", false);
                        }
                        else {
                            wr.out("", false);
                        }
                        wr.out(p.compiledName, false);
                        if (!((node.children.length) > 2)) return [3 /*break*/, 2];
                        wr.out(" = ", false);
                        ctx.setInExpr();
                        value = node.getThird();
                        return [4 /*yield*/, this.WalkNode(value, ctx, wr)];
                    case 1:
                        _a.sent();
                        ctx.unsetInExpr();
                        return [3 /*break*/, 2];
                    case 2:
                        wr.out(";", false);
                        wr.newline();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCppClassWriter.prototype.CreateCallExpression = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var obj, method, args, i, arg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.has_call) return [3 /*break*/, 6];
                        obj = node.getSecond();
                        method = node.getThird();
                        args = node.children[3];
                        wr.out("(", false);
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(obj, ctx, wr)];
                    case 1:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out(")->", false);
                        wr.out(method.vref, false);
                        wr.out("(", false);
                        ctx.setInExpr();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < args.children.length)) return [3 /*break*/, 5];
                        arg = args.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        return [4 /*yield*/, this.WalkNode(arg, ctx, wr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        ctx.unsetInExpr();
                        wr.out(")", false);
                        if (ctx.expressionLevel() == 0) {
                            wr.out(";", true);
                        }
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCppClassWriter.prototype.CustomOperator = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fc, cmd, condition, case_nodes, p, b_has_default, i, ch, blockName, i_1, ch_1, blockName_1, defBlock, caseValue, caseBlock;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fc = node.getFirst();
                        cmd = fc.vref;
                        if (cmd == "return") {
                            if (ctx.isInMain()) {
                                wr.out("return 0;", true);
                            }
                            else {
                                wr.out("return;", true);
                            }
                            return [2 /*return*/];
                        }
                        if (!(cmd == "switch")) return [3 /*break*/, 9];
                        condition = node.getSecond();
                        case_nodes = node.getThird();
                        wr.newline();
                        p = new RangerAppParamDesc();
                        p.name = "caseMatched";
                        p.value_type = 5;
                        ctx.defineVariable(p.name, p);
                        b_has_default = false;
                        for (i = 0; i < case_nodes.children.length; i++) {
                            ch = case_nodes.children[i];
                            blockName = ch.getFirst();
                            if (blockName.vref == "default") {
                                b_has_default = true;
                            }
                        }
                        ;
                        if (b_has_default) {
                            wr.out(("bool " + p.compiledName) + " = false;", true);
                        }
                        i_1 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_1 < case_nodes.children.length)) return [3 /*break*/, 8];
                        ch_1 = case_nodes.children[i_1];
                        blockName_1 = ch_1.getFirst();
                        if (!(blockName_1.vref == "default")) return [3 /*break*/, 3];
                        defBlock = ch_1.getSecond();
                        wr.out("if( ! ", false);
                        wr.out(p.compiledName, false);
                        wr.out(") {", true);
                        wr.indent(1);
                        return [4 /*yield*/, this.WalkNode(defBlock, ctx, wr)];
                    case 2:
                        _a.sent();
                        wr.indent(-1);
                        wr.out("}", true);
                        return [3 /*break*/, 7];
                    case 3:
                        caseValue = ch_1.getSecond();
                        caseBlock = ch_1.getThird();
                        wr.out("if( ", false);
                        return [4 /*yield*/, this.WalkNode(condition, ctx, wr)];
                    case 4:
                        _a.sent();
                        wr.out(" == ", false);
                        return [4 /*yield*/, this.WalkNode(caseValue, ctx, wr)];
                    case 5:
                        _a.sent();
                        wr.out(") {", true);
                        wr.indent(1);
                        if (b_has_default) {
                            wr.out(p.compiledName + " = true;", true);
                        }
                        return [4 /*yield*/, this.WalkNode(caseBlock, ctx, wr)];
                    case 6:
                        _a.sent();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 7;
                    case 7:
                        i_1++;
                        return [3 /*break*/, 1];
                    case 8:
                        ;
                        _a.label = 9;
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCppClassWriter.prototype.CreateMethodCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var obj, args, i, arg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        obj = node.getFirst();
                        args = node.getSecond();
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(obj, ctx, wr)];
                    case 1:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out("(", false);
                        ctx.setInExpr();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < args.children.length)) return [3 /*break*/, 5];
                        arg = args.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        return [4 /*yield*/, this.WalkNode(arg, ctx, wr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        ctx.unsetInExpr();
                        wr.out(")", false);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCppClassWriter.prototype.CreatePropertyGet = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var obj, prop;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        obj = node.getSecond();
                        prop = node.getThird();
                        wr.out("(", false);
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(obj, ctx, wr)];
                    case 1:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out(")->", false);
                        return [4 /*yield*/, this.WalkNode(prop, ctx, wr)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCppClassWriter.prototype.CreateLambdaCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fName, givenArgs, args, param, i, arg, n;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fName = node.children[0];
                        givenArgs = node.children[1];
                        if ((typeof (fName.expression_value) !== "undefined" && fName.expression_value != null)) {
                            args = fName.expression_value.children[1];
                        }
                        else {
                            param = ctx.getVariableDef(fName.vref);
                            args = param.nameNode.expression_value.children[1];
                        }
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(fName, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out("(", false);
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < args.children.length)) return [3 /*break*/, 5];
                        arg = args.children[i];
                        n = givenArgs.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        if (!(arg.value_type != 0)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.WalkNode(n, ctx, wr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        wr.out(")", false);
                        ctx.unsetInExpr();
                        if (ctx.expressionLevel() == 0) {
                            wr.out(";", true);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCppClassWriter.prototype.CreateLambda = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var lambdaCtx, args, body, i, cname, vD, i_1, arg, i_2, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.import_lib("<functional>", ctx, wr);
                        lambdaCtx = node.lambda_ctx;
                        args = node.children[1];
                        body = node.children[2];
                        wr.out("[&", false);
                        for (i = 0; i < lambdaCtx.captured_variables.length; i++) {
                            cname = lambdaCtx.captured_variables[i];
                            vD = lambdaCtx.getVariableDef(cname);
                            if (vD.varType == 4) {
                                wr.out(", ", false);
                                wr.out(vD.compiledName, false);
                            }
                        }
                        ;
                        wr.out("](", false);
                        i_1 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_1 < args.children.length)) return [3 /*break*/, 4];
                        arg = args.children[i_1];
                        if (i_1 > 0) {
                            wr.out(", ", false);
                        }
                        return [4 /*yield*/, this.writeTypeDef(arg, ctx, wr)];
                    case 2:
                        _a.sent();
                        wr.out(" ", false);
                        wr.out(arg.vref, false);
                        _a.label = 3;
                    case 3:
                        i_1++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        wr.out(") mutable { ", true);
                        wr.indent(1);
                        lambdaCtx.restartExpressionLevel();
                        i_2 = 0;
                        _a.label = 5;
                    case 5:
                        if (!(i_2 < body.children.length)) return [3 /*break*/, 8];
                        item = body.children[i_2];
                        return [4 /*yield*/, this.WalkNode(item, lambdaCtx, wr)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7:
                        i_2++;
                        return [3 /*break*/, 5];
                    case 8:
                        ;
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", false);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCppClassWriter.prototype.writeCppHeaderVar = function (node, ctx, wr, do_initialize) {
        return __awaiter(this, void 0, void 0, function () {
            var nn, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasParamDesc) return [3 /*break*/, 2];
                        nn = node.children[1];
                        p = nn.paramDesc;
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("/** unused:  ", false);
                        }
                        if ((p.set_cnt > 0) || p.is_class_variable) {
                            wr.out("", false);
                        }
                        else {
                            wr.out("", false);
                        }
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out(" ", false);
                        wr.out(p.compiledName, false);
                        if ((p.ref_cnt == 0) && (p.is_class_variable == true)) {
                            wr.out("     /** note: unused */", false);
                        }
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("   **/ ;", true);
                        }
                        else {
                            wr.out(";", false);
                            wr.newline();
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCppClassWriter.prototype.writeArgsDef = function (fnDesc, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var i, arg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < fnDesc.params.length)) return [3 /*break*/, 4];
                        arg = fnDesc.params[i];
                        if (i > 0) {
                            wr.out(",", false);
                        }
                        wr.out(" ", false);
                        return [4 /*yield*/, this.writeTypeDef(arg.nameNode, ctx, wr)];
                    case 2:
                        _a.sent();
                        wr.out((" " + arg.compiledName) + " ", false);
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCppClassWriter.prototype.writeFnCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fc, givenArgs, i, arg, defVal, fc_1, n;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasFnCall) return [3 /*break*/, 10];
                        fc = node.getFirst();
                        return [4 /*yield*/, this.WriteVRef(fc, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out("(", false);
                        ctx.setInExpr();
                        givenArgs = node.getSecond();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < node.fnDesc.params.length)) return [3 /*break*/, 9];
                        arg = node.fnDesc.params[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        if (!(i >= (givenArgs.children.length))) return [3 /*break*/, 6];
                        defVal = arg.nameNode.getFlag("default");
                        if (!(typeof (defVal) !== "undefined" && defVal != null)) return [3 /*break*/, 4];
                        fc_1 = defVal.vref_annotation.getFirst();
                        return [4 /*yield*/, this.WalkNode(fc_1, ctx, wr)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        ctx.addError(node, "Default argument was missing");
                        _a.label = 5;
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        n = givenArgs.children[i];
                        return [4 /*yield*/, this.WalkNode(n, ctx, wr)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        i++;
                        return [3 /*break*/, 2];
                    case 9:
                        ;
                        ctx.unsetInExpr();
                        wr.out(")", false);
                        if (ctx.expressionLevel() == 0) {
                            wr.out(";", true);
                        }
                        _a.label = 10;
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCppClassWriter.prototype.writeNewCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cl, constr, givenArgs, i, arg, n;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasNewOper) return [3 /*break*/, 6];
                        cl = node.clDesc;
                        /** unused:  const fc : CodeNode  = node.getSecond()   **/
                        wr.out(" std::make_shared<", false);
                        wr.out(node.clDesc.name, false);
                        wr.out(">(", false);
                        constr = cl.constructor_fn;
                        givenArgs = node.getThird();
                        if (!(typeof (constr) !== "undefined" && constr != null)) return [3 /*break*/, 5];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < constr.params.length)) return [3 /*break*/, 4];
                        arg = constr.params[i];
                        n = givenArgs.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        if (!(true || ((typeof (arg.nameNode) !== "undefined" && arg.nameNode != null)))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.WalkNode(n, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        _a.label = 5;
                    case 5:
                        wr.out(")", false);
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCppClassWriter.prototype.writeArrayLiteral = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.compiler.createPolyfill("\ntemplate< typename T, size_t N >\nstd::vector<T> r_make_vector_from_array( const T (&data)[N] )\n{\n    return std::vector<T>(data, data+N);\n}\n", ctx, wr);
                        wr.out("r_make_vector_from_array( (", false);
                        wr.out(this.getObjectTypeString(node.eval_array_type, ctx), false);
                        wr.out("[] ) {", false);
                        return [4 /*yield*/, operatorsOf.forEach_15(node.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (index > 0) {
                                                wr.out(", ", false);
                                            }
                                            return [4 /*yield*/, this.WalkNode(item, ctx, wr)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        wr.out("} )", false);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCppClassWriter.prototype.writeClassHeader = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cl, inheritedVars, i, pName, extC, i_1, pvar, i_2, pvar_1, constr, i_3, variant, i_4, fnVar, mVs, i_5, variant_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cl = node.clDesc;
                        if (typeof (cl) === "undefined") {
                            return [2 /*return*/];
                        }
                        inheritedVars = {};
                        wr.out("class " + cl.name, false);
                        if ((cl.extends_classes.length) > 0) {
                            wr.out(" : ", false);
                            for (i = 0; i < cl.extends_classes.length; i++) {
                                pName = cl.extends_classes[i];
                                wr.out("public ", false);
                                wr.out(pName, false);
                                extC = ctx.findClass(pName);
                                for (i_1 = 0; i_1 < extC.variables.length; i_1++) {
                                    pvar = extC.variables[i_1];
                                    inheritedVars[pvar.name] = true;
                                }
                                ;
                            }
                            ;
                        }
                        else {
                            wr.out((" : public std::enable_shared_from_this<" + cl.name) + "> ", false);
                        }
                        wr.out(" { ", true);
                        wr.indent(1);
                        wr.out("public :", true);
                        wr.indent(1);
                        i_2 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_2 < cl.variables.length)) return [3 /*break*/, 4];
                        pvar_1 = cl.variables[i_2];
                        if (!(((typeof (inheritedVars[pvar_1.name]) != "undefined" && inheritedVars.hasOwnProperty(pvar_1.name))) == false)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.writeCppHeaderVar(pvar_1.node, ctx, wr, false)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i_2++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        wr.out("/* class constructor */ ", true);
                        wr.out(cl.name + "(", false);
                        if (!cl.has_constructor) return [3 /*break*/, 6];
                        constr = cl.constructor_fn;
                        return [4 /*yield*/, this.writeArgsDef(constr, ctx, wr)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        wr.out(" );", true);
                        i_3 = 0;
                        _a.label = 7;
                    case 7:
                        if (!(i_3 < cl.static_methods.length)) return [3 /*break*/, 11];
                        variant = cl.static_methods[i_3];
                        if (i_3 == 0) {
                            wr.out("/* static methods */ ", true);
                        }
                        wr.out("static ", false);
                        return [4 /*yield*/, this.writeTypeDef(variant.nameNode, ctx, wr)];
                    case 8:
                        _a.sent();
                        wr.out((" " + variant.compiledName) + "(", false);
                        return [4 /*yield*/, this.writeArgsDef(variant, ctx, wr)];
                    case 9:
                        _a.sent();
                        wr.out(");", true);
                        _a.label = 10;
                    case 10:
                        i_3++;
                        return [3 /*break*/, 7];
                    case 11:
                        ;
                        i_4 = 0;
                        _a.label = 12;
                    case 12:
                        if (!(i_4 < cl.defined_variants.length)) return [3 /*break*/, 19];
                        fnVar = cl.defined_variants[i_4];
                        if (i_4 == 0) {
                            wr.out("/* instance methods */ ", true);
                        }
                        mVs = cl.method_variants[fnVar];
                        i_5 = 0;
                        _a.label = 13;
                    case 13:
                        if (!(i_5 < mVs.variants.length)) return [3 /*break*/, 17];
                        variant_1 = mVs.variants[i_5];
                        if (cl.is_inherited) {
                            wr.out("virtual ", false);
                        }
                        return [4 /*yield*/, this.writeTypeDef(variant_1.nameNode, ctx, wr)];
                    case 14:
                        _a.sent();
                        wr.out((" " + variant_1.compiledName) + "(", false);
                        return [4 /*yield*/, this.writeArgsDef(variant_1, ctx, wr)];
                    case 15:
                        _a.sent();
                        wr.out(");", true);
                        _a.label = 16;
                    case 16:
                        i_5++;
                        return [3 /*break*/, 13];
                    case 17:
                        ;
                        _a.label = 18;
                    case 18:
                        i_4++;
                        return [3 /*break*/, 12];
                    case 19:
                        ;
                        wr.indent(-1);
                        wr.indent(-1);
                        wr.out("};", true);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCppClassWriter.prototype.CreateUnions = function (parser, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var root;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        root = ctx.getRoot();
                        return [4 /*yield*/, operatorsOf_13.forEach_14(root.definedClasses, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                var cnt_3;
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!item.is_union) return [3 /*break*/, 3];
                                            return [4 /*yield*/, this.compiler.installFile("variant.hpp", ctx, wr)];
                                        case 1:
                                            _a.sent();
                                            ctx.addPluginNode("makefile", CodeNode.fromList([CodeNode.fromList([CodeNode.vref1("dep"), CodeNode.newStr("variant.hpp"), CodeNode.newStr("https://github.com/mpark/variant/releases/download/v1.2.2/variant.hpp")])]));
                                            wr.out("typedef mpark::variant<", false);
                                            wr.indent(1);
                                            cnt_3 = 0;
                                            return [4 /*yield*/, operatorsOf.forEach_12(item.is_union_of, (function (item, index) {
                                                    if (ctx.isDefinedClass(item)) {
                                                        var cl = ctx.findClass(item);
                                                        if (false == cl.isNormalClass()) {
                                                            return;
                                                        }
                                                        if (cnt_3 > 0) {
                                                            wr.out(", ", false);
                                                        }
                                                        wr.out(_this.getObjectTypeString(item, ctx), false);
                                                        cnt_3 = cnt_3 + 1;
                                                    }
                                                    else {
                                                        if (cnt_3 > 0) {
                                                            wr.out(", ", false);
                                                        }
                                                        wr.out(_this.getObjectTypeString(item, ctx), false);
                                                        cnt_3 = cnt_3 + 1;
                                                    }
                                                }))];
                                        case 2:
                                            _a.sent();
                                            wr.indent(-1);
                                            wr.out((">  r_union_" + index) + ";", true);
                                            wr.addImport("\"variant.hpp\"");
                                            _a.label = 3;
                                        case 3: return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCppClassWriter.prototype.writeClass = function (node, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cl, wr, i, dd, classWriter, headerWriter, constr, i_1, pName, pcc, constr_1, i_2, arg, i_3, pvar, nn, valueNode, constr_2, subCtx, i_4, variant, subCtx_1, i_5, fnVar, mVs, i_6, variant_1, subCtx_2, i_7, variant_2, subCtx_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cl = node.clDesc;
                        wr = orig_wr;
                        if (typeof (cl) === "undefined") {
                            return [2 /*return*/];
                        }
                        this.import_lib("<memory>", ctx, wr);
                        for (i = 0; i < cl.capturedLocals.length; i++) {
                            dd = cl.capturedLocals[i];
                            if (dd.is_class_variable == false) {
                                if (dd.set_cnt > 0) {
                                    if (ctx.hasCompilerFlag("dont-allow-mutate")) {
                                        ctx.addError(dd.nameNode, "Mutating captured variable is not allowed");
                                        return [2 /*return*/];
                                    }
                                }
                            }
                        }
                        ;
                        if (!(this.header_created == false)) return [3 /*break*/, 2];
                        wr.createTag("c++Imports");
                        wr.out("", true);
                        wr.out("// define classes here to avoid compiler errors", true);
                        wr.createTag("c++ClassDefs");
                        wr.out("", true);
                        wr.createTag("c++unions");
                        wr.createTag("utilities");
                        wr.out("", true);
                        wr.out("// header definitions", true);
                        wr.createTag("c++Header");
                        wr.out("", true);
                        wr.out("int __g_argc;", true);
                        wr.out("char **__g_argv;", true);
                        return [4 /*yield*/, this.CreateUnions(this.compiler.parser, ctx, wr.getTag("c++unions"))];
                    case 1:
                        _a.sent();
                        this.header_created = true;
                        _a.label = 2;
                    case 2:
                        classWriter = orig_wr.getTag("c++ClassDefs");
                        headerWriter = orig_wr.getTag("c++Header");
                        /** unused:  const projectName : string  = "project"   **/
                        classWriter.out(("class " + cl.name) + ";", true);
                        return [4 /*yield*/, this.writeClassHeader(node, ctx, headerWriter)];
                    case 3:
                        _a.sent();
                        wr.out(((cl.name + "::") + cl.name) + "(", false);
                        if (!cl.has_constructor) return [3 /*break*/, 5];
                        constr = cl.constructor_fn;
                        return [4 /*yield*/, this.writeArgsDef(constr, ctx, wr)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        wr.out(" ) ", false);
                        if ((cl.extends_classes.length) > 0) {
                            for (i_1 = 0; i_1 < cl.extends_classes.length; i_1++) {
                                pName = cl.extends_classes[i_1];
                                pcc = ctx.findClass(pName);
                                if (pcc.has_constructor) {
                                    wr.out((" : " + pcc.name) + "(", false);
                                    constr_1 = cl.constructor_fn;
                                    for (i_2 = 0; i_2 < constr_1.params.length; i_2++) {
                                        arg = constr_1.params[i_2];
                                        if (i_2 > 0) {
                                            wr.out(",", false);
                                        }
                                        wr.out(" ", false);
                                        wr.out((" " + arg.name) + " ", false);
                                    }
                                    ;
                                    wr.out(")", false);
                                }
                            }
                            ;
                        }
                        wr.out("{", true);
                        wr.indent(1);
                        i_3 = 0;
                        _a.label = 6;
                    case 6:
                        if (!(i_3 < cl.variables.length)) return [3 /*break*/, 9];
                        pvar = cl.variables[i_3];
                        nn = pvar.node;
                        if (!((nn.children.length) > 2)) return [3 /*break*/, 8];
                        valueNode = nn.children[2];
                        wr.out(("this->" + pvar.compiledName) + " = ", false);
                        return [4 /*yield*/, this.WalkNode(valueNode, ctx, wr)];
                    case 7:
                        _a.sent();
                        wr.out(";", true);
                        _a.label = 8;
                    case 8:
                        i_3++;
                        return [3 /*break*/, 6];
                    case 9:
                        ;
                        if (!cl.has_constructor) return [3 /*break*/, 11];
                        constr_2 = cl.constructor_fn;
                        wr.newline();
                        subCtx = constr_2.fnCtx;
                        subCtx.is_function = true;
                        return [4 /*yield*/, this.WalkNode(constr_2.fnBody, subCtx, wr)];
                    case 10:
                        _a.sent();
                        wr.newline();
                        _a.label = 11;
                    case 11:
                        wr.indent(-1);
                        wr.out("}", true);
                        i_4 = 0;
                        _a.label = 12;
                    case 12:
                        if (!(i_4 < cl.static_methods.length)) return [3 /*break*/, 17];
                        variant = cl.static_methods[i_4];
                        if (variant.nameNode.hasFlag("main")) {
                            return [3 /*break*/, 16];
                        }
                        return [4 /*yield*/, this.writeTypeDef(variant.nameNode, ctx, wr)];
                    case 13:
                        _a.sent();
                        wr.out(" ", false);
                        wr.out((" " + cl.name) + "::", false);
                        wr.out(variant.compiledName + "(", false);
                        return [4 /*yield*/, this.writeArgsDef(variant, ctx, wr)];
                    case 14:
                        _a.sent();
                        wr.out(") {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx_1 = variant.fnCtx;
                        subCtx_1.is_function = true;
                        return [4 /*yield*/, this.WalkNode(variant.fnBody, subCtx_1, wr)];
                    case 15:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 16;
                    case 16:
                        i_4++;
                        return [3 /*break*/, 12];
                    case 17:
                        ;
                        i_5 = 0;
                        _a.label = 18;
                    case 18:
                        if (!(i_5 < cl.defined_variants.length)) return [3 /*break*/, 26];
                        fnVar = cl.defined_variants[i_5];
                        mVs = cl.method_variants[fnVar];
                        i_6 = 0;
                        _a.label = 19;
                    case 19:
                        if (!(i_6 < mVs.variants.length)) return [3 /*break*/, 24];
                        variant_1 = mVs.variants[i_6];
                        return [4 /*yield*/, this.writeTypeDef(variant_1.nameNode, ctx, wr)];
                    case 20:
                        _a.sent();
                        wr.out(" ", false);
                        wr.out((" " + cl.name) + "::", false);
                        wr.out(variant_1.compiledName + "(", false);
                        return [4 /*yield*/, this.writeArgsDef(variant_1, ctx, wr)];
                    case 21:
                        _a.sent();
                        wr.out(") {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx_2 = variant_1.fnCtx;
                        subCtx_2.is_function = true;
                        return [4 /*yield*/, this.WalkNode(variant_1.fnBody, subCtx_2, wr)];
                    case 22:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 23;
                    case 23:
                        i_6++;
                        return [3 /*break*/, 19];
                    case 24:
                        ;
                        _a.label = 25;
                    case 25:
                        i_5++;
                        return [3 /*break*/, 18];
                    case 26:
                        ;
                        i_7 = 0;
                        _a.label = 27;
                    case 27:
                        if (!(i_7 < cl.static_methods.length)) return [3 /*break*/, 30];
                        variant_2 = cl.static_methods[i_7];
                        if (!(variant_2.nameNode.hasFlag("main") && (variant_2.nameNode.code.filename == ctx.getRootFile()))) return [3 /*break*/, 29];
                        ctx.setCompilerSetting("mainclass", cl.name);
                        wr.out("int main(int argc, char* argv[]) {", true);
                        wr.indent(1);
                        wr.out("__g_argc = argc;", true);
                        wr.out("__g_argv = argv;", true);
                        subCtx_3 = variant_2.fnCtx;
                        subCtx_3.in_main = true;
                        subCtx_3.is_function = true;
                        return [4 /*yield*/, this.WalkNode(variant_2.fnBody, subCtx_3, wr)];
                    case 28:
                        _a.sent();
                        wr.newline();
                        wr.out("return 0;", true);
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 29;
                    case 29:
                        i_7++;
                        return [3 /*break*/, 27];
                    case 30:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    return RangerCppClassWriter;
}(RangerGenericClassWriter));
exports.RangerCppClassWriter = RangerCppClassWriter;
var RangerKotlinClassWriter = /** @class */ (function (_super) {
    __extends(RangerKotlinClassWriter, _super);
    function RangerKotlinClassWriter() {
        return _super.call(this) || this;
    }
    RangerKotlinClassWriter.prototype.WriteScalarValue = function (node, ctx, wr) {
        switch (node.value_type) {
            case 2:
                wr.out(node.getParsedString(), false);
                break;
            case 4:
                var s = this.EncodeString(node, ctx, wr);
                wr.out(("\"" + s) + "\"", false);
                break;
            case 3:
                wr.out("" + node.int_value, false);
                break;
            case 5:
                if (node.boolean_value) {
                    wr.out("true", false);
                }
                else {
                    wr.out("false", false);
                }
                break;
        }
        ;
    };
    ;
    RangerKotlinClassWriter.prototype.adjustType = function (tn) {
        if (tn == "this") {
            return "this";
        }
        return tn;
    };
    ;
    RangerKotlinClassWriter.prototype.getObjectTypeString = function (type_string, ctx) {
        switch (type_string) {
            case "int":
                return "Integer";
            case "string":
                return "String";
            case "chararray":
                return "CharArray";
            case "char":
                return "char";
            case "boolean":
                return "Boolean";
            case "double":
                return "Double";
        }
        ;
        return type_string;
    };
    ;
    RangerKotlinClassWriter.prototype.getTypeString = function (type_string) {
        switch (type_string) {
            case "int":
                return "Integer";
            case "string":
                return "String";
            case "chararray":
                return "CharArray";
            case "char":
                return "Char";
            case "boolean":
                return "Boolean";
            case "double":
                return "Double";
        }
        ;
        return type_string;
    };
    ;
    RangerKotlinClassWriter.prototype.writeTypeDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var v_type;
            return __generator(this, function (_a) {
                v_type = node.value_type;
                if (node.eval_type != 0) {
                    v_type = node.eval_type;
                }
                switch (v_type) {
                    case 13:
                        wr.out("Int", false);
                        break;
                    case 3:
                        wr.out("Int", false);
                        break;
                    case 2:
                        wr.out("Double", false);
                        break;
                    case 14:
                        wr.out("Char", false);
                        break;
                    case 15:
                        wr.out("CharArray", false);
                        break;
                    case 4:
                        wr.out("String", false);
                        break;
                    case 5:
                        wr.out("Boolean", false);
                        break;
                    case 7:
                        wr.out(((("MutableMap<" + this.getObjectTypeString(node.key_type, ctx)) + ",") + this.getObjectTypeString(node.array_type, ctx)) + ">", false);
                        break;
                    case 6:
                        wr.out(("MutableList<" + this.getObjectTypeString(node.array_type, ctx)) + ">", false);
                        break;
                    default:
                        if (node.type_name == "void") {
                            wr.out("Unit", false);
                        }
                        else {
                            wr.out(this.getTypeString(node.type_name), false);
                        }
                        break;
                }
                ;
                if (node.hasFlag("optional")) {
                    wr.out("?", false);
                }
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerKotlinClassWriter.prototype.WriteVRef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var rootObjName, enumName, e, i, p, p_1, i_1, part;
            return __generator(this, function (_a) {
                if (node.eval_type == 13) {
                    if ((node.ns.length) > 1) {
                        rootObjName = node.ns[0];
                        enumName = node.ns[1];
                        e = ctx.getEnum(rootObjName);
                        if ((typeof (e) !== "undefined" && e != null)) {
                            wr.out("" + ((e.values[enumName])), false);
                            return [2 /*return*/];
                        }
                    }
                }
                if ((node.nsp.length) > 0) {
                    for (i = 0; i < node.nsp.length; i++) {
                        p = node.nsp[i];
                        if (i > 0) {
                            wr.out(".", false);
                        }
                        if ((p.compiledName.length) > 0) {
                            wr.out(this.adjustType(p.compiledName), false);
                        }
                        else {
                            if ((p.name.length) > 0) {
                                wr.out(this.adjustType(p.name), false);
                            }
                            else {
                                wr.out(this.adjustType((node.ns[i])), false);
                            }
                        }
                        if (i == 0) {
                            if (p.nameNode.hasFlag("optional")) {
                                wr.out("!!", false);
                            }
                        }
                    }
                    ;
                    return [2 /*return*/];
                }
                if (node.hasParamDesc) {
                    p_1 = node.paramDesc;
                    wr.out(p_1.compiledName, false);
                    return [2 /*return*/];
                }
                for (i_1 = 0; i_1 < node.ns.length; i_1++) {
                    part = node.ns[i_1];
                    if (i_1 > 0) {
                        wr.out(".", false);
                    }
                    wr.out(this.adjustType(part), false);
                }
                ;
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerKotlinClassWriter.prototype.writeVarDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var nn, p, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasParamDesc) return [3 /*break*/, 5];
                        nn = node.children[1];
                        p = nn.paramDesc;
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("/** unused:  ", false);
                        }
                        if ((p.set_cnt > 0) || p.is_class_variable) {
                            wr.out("var ", false);
                        }
                        else {
                            wr.out("val ", false);
                        }
                        wr.out(p.compiledName, false);
                        wr.out(" : ", false);
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out(" ", false);
                        if (!((node.children.length) > 2)) return [3 /*break*/, 3];
                        wr.out(" = ", false);
                        ctx.setInExpr();
                        value = node.getThird();
                        return [4 /*yield*/, this.WalkNode(value, ctx, wr)];
                    case 2:
                        _a.sent();
                        ctx.unsetInExpr();
                        return [3 /*break*/, 4];
                    case 3:
                        if (nn.value_type == 6) {
                            wr.out(" = arrayListOf()", false);
                        }
                        if (nn.value_type == 7) {
                            wr.out(" = hashMapOf()", false);
                        }
                        _a.label = 4;
                    case 4:
                        if ((p.ref_cnt == 0) && (p.is_class_variable == true)) {
                            wr.out("     /** note: unused */", false);
                        }
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("   **/ ;", true);
                        }
                        else {
                            wr.out(";", false);
                            wr.newline();
                        }
                        _a.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerKotlinClassWriter.prototype.writeArgsDef = function (fnDesc, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var i, arg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < fnDesc.params.length)) return [3 /*break*/, 4];
                        arg = fnDesc.params[i];
                        if (i > 0) {
                            wr.out(",", false);
                        }
                        wr.out(" ", false);
                        wr.out(arg.name + " : ", false);
                        return [4 /*yield*/, this.writeTypeDef(arg.nameNode, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerKotlinClassWriter.prototype.writeFnCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fc, givenArgs, i, arg, defVal, fc_1, n;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasFnCall) return [3 /*break*/, 10];
                        fc = node.getFirst();
                        return [4 /*yield*/, this.WriteVRef(fc, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out("(", false);
                        givenArgs = node.getSecond();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < node.fnDesc.params.length)) return [3 /*break*/, 9];
                        arg = node.fnDesc.params[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        if (!((givenArgs.children.length) <= i)) return [3 /*break*/, 6];
                        defVal = arg.nameNode.getFlag("default");
                        if (!(typeof (defVal) !== "undefined" && defVal != null)) return [3 /*break*/, 4];
                        fc_1 = defVal.vref_annotation.getFirst();
                        return [4 /*yield*/, this.WalkNode(fc_1, ctx, wr)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        ctx.addError(node, "Default argument was missing");
                        _a.label = 5;
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        n = givenArgs.children[i];
                        return [4 /*yield*/, this.WalkNode(n, ctx, wr)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        i++;
                        return [3 /*break*/, 2];
                    case 9:
                        ;
                        wr.out(")", false);
                        if (ctx.expressionLevel() == 0) {
                            wr.out(";", true);
                        }
                        _a.label = 10;
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerKotlinClassWriter.prototype.writeNewCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cl, constr, givenArgs, i, arg, n;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasNewOper) return [3 /*break*/, 6];
                        cl = node.clDesc;
                        /** unused:  const fc : CodeNode  = node.getSecond()   **/
                        wr.out(" ", false);
                        wr.out(node.clDesc.name, false);
                        wr.out("(", false);
                        constr = cl.constructor_fn;
                        givenArgs = node.getThird();
                        if (!(typeof (constr) !== "undefined" && constr != null)) return [3 /*break*/, 5];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < constr.params.length)) return [3 /*break*/, 4];
                        arg = constr.params[i];
                        n = givenArgs.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        if (!(true || ((typeof (arg.nameNode) !== "undefined" && arg.nameNode != null)))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.WalkNode(n, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        _a.label = 5;
                    case 5:
                        wr.out(")", false);
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerKotlinClassWriter.prototype.writeClass = function (node, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cl, wr, constr, i, pvar, constr_1, subCtx, i_1, variant, subCtx_1, i_2, fnVar, mVs, i_3, variant_1, subCtx_2, i_4, variant_2, subCtx_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cl = node.clDesc;
                        if (typeof (cl) === "undefined") {
                            return [2 /*return*/];
                        }
                        wr = orig_wr;
                        /** unused:  const importFork : CodeWriter  = wr.fork()   **/
                        wr.out("", true);
                        wr.out("class " + cl.name, false);
                        if (!cl.has_constructor) return [3 /*break*/, 2];
                        constr = cl.constructor_fn;
                        wr.out("(", false);
                        return [4 /*yield*/, this.writeArgsDef(constr, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out(" ) ", true);
                        _a.label = 2;
                    case 2:
                        wr.out(" {", true);
                        wr.indent(1);
                        i = 0;
                        _a.label = 3;
                    case 3:
                        if (!(i < cl.variables.length)) return [3 /*break*/, 6];
                        pvar = cl.variables[i];
                        return [4 /*yield*/, this.writeVarDef(pvar.node, ctx, wr)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        i++;
                        return [3 /*break*/, 3];
                    case 6:
                        ;
                        if (!cl.has_constructor) return [3 /*break*/, 8];
                        constr_1 = cl.constructor_fn;
                        wr.out("", true);
                        wr.out("init {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx = constr_1.fnCtx;
                        subCtx.is_function = true;
                        return [4 /*yield*/, this.WalkNode(constr_1.fnBody, subCtx, wr)];
                    case 7:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 8;
                    case 8:
                        if ((cl.static_methods.length) > 0) {
                            wr.out("companion object {", true);
                            wr.indent(1);
                        }
                        i_1 = 0;
                        _a.label = 9;
                    case 9:
                        if (!(i_1 < cl.static_methods.length)) return [3 /*break*/, 14];
                        variant = cl.static_methods[i_1];
                        wr.out("", true);
                        if (variant.nameNode.hasFlag("main")) {
                            return [3 /*break*/, 13];
                        }
                        wr.out("fun ", false);
                        wr.out(" ", false);
                        wr.out(variant.name + "(", false);
                        return [4 /*yield*/, this.writeArgsDef(variant, ctx, wr)];
                    case 10:
                        _a.sent();
                        wr.out(") : ", false);
                        return [4 /*yield*/, this.writeTypeDef(variant.nameNode, ctx, wr)];
                    case 11:
                        _a.sent();
                        wr.out(" {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx_1 = variant.fnCtx;
                        subCtx_1.is_function = true;
                        return [4 /*yield*/, this.WalkNode(variant.fnBody, subCtx_1, wr)];
                    case 12:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 13;
                    case 13:
                        i_1++;
                        return [3 /*break*/, 9];
                    case 14:
                        ;
                        if ((cl.static_methods.length) > 0) {
                            wr.indent(-1);
                            wr.out("}", true);
                        }
                        i_2 = 0;
                        _a.label = 15;
                    case 15:
                        if (!(i_2 < cl.defined_variants.length)) return [3 /*break*/, 23];
                        fnVar = cl.defined_variants[i_2];
                        mVs = cl.method_variants[fnVar];
                        i_3 = 0;
                        _a.label = 16;
                    case 16:
                        if (!(i_3 < mVs.variants.length)) return [3 /*break*/, 21];
                        variant_1 = mVs.variants[i_3];
                        wr.out("", true);
                        wr.out("fun ", false);
                        wr.out(" ", false);
                        wr.out(variant_1.name + "(", false);
                        return [4 /*yield*/, this.writeArgsDef(variant_1, ctx, wr)];
                    case 17:
                        _a.sent();
                        wr.out(") : ", false);
                        return [4 /*yield*/, this.writeTypeDef(variant_1.nameNode, ctx, wr)];
                    case 18:
                        _a.sent();
                        wr.out(" {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx_2 = variant_1.fnCtx;
                        subCtx_2.is_function = true;
                        return [4 /*yield*/, this.WalkNode(variant_1.fnBody, subCtx_2, wr)];
                    case 19:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 20;
                    case 20:
                        i_3++;
                        return [3 /*break*/, 16];
                    case 21:
                        ;
                        _a.label = 22;
                    case 22:
                        i_2++;
                        return [3 /*break*/, 15];
                    case 23:
                        ;
                        wr.indent(-1);
                        wr.out("}", true);
                        i_4 = 0;
                        _a.label = 24;
                    case 24:
                        if (!(i_4 < cl.static_methods.length)) return [3 /*break*/, 27];
                        variant_2 = cl.static_methods[i_4];
                        wr.out("", true);
                        if (!(variant_2.nameNode.hasFlag("main") && (variant_2.nameNode.code.filename == ctx.getRootFile()))) return [3 /*break*/, 26];
                        wr.out("fun main(args : Array<String>) {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx_3 = variant_2.fnCtx;
                        subCtx_3.is_function = true;
                        return [4 /*yield*/, this.WalkNode(variant_2.fnBody, subCtx_3, wr)];
                    case 25:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 26;
                    case 26:
                        i_4++;
                        return [3 /*break*/, 24];
                    case 27:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    return RangerKotlinClassWriter;
}(RangerGenericClassWriter));
exports.RangerKotlinClassWriter = RangerKotlinClassWriter;
var RangerCSharpClassWriter = /** @class */ (function (_super) {
    __extends(RangerCSharpClassWriter, _super);
    function RangerCSharpClassWriter() {
        return _super.call(this) || this;
    }
    RangerCSharpClassWriter.prototype.adjustType = function (tn) {
        if (tn == "this") {
            return "this";
        }
        return tn;
    };
    ;
    RangerCSharpClassWriter.prototype.getObjectTypeString = function (type_string, ctx) {
        if (ctx.isDefinedClass(type_string)) {
            var cc = ctx.findClass(type_string);
            if (cc.is_union) {
                return "dynamic";
            }
            if (cc.is_system) {
                var sysName = cc.systemNames["csharp"];
                if ((typeof (sysName) !== "undefined" && sysName != null)) {
                    return sysName;
                }
                else {
                    var node = new CodeNode(new SourceCode(""), 0, 0);
                    ctx.addError(node, ("No system class " + type_string) + "defined for C# ");
                }
            }
        }
        switch (type_string) {
            case "int":
                return "int";
            case "string":
                return "String";
            case "chararray":
                return "byte[]";
            case "char":
                return "byte";
            case "boolean":
                return "bool";
            case "double":
                return "double";
        }
        ;
        return type_string;
    };
    ;
    RangerCSharpClassWriter.prototype.getTypeString = function (type_string) {
        switch (type_string) {
            case "int":
                return "int";
            case "string":
                return "String";
            case "chararray":
                return "byte[]";
            case "char":
                return "byte";
            case "boolean":
                return "bool";
            case "double":
                return "double";
        }
        ;
        return type_string;
    };
    ;
    RangerCSharpClassWriter.prototype.writeLambdaType = function (expression_value, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var rv, sec, is_void, i, arg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rv = expression_value.children[0];
                        sec = expression_value.children[1];
                        is_void = false;
                        if ((rv.type_name == "void") || (rv.eval_type_name == "void")) {
                            is_void = true;
                        }
                        if (is_void) {
                            wr.out("Action", false);
                            if ((sec.children.length) > 0) {
                                wr.out("<", false);
                            }
                        }
                        else {
                            wr.out("Func<", false);
                        }
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < sec.children.length)) return [3 /*break*/, 4];
                        arg = sec.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        return [4 /*yield*/, this.writeTypeDef(arg, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        if (!(is_void == false)) return [3 /*break*/, 6];
                        if ((sec.children.length) > 0) {
                            wr.out(", ", false);
                        }
                        return [4 /*yield*/, this.writeTypeDef(rv, ctx, wr)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        if (is_void) {
                            if ((sec.children.length) > 0) {
                                wr.out(">", false);
                            }
                        }
                        else {
                            wr.out(">", false);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCSharpClassWriter.prototype.writeTypeDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var v_type, t_name, a_name, k_name, _a, cc, sysName;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        v_type = node.value_type;
                        t_name = node.type_name;
                        a_name = node.array_type;
                        k_name = node.key_type;
                        if (((v_type == 10) || (v_type == 11)) || (v_type == 0)) {
                            v_type = node.typeNameAsType(ctx);
                        }
                        if (node.eval_type != 0) {
                            v_type = node.eval_type;
                            if ((node.eval_type_name.length) > 0) {
                                t_name = node.eval_type_name;
                            }
                            if ((node.eval_array_type.length) > 0) {
                                a_name = node.eval_array_type;
                            }
                            if ((node.eval_key_type.length) > 0) {
                                k_name = node.eval_key_type;
                            }
                        }
                        _a = v_type;
                        switch (_a) {
                            case 17: return [3 /*break*/, 1];
                            case 13: return [3 /*break*/, 3];
                            case 3: return [3 /*break*/, 4];
                            case 2: return [3 /*break*/, 5];
                            case 14: return [3 /*break*/, 6];
                            case 15: return [3 /*break*/, 7];
                            case 4: return [3 /*break*/, 8];
                            case 5: return [3 /*break*/, 9];
                            case 7: return [3 /*break*/, 10];
                            case 6: return [3 /*break*/, 11];
                        }
                        return [3 /*break*/, 12];
                    case 1: return [4 /*yield*/, this.writeLambdaType(node.expression_value, ctx, wr)];
                    case 2:
                        _b.sent();
                        return [3 /*break*/, 13];
                    case 3:
                        wr.out("int", false);
                        return [3 /*break*/, 13];
                    case 4:
                        wr.out("int", false);
                        return [3 /*break*/, 13];
                    case 5:
                        wr.out("double", false);
                        return [3 /*break*/, 13];
                    case 6:
                        wr.out("byte", false);
                        return [3 /*break*/, 13];
                    case 7:
                        wr.out("byte[]", false);
                        return [3 /*break*/, 13];
                    case 8:
                        wr.out("String", false);
                        return [3 /*break*/, 13];
                    case 9:
                        wr.out("bool", false);
                        return [3 /*break*/, 13];
                    case 10:
                        wr.out(((("Dictionary<" + this.getObjectTypeString(k_name, ctx)) + ",") + this.getObjectTypeString(a_name, ctx)) + ">", false);
                        wr.addImport("System.Collections");
                        wr.addImport("System.Collections.Generic");
                        return [3 /*break*/, 13];
                    case 11:
                        wr.out(("List<" + this.getObjectTypeString(a_name, ctx)) + ">", false);
                        wr.addImport("System.Collections");
                        wr.addImport("System.Collections.Generic");
                        return [3 /*break*/, 13];
                    case 12:
                        if (node.type_name == "void") {
                            wr.out("void", false);
                            return [2 /*return*/];
                        }
                        if (ctx.isDefinedClass(t_name)) {
                            cc = ctx.findClass(t_name);
                            if (cc.is_union) {
                                wr.out("dynamic", false);
                                return [2 /*return*/];
                            }
                            if (cc.is_system) {
                                sysName = cc.systemNames["csharp"];
                                if ((typeof (sysName) !== "undefined" && sysName != null)) {
                                    wr.out(sysName, false);
                                }
                                else {
                                    ctx.addError(node, ("No system class " + t_name) + "defined for C# ");
                                }
                                return [2 /*return*/];
                            }
                        }
                        wr.out(this.getTypeString(node.type_name), false);
                        return [3 /*break*/, 13];
                    case 13:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCSharpClassWriter.prototype.WriteVRef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var rootObjName, enumName, e, i, p, part, p_1, i_1, part_1;
            return __generator(this, function (_a) {
                if (node.eval_type == 13) {
                    if ((node.ns.length) > 1) {
                        rootObjName = node.ns[0];
                        enumName = node.ns[1];
                        e = ctx.getEnum(rootObjName);
                        if ((typeof (e) !== "undefined" && e != null)) {
                            wr.out("" + ((e.values[enumName])), false);
                            return [2 /*return*/];
                        }
                    }
                }
                if ((node.nsp.length) > 0) {
                    for (i = 0; i < node.nsp.length; i++) {
                        p = node.nsp[i];
                        if (i > 0) {
                            wr.out(".", false);
                        }
                        if (i == 0) {
                            part = node.ns[0];
                            if (part == "this") {
                                if (ctx.inLambda()) {
                                    wr.out("this", false);
                                }
                                else {
                                    wr.out("this", false);
                                }
                                continue;
                            }
                        }
                        if (i == 0) {
                            if (p.nameNode.hasFlag("optional")) {
                            }
                        }
                        if ((p.compiledName.length) > 0) {
                            wr.out(this.adjustType(p.compiledName), false);
                        }
                        else {
                            if ((p.name.length) > 0) {
                                wr.out(this.adjustType(p.name), false);
                            }
                            else {
                                wr.out(this.adjustType((node.ns[i])), false);
                            }
                        }
                    }
                    ;
                    return [2 /*return*/];
                }
                if (node.hasParamDesc) {
                    p_1 = node.paramDesc;
                    wr.out(p_1.compiledName, false);
                    return [2 /*return*/];
                }
                for (i_1 = 0; i_1 < node.ns.length; i_1++) {
                    part_1 = node.ns[i_1];
                    if (i_1 > 0) {
                        wr.out(".", false);
                    }
                    wr.out(this.adjustType(part_1), false);
                }
                ;
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerCSharpClassWriter.prototype.writeVarDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var nn, p, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasParamDesc) return [3 /*break*/, 8];
                        nn = node.children[1];
                        p = nn.paramDesc;
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("/** unused:  ", false);
                        }
                        if ((p.set_cnt > 0) || p.is_class_variable) {
                            wr.out("", false);
                        }
                        else {
                            wr.out("", false);
                        }
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out(" ", false);
                        wr.out(p.compiledName, false);
                        if (!((node.children.length) > 2)) return [3 /*break*/, 3];
                        wr.out(" = ", false);
                        ctx.setInExpr();
                        value = node.getThird();
                        return [4 /*yield*/, this.WalkNode(value, ctx, wr)];
                    case 2:
                        _a.sent();
                        ctx.unsetInExpr();
                        return [3 /*break*/, 7];
                    case 3:
                        if (!(nn.value_type == 6)) return [3 /*break*/, 5];
                        wr.out(" = new ", false);
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 4:
                        _a.sent();
                        wr.out("()", false);
                        _a.label = 5;
                    case 5:
                        if (!(nn.value_type == 7)) return [3 /*break*/, 7];
                        wr.out(" = new ", false);
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 6:
                        _a.sent();
                        wr.out("()", false);
                        _a.label = 7;
                    case 7:
                        if ((p.ref_cnt == 0) && (p.is_class_variable == true)) {
                            wr.out("     /** note: unused */", false);
                        }
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("   **/ ;", true);
                        }
                        else {
                            wr.out(";", false);
                            wr.newline();
                        }
                        _a.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCSharpClassWriter.prototype.CreateLambda = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var lambdaCtx, body, args, i, arg, i_1, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        lambdaCtx = node.lambda_ctx;
                        body = node.children[2];
                        args = node.children[1];
                        wr.out("(", false);
                        wr.out("(", false);
                        return [4 /*yield*/, this.writeLambdaType(node, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out(")", false);
                        wr.out("(", false);
                        wr.out("(", false);
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < args.children.length)) return [3 /*break*/, 7];
                        arg = args.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        if (!(arg.flow_done == false)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.compiler.parser.WalkNode(arg, lambdaCtx, wr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [4 /*yield*/, this.WalkNode(arg, lambdaCtx, wr)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        i++;
                        return [3 /*break*/, 2];
                    case 7:
                        ;
                        wr.out(")", false);
                        wr.out(" => { ", true);
                        wr.indent(1);
                        lambdaCtx.restartExpressionLevel();
                        i_1 = 0;
                        _a.label = 8;
                    case 8:
                        if (!(i_1 < body.children.length)) return [3 /*break*/, 11];
                        item = body.children[i_1];
                        return [4 /*yield*/, this.WalkNode(item, lambdaCtx, wr)];
                    case 9:
                        _a.sent();
                        _a.label = 10;
                    case 10:
                        i_1++;
                        return [3 /*break*/, 8];
                    case 11:
                        ;
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", false);
                        wr.out("))", false);
                        if (ctx.expressionLevel() == 0) {
                            wr.out(";", true);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCSharpClassWriter.prototype.writeArgsDef = function (fnDesc, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var i, arg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < fnDesc.params.length)) return [3 /*break*/, 4];
                        arg = fnDesc.params[i];
                        if (i > 0) {
                            wr.out(",", false);
                        }
                        wr.out(" ", false);
                        return [4 /*yield*/, this.writeTypeDef(arg.nameNode, ctx, wr)];
                    case 2:
                        _a.sent();
                        wr.out((" " + arg.compiledName) + " ", false);
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCSharpClassWriter.prototype.writeArrayLiteral = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        wr.out("new List<", false);
                        wr.out(this.getObjectTypeString(node.eval_array_type, ctx), false);
                        wr.out("> {", false);
                        return [4 /*yield*/, operatorsOf.forEach_15(node.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (index > 0) {
                                                wr.out(", ", false);
                                            }
                                            return [4 /*yield*/, this.WalkNode(item, ctx, wr)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        wr.out("}", false);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerCSharpClassWriter.prototype.writeClass = function (node, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cl, wr, i, pName, i_1, pvar, constr, subCtx, i_2, variant, subCtx_1, i_3, fnVar, mVs, i_4, variant_1, subCtx_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cl = node.clDesc;
                        if (typeof (cl) === "undefined") {
                            return [2 /*return*/];
                        }
                        wr = orig_wr;
                        this.import_lib("System", ctx, wr);
                        wr.out(("class " + cl.name) + " ", false);
                        if ((cl.extends_classes.length) > 0) {
                            wr.out(" : ", false);
                            for (i = 0; i < cl.extends_classes.length; i++) {
                                pName = cl.extends_classes[i];
                                wr.out(pName, false);
                            }
                            ;
                        }
                        wr.out(" {", true);
                        wr.indent(1);
                        wr.createTag("utilities");
                        i_1 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_1 < cl.variables.length)) return [3 /*break*/, 4];
                        pvar = cl.variables[i_1];
                        wr.out("public ", false);
                        return [4 /*yield*/, this.writeVarDef(pvar.node, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i_1++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        if (!cl.has_constructor) return [3 /*break*/, 7];
                        constr = cl.constructor_fn;
                        wr.out(cl.name + "(", false);
                        return [4 /*yield*/, this.writeArgsDef(constr, ctx, wr)];
                    case 5:
                        _a.sent();
                        wr.out(" ) {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx = constr.fnCtx;
                        subCtx.is_function = true;
                        return [4 /*yield*/, this.WalkNode(constr.fnBody, subCtx, wr)];
                    case 6:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 7;
                    case 7:
                        i_2 = 0;
                        _a.label = 8;
                    case 8:
                        if (!(i_2 < cl.static_methods.length)) return [3 /*break*/, 15];
                        variant = cl.static_methods[i_2];
                        if (variant.nameNode.hasFlag("main") && (variant.nameNode.code.filename != ctx.getRootFile())) {
                            return [3 /*break*/, 14];
                        }
                        if (!variant.nameNode.hasFlag("main")) return [3 /*break*/, 9];
                        wr.out("static void Main( string [] args ) {", true);
                        return [3 /*break*/, 12];
                    case 9:
                        wr.out("public static ", false);
                        return [4 /*yield*/, this.writeTypeDef(variant.nameNode, ctx, wr)];
                    case 10:
                        _a.sent();
                        wr.out(" ", false);
                        wr.out(variant.name + "(", false);
                        return [4 /*yield*/, this.writeArgsDef(variant, ctx, wr)];
                    case 11:
                        _a.sent();
                        wr.out(") {", true);
                        _a.label = 12;
                    case 12:
                        wr.indent(1);
                        wr.newline();
                        subCtx_1 = variant.fnCtx;
                        subCtx_1.is_function = true;
                        return [4 /*yield*/, this.WalkNode(variant.fnBody, subCtx_1, wr)];
                    case 13:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 14;
                    case 14:
                        i_2++;
                        return [3 /*break*/, 8];
                    case 15:
                        ;
                        i_3 = 0;
                        _a.label = 16;
                    case 16:
                        if (!(i_3 < cl.defined_variants.length)) return [3 /*break*/, 24];
                        fnVar = cl.defined_variants[i_3];
                        mVs = cl.method_variants[fnVar];
                        i_4 = 0;
                        _a.label = 17;
                    case 17:
                        if (!(i_4 < mVs.variants.length)) return [3 /*break*/, 22];
                        variant_1 = mVs.variants[i_4];
                        wr.out("public ", false);
                        return [4 /*yield*/, this.writeTypeDef(variant_1.nameNode, ctx, wr)];
                    case 18:
                        _a.sent();
                        wr.out(" ", false);
                        wr.out(variant_1.name + "(", false);
                        return [4 /*yield*/, this.writeArgsDef(variant_1, ctx, wr)];
                    case 19:
                        _a.sent();
                        wr.out(") {", true);
                        wr.indent(1);
                        subCtx_2 = variant_1.fnCtx;
                        subCtx_2.is_function = true;
                        return [4 /*yield*/, this.WalkNode(variant_1.fnBody, subCtx_2, wr)];
                    case 20:
                        _a.sent();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 21;
                    case 21:
                        i_4++;
                        return [3 /*break*/, 17];
                    case 22:
                        ;
                        _a.label = 23;
                    case 23:
                        i_3++;
                        return [3 /*break*/, 16];
                    case 24:
                        ;
                        wr.indent(-1);
                        wr.out("}", true);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    return RangerCSharpClassWriter;
}(RangerGenericClassWriter));
exports.RangerCSharpClassWriter = RangerCSharpClassWriter;
var RangerScalaClassWriter = /** @class */ (function (_super) {
    __extends(RangerScalaClassWriter, _super);
    function RangerScalaClassWriter() {
        var _this = _super.call(this) || this;
        _this.init_done = false;
        return _this;
    }
    RangerScalaClassWriter.prototype.getObjectTypeString = function (type_string, ctx) {
        if (ctx.isDefinedClass(type_string)) {
            var cc = ctx.findClass(type_string);
            if (cc.is_union) {
                return "Any";
            }
        }
        switch (type_string) {
            case "int":
                return "Int";
            case "string":
                return "String";
            case "boolean":
                return "Boolean";
            case "double":
                return "Double";
            case "chararray":
                return "Array[Byte]";
            case "char":
                return "byte";
        }
        ;
        return type_string;
    };
    ;
    RangerScalaClassWriter.prototype.getTypeString = function (type_string) {
        switch (type_string) {
            case "int":
                return "Int";
            case "string":
                return "String";
            case "boolean":
                return "Boolean";
            case "double":
                return "Double";
            case "chararray":
                return "Array[Byte]";
            case "char":
                return "byte";
        }
        ;
        return type_string;
    };
    ;
    RangerScalaClassWriter.prototype.writeTypeDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var v_type, t_name, a_name, k_name, _a, rv, sec, is_void, i, arg, cc;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (node.hasFlag("optional")) {
                            wr.out("Option[", false);
                        }
                        v_type = node.value_type;
                        t_name = node.type_name;
                        a_name = node.array_type;
                        k_name = node.key_type;
                        if (((v_type == 10) || (v_type == 11)) || (v_type == 0)) {
                            v_type = node.typeNameAsType(ctx);
                        }
                        if (node.eval_type != 0) {
                            v_type = node.eval_type;
                            if ((node.eval_type_name.length) > 0) {
                                t_name = node.eval_type_name;
                            }
                            if ((node.eval_array_type.length) > 0) {
                                a_name = node.eval_array_type;
                            }
                            if ((node.eval_key_type.length) > 0) {
                                k_name = node.eval_key_type;
                            }
                        }
                        _a = v_type;
                        switch (_a) {
                            case 17: return [3 /*break*/, 1];
                            case 13: return [3 /*break*/, 9];
                            case 3: return [3 /*break*/, 10];
                            case 2: return [3 /*break*/, 11];
                            case 4: return [3 /*break*/, 12];
                            case 5: return [3 /*break*/, 13];
                            case 14: return [3 /*break*/, 14];
                            case 15: return [3 /*break*/, 15];
                            case 7: return [3 /*break*/, 16];
                            case 6: return [3 /*break*/, 17];
                        }
                        return [3 /*break*/, 18];
                    case 1:
                        rv = node.expression_value.children[0];
                        sec = node.expression_value.children[1];
                        is_void = false;
                        if ((rv.type_name == "void") || (rv.eval_type_name == "void")) {
                            is_void = true;
                        }
                        wr.out("(", false);
                        i = 0;
                        _b.label = 2;
                    case 2:
                        if (!(i < sec.children.length)) return [3 /*break*/, 5];
                        arg = sec.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        return [4 /*yield*/, this.writeTypeDef(arg, ctx, wr)];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        wr.out(")", false);
                        if (!is_void) return [3 /*break*/, 6];
                        wr.out("=> Unit", false);
                        return [3 /*break*/, 8];
                    case 6:
                        wr.out("=> ", false);
                        return [4 /*yield*/, this.writeTypeDef(rv, ctx, wr)];
                    case 7:
                        _b.sent();
                        _b.label = 8;
                    case 8: return [3 /*break*/, 19];
                    case 9:
                        wr.out("Int", false);
                        return [3 /*break*/, 19];
                    case 10:
                        wr.out("Int", false);
                        return [3 /*break*/, 19];
                    case 11:
                        wr.out("Double", false);
                        return [3 /*break*/, 19];
                    case 12:
                        wr.out("String", false);
                        return [3 /*break*/, 19];
                    case 13:
                        wr.out("Boolean", false);
                        return [3 /*break*/, 19];
                    case 14:
                        wr.out("Byte", false);
                        return [3 /*break*/, 19];
                    case 15:
                        wr.out("Array[Byte]", false);
                        return [3 /*break*/, 19];
                    case 16:
                        wr.addImport("scala.collection.mutable");
                        wr.out(((("collection.mutable.HashMap[" + this.getObjectTypeString(k_name, ctx)) + ", ") + this.getObjectTypeString(a_name, ctx)) + "]", false);
                        return [3 /*break*/, 19];
                    case 17:
                        wr.addImport("scala.collection.mutable");
                        wr.out(("collection.mutable.ArrayBuffer[" + this.getObjectTypeString(a_name, ctx)) + "]", false);
                        return [3 /*break*/, 19];
                    case 18:
                        if (ctx.isDefinedClass(t_name)) {
                            cc = ctx.findClass(t_name);
                            if (cc.is_union) {
                                wr.out("Any", false);
                                if (node.hasFlag("optional")) {
                                    wr.out("]", false);
                                }
                                return [2 /*return*/];
                            }
                        }
                        if (node.type_name == "void") {
                            wr.out("Unit", false);
                            return [2 /*return*/];
                        }
                        wr.out(this.getTypeString(t_name), false);
                        return [3 /*break*/, 19];
                    case 19:
                        ;
                        if (node.hasFlag("optional")) {
                            wr.out("]", false);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerScalaClassWriter.prototype.writeTypeDefNoOption = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var v_type, _a, rv, sec, is_void, i, arg;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        v_type = node.value_type;
                        if (node.eval_type != 0) {
                            v_type = node.eval_type;
                        }
                        _a = v_type;
                        switch (_a) {
                            case 17: return [3 /*break*/, 1];
                            case 13: return [3 /*break*/, 9];
                            case 3: return [3 /*break*/, 10];
                            case 2: return [3 /*break*/, 11];
                            case 4: return [3 /*break*/, 12];
                            case 5: return [3 /*break*/, 13];
                            case 14: return [3 /*break*/, 14];
                            case 15: return [3 /*break*/, 15];
                            case 7: return [3 /*break*/, 16];
                            case 6: return [3 /*break*/, 17];
                        }
                        return [3 /*break*/, 18];
                    case 1:
                        rv = node.expression_value.children[0];
                        sec = node.expression_value.children[1];
                        is_void = false;
                        if ((rv.type_name == "void") || (rv.eval_type_name == "void")) {
                            is_void = true;
                        }
                        wr.out("(", false);
                        i = 0;
                        _b.label = 2;
                    case 2:
                        if (!(i < sec.children.length)) return [3 /*break*/, 5];
                        arg = sec.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        return [4 /*yield*/, this.writeTypeDef(arg, ctx, wr)];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        wr.out(")", false);
                        if (!is_void) return [3 /*break*/, 6];
                        wr.out("=> Unit", false);
                        return [3 /*break*/, 8];
                    case 6:
                        wr.out("=> ", false);
                        return [4 /*yield*/, this.writeTypeDef(rv, ctx, wr)];
                    case 7:
                        _b.sent();
                        _b.label = 8;
                    case 8: return [3 /*break*/, 19];
                    case 9:
                        wr.out("Int", false);
                        return [3 /*break*/, 19];
                    case 10:
                        wr.out("Int", false);
                        return [3 /*break*/, 19];
                    case 11:
                        wr.out("Double", false);
                        return [3 /*break*/, 19];
                    case 12:
                        wr.out("String", false);
                        return [3 /*break*/, 19];
                    case 13:
                        wr.out("Boolean", false);
                        return [3 /*break*/, 19];
                    case 14:
                        wr.out("Byte", false);
                        return [3 /*break*/, 19];
                    case 15:
                        wr.out("Array[Byte]", false);
                        return [3 /*break*/, 19];
                    case 16:
                        wr.addImport("scala.collection.mutable");
                        wr.out(((("collection.mutable.HashMap[" + this.getObjectTypeString(node.key_type, ctx)) + ", ") + this.getObjectTypeString(node.array_type, ctx)) + "]", false);
                        return [3 /*break*/, 19];
                    case 17:
                        wr.addImport("scala.collection.mutable");
                        wr.out(("collection.mutable.ArrayBuffer[" + this.getObjectTypeString(node.array_type, ctx)) + "]", false);
                        return [3 /*break*/, 19];
                    case 18:
                        if (node.type_name == "void") {
                            wr.out("Unit", false);
                            return [2 /*return*/];
                        }
                        wr.out(this.getTypeString(node.type_name), false);
                        return [3 /*break*/, 19];
                    case 19:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerScalaClassWriter.prototype.WriteVRef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var rootObjName, enumName, e, i, p, part, p_1, i_1, part_1;
            return __generator(this, function (_a) {
                if (node.vref == "this") {
                    wr.out("this", false);
                    return [2 /*return*/];
                }
                if (node.eval_type == 13) {
                    if ((node.ns.length) > 1) {
                        rootObjName = node.ns[0];
                        enumName = node.ns[1];
                        e = ctx.getEnum(rootObjName);
                        if ((typeof (e) !== "undefined" && e != null)) {
                            wr.out("" + ((e.values[enumName])), false);
                            return [2 /*return*/];
                        }
                    }
                }
                if ((node.nsp.length) > 0) {
                    for (i = 0; i < node.nsp.length; i++) {
                        p = node.nsp[i];
                        if (i == 0) {
                            part = node.ns[0];
                            if (part == "this") {
                                wr.out("this", false);
                                continue;
                            }
                        }
                        if (i > 0) {
                            wr.out(".", false);
                        }
                        if ((p.compiledName.length) > 0) {
                            wr.out(this.adjustType(p.compiledName), false);
                        }
                        else {
                            if ((p.name.length) > 0) {
                                wr.out(this.adjustType(p.name), false);
                            }
                            else {
                                wr.out(this.adjustType((node.ns[i])), false);
                            }
                        }
                        if (i == 0) {
                            if (p.nameNode.hasFlag("optional")) {
                                wr.out(".get", false);
                            }
                        }
                    }
                    ;
                    return [2 /*return*/];
                }
                if (node.hasParamDesc) {
                    p_1 = node.paramDesc;
                    wr.out(p_1.compiledName, false);
                    return [2 /*return*/];
                }
                for (i_1 = 0; i_1 < node.ns.length; i_1++) {
                    part_1 = node.ns[i_1];
                    if (i_1 > 0) {
                        wr.out(".", false);
                    }
                    wr.out(this.adjustType(part_1), false);
                }
                ;
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerScalaClassWriter.prototype.writeVarDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var p, ti_ok, value, b_inited;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasParamDesc) return [3 /*break*/, 8];
                        p = node.paramDesc;
                        /** unused:  const nn : CodeNode  = node.children[1]   **/
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("/** unused ", false);
                        }
                        if ((p.set_cnt > 0) || p.is_class_variable) {
                            wr.out(("var " + p.compiledName) + " ", false);
                        }
                        else {
                            wr.out(("val " + p.compiledName) + " ", false);
                        }
                        ti_ok = ctx.canUseTypeInference((p.nameNode));
                        if (!((false == ti_ok) || ((false == p.nameNode.hasFlag("optional")) && ((node.children.length) == 2)))) return [3 /*break*/, 2];
                        wr.out(": ", false);
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out(" ", false);
                        _a.label = 2;
                    case 2:
                        if (!((node.children.length) > 2)) return [3 /*break*/, 4];
                        wr.out("= ", false);
                        ctx.setInExpr();
                        value = node.getThird();
                        return [4 /*yield*/, this.WalkNode(value, ctx, wr)];
                    case 3:
                        _a.sent();
                        ctx.unsetInExpr();
                        return [3 /*break*/, 7];
                    case 4:
                        b_inited = false;
                        if (p.nameNode.value_type == 6) {
                            b_inited = true;
                            wr.out("= new collection.mutable.ArrayBuffer()", false);
                        }
                        if (p.nameNode.value_type == 7) {
                            b_inited = true;
                            wr.out("= new collection.mutable.HashMap()", false);
                        }
                        if (!p.nameNode.hasFlag("optional")) return [3 /*break*/, 6];
                        wr.out(" = Option.empty[", false);
                        return [4 /*yield*/, this.writeTypeDefNoOption(p.nameNode, ctx, wr)];
                    case 5:
                        _a.sent();
                        wr.out("]", false);
                        return [3 /*break*/, 7];
                    case 6:
                        if (b_inited == false) {
                            wr.out("= _", false);
                        }
                        _a.label = 7;
                    case 7:
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("**/ ", true);
                        }
                        else {
                            wr.newline();
                        }
                        _a.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerScalaClassWriter.prototype.writeArgsDef = function (fnDesc, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var i, arg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < fnDesc.params.length)) return [3 /*break*/, 4];
                        arg = fnDesc.params[i];
                        if (i > 0) {
                            wr.out(",", false);
                        }
                        wr.out(" ", false);
                        wr.out(arg.compiledName + " : ", false);
                        return [4 /*yield*/, this.writeTypeDef(arg.nameNode, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerScalaClassWriter.prototype.writeFnEnd = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        wr.indent(-1);
                        wr.out("} catch {", true);
                        wr.indent(1);
                        wr.out("case rv:ScalaReturnValue => {", true);
                        wr.indent(1);
                        wr.out("__returns__ = rv.value", true);
                        wr.indent(-1);
                        wr.out("}", true);
                        wr.indent(-1);
                        wr.out("}", true);
                        wr.out("__returns__.asInstanceOf[", false);
                        return [4 /*yield*/, this.writeTypeDef(node, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out("]", true);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerScalaClassWriter.prototype.writeFnStart = function (node, ctx, wr) {
        wr.out("var __returns__ : Any = null", true);
        wr.out("try {", true);
        wr.indent(1);
    };
    ;
    RangerScalaClassWriter.prototype.CustomOperator = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fc, cmd, listNode, itemNode, indexNode, bodyNode, break_cnt_1, continue_cnt_1, tryBlock, catchBlock, rValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fc = node.getFirst();
                        cmd = fc.vref;
                        if (!(cmd == "for")) return [3 /*break*/, 8];
                        listNode = node.children[1];
                        itemNode = node.children[2];
                        indexNode = node.children[3];
                        bodyNode = node.children[4];
                        break_cnt_1 = 0;
                        continue_cnt_1 = 0;
                        return [4 /*yield*/, bodyNode.forTree((function (item, i) {
                                if (item.isFirstVref("break")) {
                                    break_cnt_1 = break_cnt_1 + 1;
                                }
                                if (item.isFirstVref("continue")) {
                                    continue_cnt_1 = continue_cnt_1 + 1;
                                }
                            }))];
                    case 1:
                        _a.sent();
                        if (continue_cnt_1 > 0) {
                            ctx.addError(node, "oops, sorry. Currently Scala output can not handle for-loops with continue :/");
                            return [2 /*return*/];
                        }
                        if (break_cnt_1 > 0) {
                            wr.addImport("scala.util.control._");
                            wr.out("try {", true);
                            wr.indent(1);
                            wr.out("val __break__ = new Breaks", true);
                            wr.out("__break__.breakable {", true);
                            wr.indent(1);
                        }
                        wr.out("for( ", false);
                        return [4 /*yield*/, this.WalkNode(indexNode, ctx, wr)];
                    case 2:
                        _a.sent();
                        wr.out(" <- 0 until ", false);
                        return [4 /*yield*/, this.WalkNode(listNode, ctx, wr)];
                    case 3:
                        _a.sent();
                        wr.out(".length ) {", true);
                        wr.indent(1);
                        wr.out("val ", false);
                        return [4 /*yield*/, this.WalkNode(itemNode, ctx, wr)];
                    case 4:
                        _a.sent();
                        wr.out(" = ", false);
                        return [4 /*yield*/, this.WalkNode(listNode, ctx, wr)];
                    case 5:
                        _a.sent();
                        wr.out("(", false);
                        return [4 /*yield*/, this.WalkNode(indexNode, ctx, wr)];
                    case 6:
                        _a.sent();
                        wr.out(")", true);
                        return [4 /*yield*/, this.WalkNode(bodyNode, ctx, wr)];
                    case 7:
                        _a.sent();
                        wr.indent(-1);
                        wr.out("}", true);
                        if (break_cnt_1 > 0) {
                            wr.indent(-1);
                            wr.out("}", true);
                            wr.indent(-1);
                            wr.out("}", true);
                        }
                        return [2 /*return*/];
                    case 8:
                        if (!(cmd == "try")) return [3 /*break*/, 11];
                        tryBlock = node.getSecond();
                        catchBlock = node.getThird();
                        wr.out("try {", true);
                        wr.indent(1);
                        return [4 /*yield*/, this.WalkNode(tryBlock, ctx, wr)];
                    case 9:
                        _a.sent();
                        wr.indent(-1);
                        wr.out("} catch {", true);
                        wr.indent(1);
                        if (ctx.inLambda()) {
                            wr.out("case rv:ScalaReturnValue => {", true);
                            wr.indent(1);
                            wr.out("throw new ScalaReturnValue(rv.value)", true);
                            wr.indent(-1);
                            wr.out("}", true);
                        }
                        wr.out("case e: Exception => {", true);
                        wr.indent(1);
                        return [4 /*yield*/, this.WalkNode(catchBlock, ctx, wr)];
                    case 10:
                        _a.sent();
                        wr.indent(-1);
                        wr.out("}", true);
                        wr.indent(-1);
                        wr.out("}", true);
                        return [2 /*return*/];
                    case 11:
                        if (!(cmd == "return")) return [3 /*break*/, 20];
                        if (!((node.children.length) > 1)) return [3 /*break*/, 18];
                        rValue = node.getSecond();
                        if (!ctx.getFlag("last_returns")) return [3 /*break*/, 13];
                        return [4 /*yield*/, this.WalkNode(rValue, ctx, wr)];
                    case 12:
                        _a.sent();
                        return [2 /*return*/];
                    case 13:
                        if (!ctx.inLambda()) return [3 /*break*/, 15];
                        wr.out("throw new ScalaReturnValue(", false);
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(rValue, ctx, wr)];
                    case 14:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out(")", true);
                        return [3 /*break*/, 17];
                    case 15:
                        wr.out("return ", false);
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(rValue, ctx, wr)];
                    case 16:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out("  ", true);
                        _a.label = 17;
                    case 17: return [3 /*break*/, 19];
                    case 18:
                        if (ctx.inLambda()) {
                            wr.out("throw new ScalaReturnValue(null)", true);
                        }
                        else {
                            wr.out("return", true);
                        }
                        _a.label = 19;
                    case 19: return [2 /*return*/];
                    case 20: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerScalaClassWriter.prototype.CreateLambda = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var lambdaCtx, fnDef, args, body, i, arg, return_cnt, line_cnt, i_1, item, i_2, item_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        lambdaCtx = node.lambda_ctx;
                        fnDef = node.children[0];
                        args = node.children[1];
                        body = node.children[2];
                        lambdaCtx.is_lambda = true;
                        wr.out("((", false);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < args.children.length)) return [3 /*break*/, 7];
                        arg = args.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        if (!(arg.flow_done == false)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.compiler.parser.WalkNode(arg, lambdaCtx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [4 /*yield*/, this.WalkNode(arg, lambdaCtx, wr)];
                    case 4:
                        _a.sent();
                        wr.out(" : ", false);
                        return [4 /*yield*/, this.writeTypeDef(arg, ctx, wr)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        i++;
                        return [3 /*break*/, 1];
                    case 7:
                        ;
                        wr.out(")", false);
                        return_cnt = 0;
                        line_cnt = body.children.length;
                        return [4 /*yield*/, body.forTree((function (item, i) {
                                if (item.isFirstVref("return")) {
                                    return_cnt = return_cnt + 1;
                                }
                            }))];
                    case 8:
                        _a.sent();
                        if (line_cnt == 1) {
                            return_cnt = 1;
                        }
                        if (!(fnDef.type_name != "void")) return [3 /*break*/, 13];
                        if (!(return_cnt == 1)) return [3 /*break*/, 13];
                        if (line_cnt > 1) {
                            wr.out(" => { ", true);
                            wr.indent(1);
                            lambdaCtx.restartExpressionLevel();
                        }
                        else {
                            wr.out(" => ", false);
                            lambdaCtx.setInExpr();
                        }
                        lambdaCtx.setFlag("last_returns", true);
                        i_1 = 0;
                        _a.label = 9;
                    case 9:
                        if (!(i_1 < body.children.length)) return [3 /*break*/, 12];
                        item = body.children[i_1];
                        return [4 /*yield*/, this.WalkNode(item, lambdaCtx, wr)];
                    case 10:
                        _a.sent();
                        _a.label = 11;
                    case 11:
                        i_1++;
                        return [3 /*break*/, 9];
                    case 12:
                        ;
                        if (line_cnt > 1) {
                            wr.newline();
                            wr.indent(-1);
                            wr.out("}", false);
                        }
                        else {
                            lambdaCtx.unsetInExpr();
                        }
                        wr.out(")", false);
                        return [2 /*return*/];
                    case 13:
                        if ((line_cnt > 1) || (return_cnt > 1)) {
                            wr.out(" => { ", true);
                            wr.indent(1);
                            lambdaCtx.restartExpressionLevel();
                        }
                        else {
                            wr.out(" => ", false);
                            lambdaCtx.setInExpr();
                        }
                        if (fnDef.type_name != "void") {
                            this.writeFnStart(fnDef, ctx, wr);
                        }
                        i_2 = 0;
                        _a.label = 14;
                    case 14:
                        if (!(i_2 < body.children.length)) return [3 /*break*/, 17];
                        item_1 = body.children[i_2];
                        return [4 /*yield*/, this.WalkNode(item_1, lambdaCtx, wr)];
                    case 15:
                        _a.sent();
                        _a.label = 16;
                    case 16:
                        i_2++;
                        return [3 /*break*/, 14];
                    case 17:
                        ;
                        if (!(fnDef.type_name != "void")) return [3 /*break*/, 19];
                        return [4 /*yield*/, this.writeFnEnd(fnDef, ctx, wr)];
                    case 18:
                        _a.sent();
                        _a.label = 19;
                    case 19:
                        if ((line_cnt > 1) || (return_cnt > 1)) {
                            wr.newline();
                            wr.indent(-1);
                            wr.out("}", false);
                        }
                        else {
                            lambdaCtx.unsetInExpr();
                        }
                        wr.out(")", false);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerScalaClassWriter.prototype.writeArrayLiteral = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        wr.out("collection.mutable.ArrayBuffer(", false);
                        return [4 /*yield*/, operatorsOf.forEach_15(node.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (index > 0) {
                                                wr.out(", ", false);
                                            }
                                            return [4 /*yield*/, this.WalkNode(item, ctx, wr)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        wr.out(")", false);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerScalaClassWriter.prototype.writeClass = function (node, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var declaredFunction, cl, wr, b_class_has_content, i, pName, pC, i_1, fnVar, mVs, i_2, variant, constr, i_3, arg, i_4, pName_1, i_5, pvar, constr_1, subCtx, i_6, fnVar_1, mVs_1, _loop_6, this_3, variant_1, i_7, b_has_non_main_static, b_had_app, app_obj, i_8, variant_2, subCtx_2, variant_3, b_scalafiddle, theEnd, subCtx_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        declaredFunction = {};
                        cl = node.clDesc;
                        if (typeof (cl) === "undefined") {
                            return [2 /*return*/];
                        }
                        wr = orig_wr;
                        if (this.init_done == false) {
                            wr.out("case class ScalaReturnValue(value:Any) extends Exception", true);
                            wr.createTag("imports");
                            this.init_done = true;
                            wr.createTag("beginning");
                        }
                        b_class_has_content = ((cl.has_constructor || ((cl.variables.length) > 0)) || ((cl.defined_variants.length) > 0)) || ((cl.extends_classes.length) > 0);
                        if (!b_class_has_content) return [3 /*break*/, 19];
                        if ((cl.extends_classes.length) > 0) {
                            for (i = 0; i < cl.extends_classes.length; i++) {
                                pName = cl.extends_classes[i];
                                pC = ctx.findClass(pName);
                                for (i_1 = 0; i_1 < pC.defined_variants.length; i_1++) {
                                    fnVar = pC.defined_variants[i_1];
                                    mVs = pC.method_variants[fnVar];
                                    for (i_2 = 0; i_2 < mVs.variants.length; i_2++) {
                                        variant = mVs.variants[i_2];
                                        declaredFunction[variant.name] = true;
                                    }
                                    ;
                                }
                                ;
                            }
                            ;
                        }
                        wr.out(("class " + cl.name) + " ", false);
                        if (!cl.has_constructor) return [3 /*break*/, 5];
                        wr.out("(", false);
                        constr = cl.constructor_fn;
                        i_3 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_3 < constr.params.length)) return [3 /*break*/, 4];
                        arg = constr.params[i_3];
                        if (i_3 > 0) {
                            wr.out(", ", false);
                        }
                        wr.out(arg.name + " : ", false);
                        return [4 /*yield*/, this.writeTypeDef(arg.nameNode, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i_3++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        wr.out(")", false);
                        _a.label = 5;
                    case 5:
                        if ((cl.extends_classes.length) > 0) {
                            wr.out(" extends ", false);
                            for (i_4 = 0; i_4 < cl.extends_classes.length; i_4++) {
                                pName_1 = cl.extends_classes[i_4];
                                wr.out(pName_1, false);
                            }
                            ;
                        }
                        wr.out(" {", true);
                        wr.indent(1);
                        i_5 = 0;
                        _a.label = 6;
                    case 6:
                        if (!(i_5 < cl.variables.length)) return [3 /*break*/, 9];
                        pvar = cl.variables[i_5];
                        return [4 /*yield*/, this.writeVarDef(pvar.node, ctx, wr)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        i_5++;
                        return [3 /*break*/, 6];
                    case 9:
                        ;
                        if (!cl.has_constructor) return [3 /*break*/, 11];
                        constr_1 = cl.constructor_fn;
                        wr.newline();
                        subCtx = constr_1.fnCtx;
                        subCtx.is_function = true;
                        return [4 /*yield*/, this.WalkNode(constr_1.fnBody, subCtx, wr)];
                    case 10:
                        _a.sent();
                        wr.newline();
                        _a.label = 11;
                    case 11:
                        i_6 = 0;
                        _a.label = 12;
                    case 12:
                        if (!(i_6 < cl.defined_variants.length)) return [3 /*break*/, 18];
                        fnVar_1 = cl.defined_variants[i_6];
                        mVs_1 = cl.method_variants[fnVar_1];
                        _loop_6 = function (i_7) {
                            var return_cnt, line_cnt, subCtx_1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        variant_1 = mVs_1.variants[i_7];
                                        if ((typeof (declaredFunction[variant_1.name]) != "undefined" && declaredFunction.hasOwnProperty(variant_1.name))) {
                                            wr.out("override ", false);
                                        }
                                        wr.out("def ", false);
                                        wr.out(" ", false);
                                        wr.out(variant_1.name + "(", false);
                                        return [4 /*yield*/, this_3.writeArgsDef(variant_1, ctx, wr)];
                                    case 1:
                                        _a.sent();
                                        wr.out(") : ", false);
                                        return [4 /*yield*/, this_3.writeTypeDef(variant_1.nameNode, ctx, wr)];
                                    case 2:
                                        _a.sent();
                                        wr.out(" = ", false);
                                        return_cnt = 0;
                                        line_cnt = variant_1.fnBody.children.length;
                                        return [4 /*yield*/, variant_1.fnBody.forTree((function (item, i) {
                                                if (item.isFirstVref("return")) {
                                                    return_cnt = return_cnt + 1;
                                                }
                                            }))];
                                    case 3:
                                        _a.sent();
                                        subCtx_1 = variant_1.fnCtx;
                                        subCtx_1.is_function = true;
                                        if (!(return_cnt <= 1)) return [3 /*break*/, 5];
                                        subCtx_1.setFlag("last_returns", true);
                                        if (line_cnt > 1) {
                                            wr.out(" { ", true);
                                            wr.indent(1);
                                        }
                                        else {
                                            subCtx_1.setInExpr();
                                        }
                                        return [4 /*yield*/, this_3.WalkNode(variant_1.fnBody, subCtx_1, wr)];
                                    case 4:
                                        _a.sent();
                                        if (line_cnt > 1) {
                                            wr.newline();
                                            wr.indent(-1);
                                            wr.out("}", true);
                                        }
                                        else {
                                            subCtx_1.unsetInExpr();
                                            wr.newline();
                                        }
                                        return [3 /*break*/, 7];
                                    case 5:
                                        wr.out(" {", true);
                                        wr.indent(1);
                                        wr.newline();
                                        return [4 /*yield*/, this_3.WalkNode(variant_1.fnBody, subCtx_1, wr)];
                                    case 6:
                                        _a.sent();
                                        wr.newline();
                                        wr.indent(-1);
                                        wr.out("}", true);
                                        _a.label = 7;
                                    case 7: return [2 /*return*/];
                                }
                            });
                        };
                        this_3 = this;
                        i_7 = 0;
                        _a.label = 13;
                    case 13:
                        if (!(i_7 < mVs_1.variants.length)) return [3 /*break*/, 16];
                        return [5 /*yield**/, _loop_6(i_7)];
                    case 14:
                        _a.sent();
                        _a.label = 15;
                    case 15:
                        i_7++;
                        return [3 /*break*/, 13];
                    case 16:
                        ;
                        _a.label = 17;
                    case 17:
                        i_6++;
                        return [3 /*break*/, 12];
                    case 18:
                        ;
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 19;
                    case 19:
                        b_has_non_main_static = false;
                        b_had_app = false;
                        return [4 /*yield*/, operatorsOf.forEach_29(cl.static_methods, (function (item, index) {
                                if (item.name != "main") {
                                    b_has_non_main_static = true;
                                }
                                else {
                                    b_had_app = true;
                                    var it_22 = item;
                                    app_obj = it_22;
                                }
                            }))];
                    case 20:
                        _a.sent();
                        if (!b_has_non_main_static) return [3 /*break*/, 27];
                        wr.out("", true);
                        wr.out((("// companion object for static methods of " + cl.name) + " static cnt == ") + (cl.static_methods.length), true);
                        wr.out(("object " + cl.name) + " {", true);
                        wr.indent(1);
                        i_8 = 0;
                        _a.label = 21;
                    case 21:
                        if (!(i_8 < cl.static_methods.length)) return [3 /*break*/, 26];
                        variant_2 = cl.static_methods[i_8];
                        if (variant_2.nameNode.hasFlag("main")) {
                            return [3 /*break*/, 25];
                        }
                        wr.out("def ", false);
                        wr.out(" ", false);
                        wr.out(variant_2.name + "(", false);
                        return [4 /*yield*/, this.writeArgsDef(variant_2, ctx, wr)];
                    case 22:
                        _a.sent();
                        wr.out(") : ", false);
                        return [4 /*yield*/, this.writeTypeDef(variant_2.nameNode, ctx, wr)];
                    case 23:
                        _a.sent();
                        wr.out(" = {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx_2 = variant_2.fnCtx;
                        subCtx_2.is_function = true;
                        return [4 /*yield*/, this.WalkNode(variant_2.fnBody, subCtx_2, wr)];
                    case 24:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 25;
                    case 25:
                        i_8++;
                        return [3 /*break*/, 21];
                    case 26:
                        ;
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 27;
                    case 27:
                        if (!b_had_app) return [3 /*break*/, 29];
                        variant_3 = app_obj;
                        b_scalafiddle = ctx.hasCompilerFlag("scalafiddle");
                        theEnd = wr.getTag("file_end");
                        if (b_scalafiddle) {
                            theEnd = wr.getTag("beginning");
                            theEnd.out("", true);
                            theEnd.out("// -----------  the scalafiddle main function begins ---------", true);
                        }
                        if (b_scalafiddle == false) {
                            theEnd.out("", true);
                            theEnd.out("// application main function for " + cl.name, true);
                            theEnd.out(("object App" + cl.name) + " extends App {", true);
                            theEnd.indent(1);
                            theEnd.newline();
                        }
                        subCtx_3 = variant_3.fnCtx;
                        subCtx_3.is_function = true;
                        return [4 /*yield*/, this.WalkNode(variant_3.fnBody, subCtx_3, theEnd)];
                    case 28:
                        _a.sent();
                        if (b_scalafiddle) {
                            theEnd.out("// -----------  the scalafiddle main function ends ---------", true);
                            theEnd.out("", true);
                        }
                        if (b_scalafiddle == false) {
                            theEnd.newline();
                            theEnd.indent(-1);
                            theEnd.out("}", true);
                        }
                        _a.label = 29;
                    case 29: return [2 /*return*/];
                }
            });
        });
    };
    ;
    return RangerScalaClassWriter;
}(RangerGenericClassWriter));
exports.RangerScalaClassWriter = RangerScalaClassWriter;
var RangerGolangClassWriter = /** @class */ (function (_super) {
    __extends(RangerGolangClassWriter, _super);
    function RangerGolangClassWriter() {
        var _this = _super.call(this) || this;
        _this.thisName = "this";
        _this.write_raw_type = false;
        _this.did_write_nullable = false;
        return _this;
    }
    RangerGolangClassWriter.prototype.WriteScalarValue = function (node, ctx, wr) {
        switch (node.value_type) {
            case 2:
                wr.out(node.getParsedString(), false);
                break;
            case 4:
                var s = this.EncodeString(node, ctx, wr);
                wr.out(("\"" + s) + "\"", false);
                break;
            case 3:
                wr.out(("int64(" + node.int_value) + ")", false);
                break;
            case 5:
                if (node.boolean_value) {
                    wr.out("true", false);
                }
                else {
                    wr.out("false", false);
                }
                break;
        }
        ;
    };
    ;
    RangerGolangClassWriter.prototype.getObjectTypeString = function (type_string, ctx) {
        if (type_string == "this") {
            return this.thisName;
        }
        if (ctx.isDefinedClass(type_string)) {
            var cc = ctx.findClass(type_string);
            if (cc.is_union) {
                return "interface{}";
            }
            if (cc.doesInherit()) {
                return "IFACE_" + ctx.transformTypeName(type_string);
            }
        }
        switch (type_string) {
            case "int":
                return "int64";
            case "string":
                return "string";
            case "boolean":
                return "bool";
            case "double":
                return "float64";
            case "char":
                return "byte";
            case "charbuffer":
                return "[]byte";
        }
        ;
        return ctx.transformTypeName(type_string);
    };
    ;
    RangerGolangClassWriter.prototype.getTypeString2 = function (type_string, ctx) {
        if (type_string == "this") {
            return this.thisName;
        }
        switch (type_string) {
            case "int":
                return "int64";
            case "string":
                return "string";
            case "boolean":
                return "bool";
            case "double":
                return "float64";
            case "char":
                return "byte";
            case "charbuffer":
                return "[]byte";
        }
        ;
        if (ctx.isDefinedClass(type_string)) {
            var cc = ctx.findClass(type_string);
            if (cc.is_union) {
                return "interface{}";
            }
        }
        return ctx.transformTypeName(type_string);
    };
    ;
    RangerGolangClassWriter.prototype.writeRawTypeDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.write_raw_type = true;
                        return [4 /*yield*/, this.writeTypeDef(node, ctx, wr)];
                    case 1:
                        _a.sent();
                        this.write_raw_type = false;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGolangClassWriter.prototype.writeTypeDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.writeTypeDef2(node, ctx, wr);
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerGolangClassWriter.prototype.writeArrayTypeDef = function (node, ctx, wr) {
        var v_type = node.value_type;
        var a_name = node.array_type;
        if (((v_type == 10) || (v_type == 11)) || (v_type == 0)) {
            v_type = node.typeNameAsType(ctx);
        }
        if (node.eval_type != 0) {
            v_type = node.eval_type;
            if ((node.eval_array_type.length) > 0) {
                a_name = node.eval_array_type;
            }
        }
        switch (v_type) {
            case 7:
                if (ctx.isDefinedClass(a_name)) {
                    var cc = ctx.findClass(a_name);
                    if (cc.is_union) {
                        wr.out("interface{}", false);
                        return;
                    }
                    if (cc.doesInherit()) {
                        wr.out("IFACE_" + this.getTypeString2(a_name, ctx), false);
                        return;
                    }
                }
                if (ctx.isPrimitiveType(a_name) == false) {
                    wr.out("*", false);
                }
                wr.out(this.getObjectTypeString(a_name, ctx) + "", false);
                break;
            case 6:
                if (ctx.isDefinedClass(a_name)) {
                    var cc_1 = ctx.findClass(a_name);
                    if (cc_1.is_union) {
                        wr.out("interface{}", false);
                        return;
                    }
                    if (cc_1.doesInherit()) {
                        wr.out("IFACE_" + this.getTypeString2(a_name, ctx), false);
                        return;
                    }
                }
                if ((this.write_raw_type == false) && (ctx.isPrimitiveType(a_name) == false)) {
                    wr.out("*", false);
                }
                wr.out(this.getObjectTypeString(a_name, ctx) + "", false);
                break;
            default:
                break;
        }
        ;
    };
    ;
    RangerGolangClassWriter.prototype.writeTypeDef2 = function (node, ctx, wr) {
        var v_type = node.value_type;
        var t_name = node.type_name;
        var a_name = node.array_type;
        var k_name = node.key_type;
        if (((v_type == 10) || (v_type == 11)) || (v_type == 0)) {
            v_type = node.typeNameAsType(ctx);
        }
        if (node.eval_type != 0) {
            v_type = node.eval_type;
            if ((node.eval_type_name.length) > 0) {
                t_name = node.eval_type_name;
            }
            if ((node.eval_array_type.length) > 0) {
                a_name = node.eval_array_type;
            }
            if ((node.eval_key_type.length) > 0) {
                k_name = node.eval_key_type;
            }
        }
        switch (v_type) {
            case 17:
                var rv = node.expression_value.children[0];
                var sec = node.expression_value.children[1];
                /** unused:  const fc : CodeNode  = sec.getFirst()   **/
                wr.out("func(", false);
                for (var i = 0; i < sec.children.length; i++) {
                    var arg = sec.children[i];
                    if (i > 0) {
                        wr.out(", ", false);
                    }
                    this.writeTypeDef2(arg, ctx, wr);
                }
                ;
                wr.out(") ", false);
                this.writeTypeDef2(rv, ctx, wr);
                break;
            case 13:
                wr.out("int64", false);
                break;
            case 3:
                wr.out("int64", false);
                break;
            case 2:
                wr.out("float64", false);
                break;
            case 4:
                wr.out("string", false);
                break;
            case 5:
                wr.out("bool", false);
                break;
            case 14:
                wr.out("byte", false);
                break;
            case 15:
                wr.out("[]byte", false);
                break;
            case 7:
                if (this.write_raw_type) {
                    wr.out(this.getObjectTypeString(a_name, ctx) + "", false);
                }
                else {
                    wr.out(("map[" + this.getObjectTypeString(k_name, ctx)) + "]", false);
                    if (ctx.isDefinedClass(a_name)) {
                        var cc = ctx.findClass(a_name);
                        if (cc.is_union) {
                            wr.out("interface{}", false);
                            return;
                        }
                        if (cc.doesInherit()) {
                            wr.out("IFACE_" + this.getTypeString2(a_name, ctx), false);
                            return;
                        }
                    }
                    if ((this.write_raw_type == false) && (ctx.isPrimitiveType(a_name) == false)) {
                        wr.out("*", false);
                    }
                    wr.out(this.getObjectTypeString(a_name, ctx) + "", false);
                }
                break;
            case 6:
                if (false == this.write_raw_type) {
                    wr.out("[]", false);
                }
                if (ctx.isDefinedClass(a_name)) {
                    var cc_1 = ctx.findClass(a_name);
                    if (cc_1.is_union) {
                        wr.out("interface{}", false);
                        return;
                    }
                    if (cc_1.doesInherit()) {
                        wr.out("IFACE_" + this.getTypeString2(a_name, ctx), false);
                        return;
                    }
                }
                if ((this.write_raw_type == false) && (ctx.isPrimitiveType(a_name) == false)) {
                    wr.out("*", false);
                }
                wr.out(this.getObjectTypeString(a_name, ctx) + "", false);
                break;
            default:
                if ((node.type_name == "void") || (false == ((node.type_name.length) > 0))) {
                    wr.out("()", false);
                    return;
                }
                var b_iface = false;
                if (ctx.isDefinedClass(t_name)) {
                    var cc_2 = ctx.findClass(t_name);
                    b_iface = cc_2.is_interface;
                    if (cc_2.is_system) {
                        var sysName = cc_2.systemNames["go"];
                        if ((typeof (sysName) !== "undefined" && sysName != null)) {
                            wr.out(sysName, false);
                        }
                        else {
                            ctx.addError(node, ("No system class " + t_name) + "defined for Go ");
                        }
                        return;
                    }
                }
                if (ctx.isDefinedClass(t_name)) {
                    var cc_3 = ctx.findClass(t_name);
                    if (cc_3.is_union) {
                        wr.out("interface{}", false);
                        return;
                    }
                    if (cc_3.doesInherit()) {
                        wr.out("IFACE_" + this.getTypeString2(t_name, ctx), false);
                        return;
                    }
                }
                if (((this.write_raw_type == false) && (node.isPrimitiveType() == false)) && (b_iface == false)) {
                    wr.out("*", false);
                }
                wr.out(this.getTypeString2(t_name, ctx), false);
                break;
        }
        ;
    };
    ;
    RangerGolangClassWriter.prototype.WriteVRef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var rootObjName, enumName, e, next_is_gs, needs_par, ns_last, had_static, i, p, c, part, cc, currC, up, lvDef, part_1, cc_1, currC_1, up_1, lvDef_1, p_1, b_was_static, i_1, part_2, cc_2, currC_2, up_2, lvDef_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (node.vref == "this") {
                            wr.out(this.thisName, false);
                            return [2 /*return*/];
                        }
                        if (node.eval_type == 13) {
                            if ((node.ns.length) > 1) {
                                rootObjName = node.ns[0];
                                enumName = node.ns[1];
                                e = ctx.getEnum(rootObjName);
                                if ((typeof (e) !== "undefined" && e != null)) {
                                    wr.out("" + ((e.values[enumName])), false);
                                    return [2 /*return*/];
                                }
                            }
                        }
                        next_is_gs = false;
                        needs_par = false;
                        ns_last = (node.ns.length) - 1;
                        if (!((node.nsp.length) > 0)) return [3 /*break*/, 6];
                        had_static = false;
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < node.nsp.length)) return [3 /*break*/, 5];
                        p = node.nsp[i];
                        if (next_is_gs) {
                            if (p.isProperty()) {
                                wr.out(".Get_", false);
                                needs_par = true;
                            }
                            else {
                                needs_par = false;
                            }
                            next_is_gs = false;
                        }
                        if (needs_par == false) {
                            if (i > 0) {
                                if (had_static) {
                                    wr.out("_static_", false);
                                }
                                else {
                                    wr.out(".", false);
                                }
                            }
                        }
                        if (((typeof (p.nameNode) !== "undefined" && p.nameNode != null)) && ctx.isDefinedClass(p.nameNode.type_name)) {
                            c = ctx.findClass(p.nameNode.type_name);
                            if (c.doesInherit()) {
                                next_is_gs = true;
                            }
                        }
                        if (i == 0) {
                            part = node.ns[0];
                            if (part == "this") {
                                wr.out(this.thisName, false);
                                return [3 /*break*/, 4];
                            }
                            cc = ctx.getCurrentClass();
                            if (((part != this.thisName) && ((typeof (cc) !== "undefined" && cc != null))) && (false == ctx.isInStatic())) {
                                currC = cc;
                                up = currC.findVariable(part);
                                lvDef = ctx.getVariableDef(part);
                                if (((typeof (up) !== "undefined" && up != null)) && lvDef.is_class_variable) {
                                    /** unused:  const p3 : RangerAppParamDesc  = up   **/
                                    wr.out(this.thisName + ".", false);
                                }
                            }
                        }
                        if ((p.compiledName.length) > 0) {
                            wr.out(this.adjustType(p.compiledName), false);
                        }
                        else {
                            if ((p.name.length) > 0) {
                                wr.out(this.adjustType(p.name), false);
                            }
                            else {
                                wr.out(this.adjustType((node.ns[i])), false);
                            }
                        }
                        if (needs_par) {
                            wr.out("()", false);
                            needs_par = false;
                        }
                        if (!((((typeof (p.nameNode) !== "undefined" && p.nameNode != null)) && p.nameNode.hasFlag("optional")) && (i != ns_last))) return [3 /*break*/, 3];
                        wr.out(".value.(", false);
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 2:
                        _a.sent();
                        wr.out(")", false);
                        _a.label = 3;
                    case 3:
                        if (p.isClass()) {
                            had_static = true;
                        }
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 1];
                    case 5:
                        ;
                        return [2 /*return*/];
                    case 6:
                        if (node.hasParamDesc) {
                            part_1 = node.ns[0];
                            cc_1 = ctx.getCurrentClass();
                            if (((part_1 != this.thisName) && ((typeof (cc_1) !== "undefined" && cc_1 != null))) && (false == ctx.isInStatic())) {
                                currC_1 = cc_1;
                                up_1 = currC_1.findVariable(part_1);
                                lvDef_1 = ctx.getVariableDef(part_1);
                                if (((typeof (up_1) !== "undefined" && up_1 != null)) && lvDef_1.is_class_variable) {
                                    /** unused:  const p3_1 : RangerAppParamDesc  = up_1   **/
                                    wr.out(this.thisName + ".", false);
                                }
                            }
                            p_1 = node.paramDesc;
                            wr.out(p_1.compiledName, false);
                            return [2 /*return*/];
                        }
                        b_was_static = false;
                        for (i_1 = 0; i_1 < node.ns.length; i_1++) {
                            part_2 = node.ns[i_1];
                            if (i_1 > 0) {
                                if ((i_1 == 1) && b_was_static) {
                                    wr.out("_static_", false);
                                }
                                else {
                                    wr.out(".", false);
                                }
                            }
                            if (i_1 == 0) {
                                if (part_2 == "this") {
                                    wr.out(this.thisName, false);
                                    continue;
                                }
                                if (ctx.hasClass(part_2)) {
                                    b_was_static = true;
                                }
                                cc_2 = ctx.getCurrentClass();
                                if (((part_2 != "this") && ((typeof (cc_2) !== "undefined" && cc_2 != null))) && (false == ctx.isInStatic())) {
                                    currC_2 = cc_2;
                                    up_2 = currC_2.findVariable(part_2);
                                    lvDef_2 = ctx.getVariableDef(part_2);
                                    if (((typeof (up_2) !== "undefined" && up_2 != null)) && lvDef_2.is_class_variable) {
                                        /** unused:  const p3_2 : RangerAppParamDesc  = up_2   **/
                                        wr.out(this.thisName + ".", false);
                                    }
                                }
                            }
                            wr.out(this.adjustType(part_2), false);
                        }
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGolangClassWriter.prototype.WriteSetterVRef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var rootObjName, enumName, e, next_is_gs, needs_par, ns_len, had_static, i, p, c, part, cc, currC, up, lvDef, part_1, cc_1, currC_1, up_1, lvDef_1, p_1, b_was_static, i_1, part_2, cc_2, currC_2, up_2, lvDef_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (node.vref == "this") {
                            wr.out(this.thisName, false);
                            return [2 /*return*/];
                        }
                        if (node.eval_type == 13) {
                            rootObjName = node.ns[0];
                            enumName = node.ns[1];
                            e = ctx.getEnum(rootObjName);
                            if ((typeof (e) !== "undefined" && e != null)) {
                                wr.out("" + ((e.values[enumName])), false);
                                return [2 /*return*/];
                            }
                        }
                        next_is_gs = false;
                        needs_par = false;
                        ns_len = (node.ns.length) - 1;
                        if (!((node.nsp.length) > 0)) return [3 /*break*/, 6];
                        had_static = false;
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < node.nsp.length)) return [3 /*break*/, 5];
                        p = node.nsp[i];
                        if (next_is_gs) {
                            if (p.isProperty()) {
                                wr.out(".Get_", false);
                                needs_par = true;
                            }
                            else {
                                needs_par = false;
                            }
                            next_is_gs = false;
                        }
                        if (needs_par == false) {
                            if (i > 0) {
                                if (had_static) {
                                    wr.out("_static_", false);
                                }
                                else {
                                    wr.out(".", false);
                                }
                            }
                        }
                        if (ctx.isDefinedClass(p.nameNode.type_name)) {
                            c = ctx.findClass(p.nameNode.type_name);
                            if (c.doesInherit()) {
                                next_is_gs = true;
                            }
                        }
                        if (i == 0) {
                            part = node.ns[0];
                            if (part == "this") {
                                wr.out(this.thisName, false);
                                return [3 /*break*/, 4];
                            }
                            cc = ctx.getCurrentClass();
                            if (((part != this.thisName) && ((typeof (cc) !== "undefined" && cc != null))) && (false == ctx.isInStatic())) {
                                currC = cc;
                                up = currC.findVariable(part);
                                lvDef = ctx.getVariableDef(part);
                                if (((typeof (up) !== "undefined" && up != null)) && lvDef.is_class_variable) {
                                    /** unused:  const p3 : RangerAppParamDesc  = up   **/
                                    wr.out(this.thisName + ".", false);
                                }
                            }
                        }
                        if ((p.compiledName.length) > 0) {
                            wr.out(this.adjustType(p.compiledName), false);
                        }
                        else {
                            if ((p.name.length) > 0) {
                                wr.out(this.adjustType(p.name), false);
                            }
                            else {
                                wr.out(this.adjustType((node.ns[i])), false);
                            }
                        }
                        if (needs_par) {
                            wr.out("()", false);
                            needs_par = false;
                        }
                        if (!(i < ns_len)) return [3 /*break*/, 3];
                        if (!p.nameNode.hasFlag("optional")) return [3 /*break*/, 3];
                        wr.out(".value.(", false);
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 2:
                        _a.sent();
                        wr.out(")", false);
                        _a.label = 3;
                    case 3:
                        if (p.isClass()) {
                            had_static = true;
                        }
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 1];
                    case 5:
                        ;
                        return [2 /*return*/];
                    case 6:
                        if (node.hasParamDesc) {
                            part_1 = node.ns[0];
                            cc_1 = ctx.getCurrentClass();
                            if (((part_1 != this.thisName) && ((typeof (cc_1) !== "undefined" && cc_1 != null))) && (false == ctx.isInStatic())) {
                                currC_1 = cc_1;
                                up_1 = currC_1.findVariable(part_1);
                                lvDef_1 = ctx.getVariableDef(part_1);
                                if (((typeof (up_1) !== "undefined" && up_1 != null)) && lvDef_1.is_class_variable) {
                                    /** unused:  const p3_1 : RangerAppParamDesc  = up_1   **/
                                    wr.out(this.thisName + ".", false);
                                }
                            }
                            p_1 = node.paramDesc;
                            wr.out(p_1.compiledName, false);
                            return [2 /*return*/];
                        }
                        b_was_static = false;
                        for (i_1 = 0; i_1 < node.ns.length; i_1++) {
                            part_2 = node.ns[i_1];
                            if (i_1 > 0) {
                                if ((i_1 == 1) && b_was_static) {
                                    wr.out("_static_", false);
                                }
                                else {
                                    wr.out(".", false);
                                }
                            }
                            if (i_1 == 0) {
                                if (part_2 == "this") {
                                    wr.out(this.thisName, false);
                                    continue;
                                }
                                if (ctx.hasClass(part_2)) {
                                    b_was_static = true;
                                }
                                cc_2 = ctx.getCurrentClass();
                                if (((part_2 != "this") && ((typeof (cc_2) !== "undefined" && cc_2 != null))) && (false == ctx.isInStatic())) {
                                    currC_2 = cc_2;
                                    up_2 = currC_2.findVariable(part_2);
                                    lvDef_2 = ctx.getVariableDef(part_2);
                                    if (((typeof (up_2) !== "undefined" && up_2 != null)) && lvDef_2.is_class_variable) {
                                        /** unused:  const p3_2 : RangerAppParamDesc  = up_2   **/
                                        wr.out(this.thisName + ".", false);
                                    }
                                }
                            }
                            wr.out(this.adjustType(part_2), false);
                        }
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGolangClassWriter.prototype.goExtractAssign = function (value, p, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var arr_node, pArr, left, a_len, next_is_gs, last_was_setter, needs_par, b_was_static, i, part, partDef, c, cc, currC, up, lvDef, p_1, pp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        arr_node = value.children[1];
                        wr.newline();
                        wr.out("", true);
                        wr.out("// array_extract operator ", true);
                        wr.out("var ", false);
                        pArr = new RangerAppParamDesc();
                        pArr.name = "_arrTemp";
                        pArr.node = arr_node;
                        pArr.nameNode = arr_node;
                        pArr.is_optional = false;
                        ctx.defineVariable(p.name, pArr);
                        wr.out(pArr.compiledName, false);
                        wr.out(" ", false);
                        return [4 /*yield*/, this.writeTypeDef(arr_node, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.newline();
                        wr.out(((p.compiledName + " , ") + pArr.compiledName) + " = ", false);
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(value, ctx, wr)];
                    case 2:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out(";", true);
                        left = arr_node;
                        a_len = (left.ns.length) - 1;
                        next_is_gs = false;
                        last_was_setter = false;
                        needs_par = false;
                        b_was_static = false;
                        i = 0;
                        _a.label = 3;
                    case 3:
                        if (!(i < left.ns.length)) return [3 /*break*/, 6];
                        part = left.ns[i];
                        if (next_is_gs) {
                            if (i == a_len) {
                                wr.out(".Set_", false);
                                last_was_setter = true;
                            }
                            else {
                                wr.out(".Get_", false);
                                needs_par = true;
                                next_is_gs = false;
                                last_was_setter = false;
                            }
                        }
                        if ((last_was_setter == false) && (needs_par == false)) {
                            if (i > 0) {
                                if ((i == 1) && b_was_static) {
                                    wr.out("_static_", false);
                                }
                                else {
                                    wr.out(".", false);
                                }
                            }
                        }
                        if (i == 0) {
                            if (part == "this") {
                                wr.out(this.thisName, false);
                                return [3 /*break*/, 5];
                            }
                            if (ctx.hasClass(part)) {
                                b_was_static = true;
                            }
                            partDef = ctx.getVariableDef(part);
                            if ((typeof (partDef.nameNode) !== "undefined" && partDef.nameNode != null)) {
                                if (ctx.isDefinedClass(partDef.nameNode.type_name)) {
                                    c = ctx.findClass(partDef.nameNode.type_name);
                                    if (c.doesInherit()) {
                                        next_is_gs = true;
                                    }
                                }
                            }
                            cc = ctx.getCurrentClass();
                            if (((part != "this") && ((typeof (cc) !== "undefined" && cc != null))) && (false == ctx.isInStatic())) {
                                currC = cc;
                                up = currC.findVariable(part);
                                lvDef = ctx.getVariableDef(part);
                                if (((typeof (up) !== "undefined" && up != null)) && lvDef.is_class_variable) {
                                    /** unused:  const p3 : RangerAppParamDesc  = up   **/
                                    wr.out(this.thisName + ".", false);
                                }
                            }
                        }
                        if ((left.nsp.length) > 0) {
                            p_1 = left.nsp[i];
                            wr.out(this.adjustType(p_1.compiledName), false);
                        }
                        else {
                            if (left.hasParamDesc) {
                                wr.out(left.paramDesc.compiledName, false);
                            }
                            else {
                                wr.out(this.adjustType(part), false);
                            }
                        }
                        if (needs_par) {
                            wr.out("()", false);
                            needs_par = false;
                        }
                        if (!((left.nsp.length) >= (i + 1))) return [3 /*break*/, 5];
                        pp = left.nsp[i];
                        if (!pp.nameNode.hasFlag("optional")) return [3 /*break*/, 5];
                        wr.out(".value.(", false);
                        return [4 /*yield*/, this.writeTypeDef(pp.nameNode, ctx, wr)];
                    case 4:
                        _a.sent();
                        wr.out(")", false);
                        _a.label = 5;
                    case 5:
                        i++;
                        return [3 /*break*/, 3];
                    case 6:
                        ;
                        if (last_was_setter) {
                            wr.out("(", false);
                            wr.out(pArr.compiledName, false);
                            wr.out("); ", true);
                        }
                        else {
                            wr.out(" = ", false);
                            wr.out(pArr.compiledName, false);
                            wr.out("; ", true);
                        }
                        wr.out("", true);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGolangClassWriter.prototype.writeStructField = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var nn, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasParamDesc) return [3 /*break*/, 4];
                        nn = node.children[1];
                        p = nn.paramDesc;
                        wr.out(p.compiledName + " ", false);
                        if (!p.nameNode.hasFlag("optional")) return [3 /*break*/, 1];
                        wr.out("*GoNullable", false);
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        if (p.ref_cnt == 0) {
                            wr.out(" /**  unused  **/ ", false);
                        }
                        wr.out((" `json:\"" + p.name) + "\"` ", false);
                        wr.out("", true);
                        if (p.nameNode.hasFlag("optional")) {
                        }
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGolangClassWriter.prototype.writeVarDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var nn, p, b_not_used, b_can_skip_1, value, map_or_hash, value_1, pnn, value_2, value_3, value_4, value_5, ti_ok, value_6, fc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasParamDesc) return [3 /*break*/, 23];
                        nn = node.children[1];
                        p = nn.paramDesc;
                        b_not_used = false;
                        if (!((p.ref_cnt == 0) && (p.is_class_variable == false))) return [3 /*break*/, 4];
                        b_can_skip_1 = true;
                        if (!((node.children.length) > 2)) return [3 /*break*/, 3];
                        value = node.getThird();
                        if (value.has_call || value.has_lambda_call) {
                            b_can_skip_1 = false;
                        }
                        return [4 /*yield*/, value.forTree((function (item, i) {
                                if (item.has_call || item.has_lambda_call) {
                                    b_can_skip_1 = false;
                                }
                            }))];
                    case 1:
                        _a.sent();
                        if (!(b_can_skip_1 == false)) return [3 /*break*/, 3];
                        wr.out(" _ = ", false);
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(value, ctx, wr)];
                    case 2:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out("", true);
                        return [2 /*return*/];
                    case 3:
                        if (b_can_skip_1) {
                            wr.out(("/** unused:  " + p.compiledName) + "*/", true);
                            b_not_used = true;
                            return [2 /*return*/];
                        }
                        _a.label = 4;
                    case 4:
                        map_or_hash = (nn.value_type == 6) || (nn.value_type == 7);
                        if (!nn.hasFlag("optional")) return [3 /*break*/, 13];
                        wr.out(("var " + p.compiledName) + " *GoNullable = new(GoNullable); ", true);
                        if (!((node.children.length) > 2)) return [3 /*break*/, 12];
                        value_1 = node.children[2];
                        if (!value_1.hasParamDesc) return [3 /*break*/, 10];
                        pnn = value_1.paramDesc.nameNode;
                        if (!pnn.hasFlag("optional")) return [3 /*break*/, 7];
                        wr.out(p.compiledName + ".value = ", false);
                        ctx.setInExpr();
                        value_2 = node.getThird();
                        return [4 /*yield*/, this.WalkNode(value_2, ctx, wr)];
                    case 5:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out(".value;", true);
                        wr.out(p.compiledName + ".has_value = ", false);
                        ctx.setInExpr();
                        value_3 = node.getThird();
                        return [4 /*yield*/, this.WalkNode(value_3, ctx, wr)];
                    case 6:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out(".has_value;", true);
                        return [2 /*return*/];
                    case 7:
                        wr.out(p.compiledName + ".value = ", false);
                        ctx.setInExpr();
                        value_4 = node.getThird();
                        return [4 /*yield*/, this.WalkNode(value_4, ctx, wr)];
                    case 8:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out(";", true);
                        wr.out(p.compiledName + ".has_value = true;", true);
                        return [2 /*return*/];
                    case 9: return [3 /*break*/, 12];
                    case 10:
                        wr.out(p.compiledName + " = ", false);
                        ctx.setInExpr();
                        value_5 = node.getThird();
                        return [4 /*yield*/, this.WalkNode(value_5, ctx, wr)];
                    case 11:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out(";", true);
                        return [2 /*return*/];
                    case 12: return [2 /*return*/];
                    case 13:
                        if (((p.set_cnt > 0) || p.is_class_variable) || map_or_hash) {
                            wr.out(("var " + p.compiledName) + " ", false);
                        }
                        else {
                            wr.out(("var " + p.compiledName) + " ", false);
                        }
                        _a.label = 14;
                    case 14:
                        ti_ok = ctx.canUseTypeInference((p.nameNode));
                        if ((false == ti_ok) || ((false == p.nameNode.hasFlag("optional")) && ((node.children.length) == 2))) {
                            this.writeTypeDef2(p.nameNode, ctx, wr);
                        }
                        if (!((node.children.length) > 2)) return [3 /*break*/, 18];
                        value_6 = node.getThird();
                        if (!(value_6.expression && ((value_6.children.length) > 1))) return [3 /*break*/, 16];
                        fc = value_6.children[0];
                        if (!(fc.vref == "array_extract")) return [3 /*break*/, 16];
                        return [4 /*yield*/, this.goExtractAssign(value_6, p, ctx, wr)];
                    case 15:
                        _a.sent();
                        return [2 /*return*/];
                    case 16:
                        wr.out("= ", false);
                        ctx.setInExpr();
                        if (p.nameNode.eval_type_name == "char") {
                            wr.out("byte(", false);
                        }
                        return [4 /*yield*/, this.WalkNode(value_6, ctx, wr)];
                    case 17:
                        _a.sent();
                        if (p.nameNode.eval_type_name == "char") {
                            wr.out(")", false);
                        }
                        ctx.unsetInExpr();
                        return [3 /*break*/, 22];
                    case 18:
                        if (!(nn.value_type == 6)) return [3 /*break*/, 20];
                        wr.out(" = make(", false);
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 19:
                        _a.sent();
                        wr.out(", 0)", false);
                        _a.label = 20;
                    case 20:
                        if (!(nn.value_type == 7)) return [3 /*break*/, 22];
                        wr.out(" = make(", false);
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 21:
                        _a.sent();
                        wr.out(")", false);
                        _a.label = 22;
                    case 22:
                        wr.out(";", false);
                        if ((p.ref_cnt == 0) && (p.is_class_variable == true)) {
                            wr.out("     /** note: unused */", false);
                        }
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                        }
                        else {
                            wr.newline();
                        }
                        if (b_not_used == false) {
                            if (nn.hasFlag("optional")) {
                                wr.addImport("errors");
                            }
                        }
                        _a.label = 23;
                    case 23: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGolangClassWriter.prototype.writeArgsDef = function (fnDesc, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var i, arg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < fnDesc.params.length)) return [3 /*break*/, 5];
                        arg = fnDesc.params[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        wr.out(arg.compiledName + " ", false);
                        if (!arg.nameNode.hasFlag("optional")) return [3 /*break*/, 2];
                        wr.out("*GoNullable", false);
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.writeTypeDef(arg.nameNode, ctx, wr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 1];
                    case 5:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGolangClassWriter.prototype.writeNewCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cl, constr, givenArgs, i, arg, n;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasNewOper) return [3 /*break*/, 6];
                        cl = node.clDesc;
                        /** unused:  const fc : CodeNode  = node.getSecond()   **/
                        wr.out(("CreateNew_" + node.clDesc.name) + "(", false);
                        constr = cl.constructor_fn;
                        givenArgs = node.getThird();
                        if (!(typeof (constr) !== "undefined" && constr != null)) return [3 /*break*/, 5];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < constr.params.length)) return [3 /*break*/, 4];
                        arg = constr.params[i];
                        n = givenArgs.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        if (!(true || ((typeof (arg.nameNode) !== "undefined" && arg.nameNode != null)))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.WalkNode(n, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        _a.label = 5;
                    case 5:
                        wr.out(")", false);
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGolangClassWriter.prototype.writeArrayLiteral = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.writeTypeDef(node, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out(" {", false);
                        return [4 /*yield*/, operatorsOf.forEach_15(node.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (index > 0) {
                                                wr.out(", ", false);
                                            }
                                            return [4 /*yield*/, this.WalkNode(item, ctx, wr)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 2:
                        _a.sent();
                        wr.out("}", false);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGolangClassWriter.prototype.CreateLambdaCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fName, givenArgs, args, param, subCtx, i, arg, n;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fName = node.children[0];
                        givenArgs = node.children[1];
                        if ((typeof (fName.expression_value) !== "undefined" && fName.expression_value != null)) {
                            args = fName.expression_value.children[1];
                        }
                        else {
                            param = ctx.getVariableDef(fName.vref);
                            args = param.nameNode.expression_value.children[1];
                        }
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(fName, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out("(", false);
                        subCtx = ctx.fork();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < args.children.length)) return [3 /*break*/, 7];
                        arg = args.children[i];
                        n = givenArgs.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        if (!(arg.value_type != 0)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.WalkNode(n, subCtx, wr)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, this.WalkNode(n, subCtx, wr)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        i++;
                        return [3 /*break*/, 2];
                    case 7:
                        ;
                        ctx.unsetInExpr();
                        wr.out(")", false);
                        if (ctx.expressionLevel() == 0) {
                            wr.out(";", true);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGolangClassWriter.prototype.CreateLambda = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var lambdaCtx, fnNode, args, body, i, arg, i_1, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        lambdaCtx = node.lambda_ctx;
                        fnNode = node.children[0];
                        args = node.children[1];
                        body = node.children[2];
                        wr.out("func (", false);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < args.children.length)) return [3 /*break*/, 5];
                        arg = args.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        wr.out(arg.vref, false);
                        wr.out(" ", false);
                        if (!arg.hasFlag("optional")) return [3 /*break*/, 2];
                        wr.out("*GoNullable", false);
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.writeTypeDef(arg, lambdaCtx, wr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 1];
                    case 5:
                        ;
                        wr.out(") ", false);
                        if (!fnNode.hasFlag("optional")) return [3 /*break*/, 6];
                        wr.out("*GoNullable", false);
                        return [3 /*break*/, 8];
                    case 6: return [4 /*yield*/, this.writeTypeDef(fnNode, lambdaCtx, wr)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        wr.out(" {", true);
                        wr.indent(1);
                        lambdaCtx.restartExpressionLevel();
                        i_1 = 0;
                        _a.label = 9;
                    case 9:
                        if (!(i_1 < body.children.length)) return [3 /*break*/, 12];
                        item = body.children[i_1];
                        return [4 /*yield*/, this.WalkNode(item, lambdaCtx, wr)];
                    case 10:
                        _a.sent();
                        _a.label = 11;
                    case 11:
                        i_1++;
                        return [3 /*break*/, 9];
                    case 12:
                        ;
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", false);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGolangClassWriter.prototype.CustomOperator = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fc, cmd, rValue, tryBlock, catchBlock, currFn, ex2, ex3, subCtx, subCtx_1, left, right, b_was_static, a_len, next_is_gs, last_was_setter, needs_par, i, part, cc, currC, up, lvDef, partDef, c, p, pp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fc = node.getFirst();
                        cmd = fc.vref;
                        if (!(cmd == "return")) return [3 /*break*/, 7];
                        if (!((node.children.length) > 1)) return [3 /*break*/, 5];
                        rValue = node.getSecond();
                        if (!(ctx.isCatchBlock() || ctx.isTryBlock())) return [3 /*break*/, 2];
                        wr.out("__ex_returned = true", true);
                        wr.out("__exReturn = ", false);
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(rValue, ctx, wr)];
                    case 1:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.newline();
                        if (ctx.isTryBlock()) {
                            wr.out("return __ex_returned, __exReturn", true);
                        }
                        return [3 /*break*/, 4];
                    case 2:
                        wr.out("return ", false);
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(rValue, ctx, wr)];
                    case 3:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.newline();
                        _a.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        if (ctx.isCatchBlock()) {
                            wr.out("__ex_returned = true", true);
                        }
                        if (ctx.isTryBlock()) {
                            wr.out("return false, nil", true);
                        }
                        wr.out("return", true);
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                    case 7:
                        if (!(cmd == "try")) return [3 /*break*/, 13];
                        tryBlock = node.getSecond();
                        catchBlock = node.getThird();
                        currFn = ctx.getCurrentMethod();
                        ex2 = operatorsOf_21.createc95var_48(ctx, "did_return", "boolean");
                        ex3 = operatorsOf_21.createc95var_49(ctx, "ex_result", (currFn.nameNode));
                        if (currFn.nameNode.type_name == "void") {
                            wr.out(ex2.compiledName + ", _ := (func () ( __ex_returned bool,  __exReturn interface{}) {", true);
                        }
                        else {
                            wr.out(((ex2.compiledName + ", ") + ex3.compiledName) + " := (func () ( __ex_returned bool,  __exReturn interface{}) {", true);
                        }
                        wr.indent(1);
                        wr.out("defer func() {", true);
                        wr.indent(1);
                        wr.out("if r:= recover(); r != nil {", true);
                        wr.indent(1);
                        subCtx = ctx.fork();
                        subCtx.is_catch_block = true;
                        return [4 /*yield*/, this.WalkNode(catchBlock, subCtx, wr)];
                    case 8:
                        _a.sent();
                        wr.indent(-1);
                        wr.out("}", true);
                        wr.indent(-1);
                        wr.out("}()", true);
                        subCtx_1 = ctx.fork();
                        subCtx_1.is_try_block = true;
                        return [4 /*yield*/, this.WalkNode(tryBlock, subCtx_1, wr)];
                    case 9:
                        _a.sent();
                        wr.out("return __ex_returned, __exReturn", true);
                        wr.indent(-1);
                        wr.out("})()", true);
                        if (!(currFn.nameNode.type_name != "void")) return [3 /*break*/, 11];
                        wr.out(("if " + ex2.compiledName) + " {", true);
                        wr.indent(1);
                        wr.out("return " + ex3.compiledName, false);
                        wr.out(".(", false);
                        return [4 /*yield*/, this.writeTypeDef(currFn.nameNode, ctx, wr)];
                    case 10:
                        _a.sent();
                        wr.out(")", true);
                        wr.indent(-1);
                        wr.out("}", true);
                        return [3 /*break*/, 12];
                    case 11:
                        wr.out(("if " + ex2.compiledName) + " {", true);
                        wr.indent(1);
                        wr.out("return ", true);
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 12;
                    case 12: return [2 /*return*/];
                    case 13:
                        if (!(((cmd == "=") || (cmd == "push")) || (cmd == "removeLast"))) return [3 /*break*/, 40];
                        left = node.getSecond();
                        right = left;
                        if ((cmd == "=") || (cmd == "push")) {
                            right = node.getThird();
                        }
                        wr.newline();
                        b_was_static = false;
                        if (!left.hasParamDesc) return [3 /*break*/, 37];
                        a_len = (left.ns.length) - 1;
                        next_is_gs = false;
                        last_was_setter = false;
                        needs_par = false;
                        i = 0;
                        _a.label = 14;
                    case 14:
                        if (!(i < left.ns.length)) return [3 /*break*/, 18];
                        part = left.ns[i];
                        if (next_is_gs) {
                            if (i == a_len) {
                                wr.out(".Set_", false);
                                last_was_setter = true;
                            }
                            else {
                                wr.out(".Get_", false);
                                needs_par = true;
                                next_is_gs = false;
                                last_was_setter = false;
                            }
                        }
                        if ((last_was_setter == false) && (needs_par == false)) {
                            if (i > 0) {
                                if ((i == 1) && b_was_static) {
                                    wr.out("_static_", false);
                                }
                                else {
                                    wr.out(".", false);
                                }
                            }
                        }
                        if (i == 0) {
                            if (part == "this") {
                                wr.out(this.thisName, false);
                                return [3 /*break*/, 17];
                            }
                            if (ctx.hasClass(part)) {
                                b_was_static = true;
                            }
                            cc = ctx.getCurrentClass();
                            if (((part != "this") && ((typeof (cc) !== "undefined" && cc != null))) && (false == ctx.isInStatic())) {
                                currC = cc;
                                up = currC.findVariable(part);
                                lvDef = ctx.getVariableDef(part);
                                if (((typeof (up) !== "undefined" && up != null)) && lvDef.is_class_variable) {
                                    /** unused:  const p3 : RangerAppParamDesc  = up   **/
                                    wr.out(this.thisName + ".", false);
                                }
                            }
                        }
                        partDef = ctx.getVariableDef(part);
                        if ((left.nsp.length) > i) {
                            partDef = left.nsp[i];
                        }
                        if ((typeof (partDef.nameNode) !== "undefined" && partDef.nameNode != null)) {
                            if (ctx.isDefinedClass(partDef.nameNode.type_name)) {
                                c = ctx.findClass(partDef.nameNode.type_name);
                                if (c.doesInherit()) {
                                    next_is_gs = true;
                                }
                            }
                        }
                        if ((left.nsp.length) > 0) {
                            p = left.nsp[i];
                            wr.out(this.adjustType(p.compiledName), false);
                        }
                        else {
                            if (left.hasParamDesc) {
                                wr.out(left.paramDesc.compiledName, false);
                            }
                            else {
                                wr.out(this.adjustType(part), false);
                            }
                        }
                        if (needs_par) {
                            wr.out("()", false);
                            needs_par = false;
                        }
                        if (!((left.nsp.length) >= (i + 1))) return [3 /*break*/, 17];
                        pp = left.nsp[i];
                        if (!pp.nameNode.hasFlag("optional")) return [3 /*break*/, 17];
                        if (!((left.nsp.length) > (i + 1))) return [3 /*break*/, 16];
                        wr.out(".value.(", false);
                        return [4 /*yield*/, this.writeTypeDef(pp.nameNode, ctx, wr)];
                    case 15:
                        _a.sent();
                        wr.out(")", false);
                        return [3 /*break*/, 17];
                    case 16:
                        wr.out(".value", false);
                        if (right.hasFlag("optional") == false) {
                            wr.out(" /* right is not optional, should set the has_value -> true */", false);
                        }
                        _a.label = 17;
                    case 17:
                        i++;
                        return [3 /*break*/, 14];
                    case 18:
                        ;
                        if (!(cmd == "removeLast")) return [3 /*break*/, 25];
                        if (!last_was_setter) return [3 /*break*/, 21];
                        wr.out("(", false);
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(left, ctx, wr)];
                    case 19:
                        _a.sent();
                        wr.out("[:len(", false);
                        return [4 /*yield*/, this.WalkNode(left, ctx, wr)];
                    case 20:
                        _a.sent();
                        wr.out(")-1]", false);
                        ctx.unsetInExpr();
                        wr.out("); ", true);
                        return [3 /*break*/, 24];
                    case 21:
                        wr.out(" = ", false);
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(left, ctx, wr)];
                    case 22:
                        _a.sent();
                        wr.out("[:len(", false);
                        return [4 /*yield*/, this.WalkNode(left, ctx, wr)];
                    case 23:
                        _a.sent();
                        wr.out(")-1]", false);
                        ctx.unsetInExpr();
                        wr.out("; ", true);
                        _a.label = 24;
                    case 24: return [2 /*return*/];
                    case 25:
                        if (!(cmd == "push")) return [3 /*break*/, 32];
                        if (!last_was_setter) return [3 /*break*/, 28];
                        wr.out("(", false);
                        ctx.setInExpr();
                        wr.out("append(", false);
                        return [4 /*yield*/, this.WalkNode(left, ctx, wr)];
                    case 26:
                        _a.sent();
                        wr.out(",", false);
                        return [4 /*yield*/, this.WalkNode(right, ctx, wr)];
                    case 27:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out(")); ", true);
                        return [3 /*break*/, 31];
                    case 28:
                        wr.out(" = ", false);
                        wr.out("append(", false);
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(left, ctx, wr)];
                    case 29:
                        _a.sent();
                        wr.out(",", false);
                        return [4 /*yield*/, this.WalkNode(right, ctx, wr)];
                    case 30:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out("); ", true);
                        _a.label = 31;
                    case 31: return [2 /*return*/];
                    case 32:
                        if (!last_was_setter) return [3 /*break*/, 34];
                        wr.out("(", false);
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(right, ctx, wr)];
                    case 33:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out("); ", true);
                        return [3 /*break*/, 36];
                    case 34:
                        wr.out(" = ", false);
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(right, ctx, wr)];
                    case 35:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out("; ", true);
                        _a.label = 36;
                    case 36: return [2 /*return*/];
                    case 37: return [4 /*yield*/, this.WriteSetterVRef(left, ctx, wr)];
                    case 38:
                        _a.sent();
                        wr.out(" = ", false);
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(right, ctx, wr)];
                    case 39:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out("; /* custom */", true);
                        _a.label = 40;
                    case 40: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGolangClassWriter.prototype.writeInterface = function (cl, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var i, fnVar, mVs, i_1, variant;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        wr.out(("type " + cl.name) + " interface { ", true);
                        wr.indent(1);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < cl.defined_variants.length)) return [3 /*break*/, 10];
                        fnVar = cl.defined_variants[i];
                        mVs = cl.method_variants[fnVar];
                        i_1 = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i_1 < mVs.variants.length)) return [3 /*break*/, 8];
                        variant = mVs.variants[i_1];
                        wr.out(variant.compiledName + "(", false);
                        return [4 /*yield*/, this.writeArgsDef(variant, ctx, wr)];
                    case 3:
                        _a.sent();
                        wr.out(") ", false);
                        if (!variant.nameNode.hasFlag("optional")) return [3 /*break*/, 4];
                        wr.out("*GoNullable", false);
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, this.writeTypeDef(variant.nameNode, ctx, wr)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        wr.out("", true);
                        _a.label = 7;
                    case 7:
                        i_1++;
                        return [3 /*break*/, 2];
                    case 8:
                        ;
                        _a.label = 9;
                    case 9:
                        i++;
                        return [3 /*break*/, 1];
                    case 10:
                        ;
                        wr.indent(-1);
                        wr.out("}", true);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerGolangClassWriter.prototype.writeClass = function (node, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cl, wr, declaredVariable, declaredFunction, declaredIfFunction, i, pvar, i_1, pName, pC, i_2, pvar_1, i_3, p, i_4, fnVar, mVs, i_5, variant, constr, i_6, arg, i_7, pName_1, pC_1, i_8, pvar_2, nn, valueNode, pNameN, i_9, pvar_3, constr_1, subCtx, i_10, pvar_4, nn_1, valueNode_1, pNameN_1, i_11, pvar_5, constr_2, subCtx_1, i_12, variant_1, vnn, subCtx_2, declaredFn, i_13, fnVar_1, mVs_1, i_14, variant_2, subCtx_3, i_15, pName_2, pC_2, i_16, fnVar_2, mVs_2, i_17, variant_3, subCtx_4, declaredGetter, i_18, p_1, i_19, pName_3, pC_3, i_20, p_2, i_21, variant_4, subCtx_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cl = node.clDesc;
                        if (typeof (cl) === "undefined") {
                            return [2 /*return*/];
                        }
                        wr = orig_wr;
                        if (this.did_write_nullable == false) {
                            wr.raw("\r\ntype GoNullable struct { \r\n  value interface{}\r\n  has_value bool\r\n}\r\n", true);
                            wr.createTag("utilities");
                            this.did_write_nullable = true;
                        }
                        declaredVariable = {};
                        declaredFunction = {};
                        declaredIfFunction = {};
                        wr.out(("type " + cl.name) + " struct { ", true);
                        wr.indent(1);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < cl.variables.length)) return [3 /*break*/, 4];
                        pvar = cl.variables[i];
                        return [4 /*yield*/, this.writeStructField(pvar.node, ctx, wr)];
                    case 2:
                        _a.sent();
                        declaredVariable[pvar.name] = true;
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        if (!((cl.extends_classes.length) > 0)) return [3 /*break*/, 12];
                        i_1 = 0;
                        _a.label = 5;
                    case 5:
                        if (!(i_1 < cl.extends_classes.length)) return [3 /*break*/, 11];
                        pName = cl.extends_classes[i_1];
                        pC = ctx.findClass(pName);
                        wr.out("// inherited from parent class " + pName, true);
                        i_2 = 0;
                        _a.label = 6;
                    case 6:
                        if (!(i_2 < pC.variables.length)) return [3 /*break*/, 9];
                        pvar_1 = pC.variables[i_2];
                        if ((typeof (declaredVariable[pvar_1.name]) != "undefined" && declaredVariable.hasOwnProperty(pvar_1.name))) {
                            return [3 /*break*/, 8];
                        }
                        return [4 /*yield*/, this.writeStructField(pvar_1.node, ctx, wr)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        i_2++;
                        return [3 /*break*/, 6];
                    case 9:
                        ;
                        _a.label = 10;
                    case 10:
                        i_1++;
                        return [3 /*break*/, 5];
                    case 11:
                        ;
                        _a.label = 12;
                    case 12:
                        wr.indent(-1);
                        wr.out("}", true);
                        if (!(cl.doesInherit() || ((cl.extends_classes.length) > 0))) return [3 /*break*/, 32];
                        wr.out(("type IFACE_" + cl.name) + " interface { ", true);
                        wr.indent(1);
                        i_3 = 0;
                        _a.label = 13;
                    case 13:
                        if (!(i_3 < cl.variables.length)) return [3 /*break*/, 21];
                        p = cl.variables[i_3];
                        wr.out("Get_", false);
                        wr.out(p.compiledName + "() ", false);
                        if (!p.nameNode.hasFlag("optional")) return [3 /*break*/, 14];
                        wr.out("*GoNullable", false);
                        return [3 /*break*/, 16];
                    case 14: return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 15:
                        _a.sent();
                        _a.label = 16;
                    case 16:
                        wr.out("", true);
                        wr.out("Set_", false);
                        wr.out(p.compiledName + "(value ", false);
                        if (!p.nameNode.hasFlag("optional")) return [3 /*break*/, 17];
                        wr.out("*GoNullable", false);
                        return [3 /*break*/, 19];
                    case 17: return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 18:
                        _a.sent();
                        _a.label = 19;
                    case 19:
                        wr.out(") ", true);
                        _a.label = 20;
                    case 20:
                        i_3++;
                        return [3 /*break*/, 13];
                    case 21:
                        ;
                        i_4 = 0;
                        _a.label = 22;
                    case 22:
                        if (!(i_4 < cl.defined_variants.length)) return [3 /*break*/, 31];
                        fnVar = cl.defined_variants[i_4];
                        mVs = cl.method_variants[fnVar];
                        i_5 = 0;
                        _a.label = 23;
                    case 23:
                        if (!(i_5 < mVs.variants.length)) return [3 /*break*/, 29];
                        variant = mVs.variants[i_5];
                        if ((typeof (declaredIfFunction[variant.name]) != "undefined" && declaredIfFunction.hasOwnProperty(variant.name))) {
                            return [3 /*break*/, 28];
                        }
                        declaredIfFunction[variant.name] = true;
                        wr.out(variant.compiledName + "(", false);
                        return [4 /*yield*/, this.writeArgsDef(variant, ctx, wr)];
                    case 24:
                        _a.sent();
                        wr.out(") ", false);
                        if (!variant.nameNode.hasFlag("optional")) return [3 /*break*/, 25];
                        wr.out("*GoNullable", false);
                        return [3 /*break*/, 27];
                    case 25: return [4 /*yield*/, this.writeTypeDef(variant.nameNode, ctx, wr)];
                    case 26:
                        _a.sent();
                        _a.label = 27;
                    case 27:
                        wr.out("", true);
                        _a.label = 28;
                    case 28:
                        i_5++;
                        return [3 /*break*/, 23];
                    case 29:
                        ;
                        _a.label = 30;
                    case 30:
                        i_4++;
                        return [3 /*break*/, 22];
                    case 31:
                        ;
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 32;
                    case 32:
                        this.thisName = "me";
                        wr.out("", true);
                        wr.out(("func CreateNew_" + cl.name) + "(", false);
                        if (!cl.has_constructor) return [3 /*break*/, 37];
                        constr = cl.constructor_fn;
                        i_6 = 0;
                        _a.label = 33;
                    case 33:
                        if (!(i_6 < constr.params.length)) return [3 /*break*/, 36];
                        arg = constr.params[i_6];
                        if (i_6 > 0) {
                            wr.out(", ", false);
                        }
                        wr.out(arg.name + " ", false);
                        return [4 /*yield*/, this.writeTypeDef(arg.nameNode, ctx, wr)];
                    case 34:
                        _a.sent();
                        _a.label = 35;
                    case 35:
                        i_6++;
                        return [3 /*break*/, 33];
                    case 36:
                        ;
                        _a.label = 37;
                    case 37:
                        wr.out((") *" + cl.name) + " {", true);
                        wr.indent(1);
                        wr.newline();
                        wr.out(("me := new(" + cl.name) + ")", true);
                        if (!((cl.extends_classes.length) > 0)) return [3 /*break*/, 50];
                        i_7 = 0;
                        _a.label = 38;
                    case 38:
                        if (!(i_7 < cl.extends_classes.length)) return [3 /*break*/, 49];
                        pName_1 = cl.extends_classes[i_7];
                        pC_1 = ctx.findClass(pName_1);
                        i_8 = 0;
                        _a.label = 39;
                    case 39:
                        if (!(i_8 < pC_1.variables.length)) return [3 /*break*/, 46];
                        pvar_2 = pC_1.variables[i_8];
                        nn = pvar_2.node;
                        if (!((nn.children.length) > 2)) return [3 /*break*/, 41];
                        valueNode = nn.children[2];
                        wr.out(("me." + pvar_2.compiledName) + " = ", false);
                        return [4 /*yield*/, this.WalkNode(valueNode, ctx, wr)];
                    case 40:
                        _a.sent();
                        wr.out("", true);
                        return [3 /*break*/, 45];
                    case 41:
                        pNameN = pvar_2.nameNode;
                        if (!(pNameN.value_type == 6)) return [3 /*break*/, 43];
                        wr.out(("me." + pvar_2.compiledName) + " = ", false);
                        wr.out("make(", false);
                        return [4 /*yield*/, this.writeTypeDef(pvar_2.nameNode, ctx, wr)];
                    case 42:
                        _a.sent();
                        wr.out(",0)", true);
                        _a.label = 43;
                    case 43:
                        if (!(pNameN.value_type == 7)) return [3 /*break*/, 45];
                        wr.out(("me." + pvar_2.compiledName) + " = ", false);
                        wr.out("make(", false);
                        return [4 /*yield*/, this.writeTypeDef(pvar_2.nameNode, ctx, wr)];
                    case 44:
                        _a.sent();
                        wr.out(")", true);
                        _a.label = 45;
                    case 45:
                        i_8++;
                        return [3 /*break*/, 39];
                    case 46:
                        ;
                        for (i_9 = 0; i_9 < pC_1.variables.length; i_9++) {
                            pvar_3 = pC_1.variables[i_9];
                            if (pvar_3.nameNode.hasFlag("optional")) {
                                wr.out(("me." + pvar_3.compiledName) + " = new(GoNullable);", true);
                            }
                        }
                        ;
                        if (!pC_1.has_constructor) return [3 /*break*/, 48];
                        constr_1 = pC_1.constructor_fn;
                        subCtx = constr_1.fnCtx;
                        subCtx.is_function = true;
                        return [4 /*yield*/, this.WalkNode(constr_1.fnBody, subCtx, wr)];
                    case 47:
                        _a.sent();
                        _a.label = 48;
                    case 48:
                        i_7++;
                        return [3 /*break*/, 38];
                    case 49:
                        ;
                        _a.label = 50;
                    case 50:
                        i_10 = 0;
                        _a.label = 51;
                    case 51:
                        if (!(i_10 < cl.variables.length)) return [3 /*break*/, 58];
                        pvar_4 = cl.variables[i_10];
                        nn_1 = pvar_4.node;
                        if (!((nn_1.children.length) > 2)) return [3 /*break*/, 53];
                        valueNode_1 = nn_1.children[2];
                        wr.out(("me." + pvar_4.compiledName) + " = ", false);
                        return [4 /*yield*/, this.WalkNode(valueNode_1, ctx, wr)];
                    case 52:
                        _a.sent();
                        wr.out("", true);
                        return [3 /*break*/, 57];
                    case 53:
                        pNameN_1 = pvar_4.nameNode;
                        if (!(pNameN_1.value_type == 6)) return [3 /*break*/, 55];
                        wr.out(("me." + pvar_4.compiledName) + " = ", false);
                        wr.out("make(", false);
                        return [4 /*yield*/, this.writeTypeDef(pvar_4.nameNode, ctx, wr)];
                    case 54:
                        _a.sent();
                        wr.out(",0)", true);
                        _a.label = 55;
                    case 55:
                        if (!(pNameN_1.value_type == 7)) return [3 /*break*/, 57];
                        wr.out(("me." + pvar_4.compiledName) + " = ", false);
                        wr.out("make(", false);
                        return [4 /*yield*/, this.writeTypeDef(pvar_4.nameNode, ctx, wr)];
                    case 56:
                        _a.sent();
                        wr.out(")", true);
                        _a.label = 57;
                    case 57:
                        i_10++;
                        return [3 /*break*/, 51];
                    case 58:
                        ;
                        for (i_11 = 0; i_11 < cl.variables.length; i_11++) {
                            pvar_5 = cl.variables[i_11];
                            if (pvar_5.nameNode.hasFlag("optional")) {
                                wr.out(("me." + pvar_5.compiledName) + " = new(GoNullable);", true);
                            }
                        }
                        ;
                        if (!cl.has_constructor) return [3 /*break*/, 60];
                        constr_2 = cl.constructor_fn;
                        subCtx_1 = constr_2.fnCtx;
                        subCtx_1.is_function = true;
                        return [4 /*yield*/, this.WalkNode(constr_2.fnBody, subCtx_1, wr)];
                    case 59:
                        _a.sent();
                        _a.label = 60;
                    case 60:
                        wr.out("return me;", true);
                        wr.indent(-1);
                        wr.out("}", true);
                        this.thisName = "this";
                        i_12 = 0;
                        _a.label = 61;
                    case 61:
                        if (!(i_12 < cl.static_methods.length)) return [3 /*break*/, 68];
                        variant_1 = cl.static_methods[i_12];
                        if (variant_1.nameNode.hasFlag("main")) {
                            return [3 /*break*/, 67];
                        }
                        wr.newline();
                        wr.out(((("func " + cl.name) + "_static_") + variant_1.compiledName) + "(", false);
                        return [4 /*yield*/, this.writeArgsDef(variant_1, ctx, wr)];
                    case 62:
                        _a.sent();
                        wr.out(") ", false);
                        vnn = variant_1.nameNode;
                        if (!vnn.hasFlag("optional")) return [3 /*break*/, 63];
                        wr.out("*GoNullable", false);
                        return [3 /*break*/, 65];
                    case 63: return [4 /*yield*/, this.writeTypeDef(vnn, ctx, wr)];
                    case 64:
                        _a.sent();
                        _a.label = 65;
                    case 65:
                        wr.out(" {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx_2 = variant_1.fnCtx;
                        subCtx_2.is_function = true;
                        subCtx_2.in_static_method = true;
                        return [4 /*yield*/, this.WalkNode(variant_1.fnBody, subCtx_2, wr)];
                    case 66:
                        _a.sent();
                        subCtx_2.in_static_method = false;
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 67;
                    case 67:
                        i_12++;
                        return [3 /*break*/, 61];
                    case 68:
                        ;
                        declaredFn = {};
                        i_13 = 0;
                        _a.label = 69;
                    case 69:
                        if (!(i_13 < cl.defined_variants.length)) return [3 /*break*/, 79];
                        fnVar_1 = cl.defined_variants[i_13];
                        mVs_1 = cl.method_variants[fnVar_1];
                        i_14 = 0;
                        _a.label = 70;
                    case 70:
                        if (!(i_14 < mVs_1.variants.length)) return [3 /*break*/, 77];
                        variant_2 = mVs_1.variants[i_14];
                        if ((typeof (declaredFunction[variant_2.name]) != "undefined" && declaredFunction.hasOwnProperty(variant_2.name))) {
                            return [3 /*break*/, 76];
                        }
                        declaredFunction[variant_2.name] = true;
                        declaredFn[variant_2.name] = true;
                        wr.out(((("func (this *" + cl.name) + ") ") + variant_2.compiledName) + " (", false);
                        return [4 /*yield*/, this.writeArgsDef(variant_2, ctx, wr)];
                    case 71:
                        _a.sent();
                        wr.out(") ", false);
                        if (!variant_2.nameNode.hasFlag("optional")) return [3 /*break*/, 72];
                        wr.out("*GoNullable", false);
                        return [3 /*break*/, 74];
                    case 72: return [4 /*yield*/, this.writeTypeDef(variant_2.nameNode, ctx, wr)];
                    case 73:
                        _a.sent();
                        _a.label = 74;
                    case 74:
                        wr.out(" {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx_3 = variant_2.fnCtx;
                        subCtx_3.is_function = true;
                        return [4 /*yield*/, this.WalkNode(variant_2.fnBody, subCtx_3, wr)];
                    case 75:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 76;
                    case 76:
                        i_14++;
                        return [3 /*break*/, 70];
                    case 77:
                        ;
                        _a.label = 78;
                    case 78:
                        i_13++;
                        return [3 /*break*/, 69];
                    case 79:
                        ;
                        if (!((cl.extends_classes.length) > 0)) return [3 /*break*/, 94];
                        i_15 = 0;
                        _a.label = 80;
                    case 80:
                        if (!(i_15 < cl.extends_classes.length)) return [3 /*break*/, 93];
                        pName_2 = cl.extends_classes[i_15];
                        pC_2 = ctx.findClass(pName_2);
                        wr.out("// inherited methods from parent class " + pName_2, true);
                        i_16 = 0;
                        _a.label = 81;
                    case 81:
                        if (!(i_16 < pC_2.defined_variants.length)) return [3 /*break*/, 91];
                        fnVar_2 = pC_2.defined_variants[i_16];
                        mVs_2 = pC_2.method_variants[fnVar_2];
                        i_17 = 0;
                        _a.label = 82;
                    case 82:
                        if (!(i_17 < mVs_2.variants.length)) return [3 /*break*/, 89];
                        variant_3 = mVs_2.variants[i_17];
                        if ((typeof (declaredFn[variant_3.name]) != "undefined" && declaredFn.hasOwnProperty(variant_3.name))) {
                            return [3 /*break*/, 88];
                        }
                        wr.out(((("func (this *" + cl.name) + ") ") + variant_3.compiledName) + " (", false);
                        return [4 /*yield*/, this.writeArgsDef(variant_3, ctx, wr)];
                    case 83:
                        _a.sent();
                        wr.out(") ", false);
                        if (!variant_3.nameNode.hasFlag("optional")) return [3 /*break*/, 84];
                        wr.out("*GoNullable", false);
                        return [3 /*break*/, 86];
                    case 84: return [4 /*yield*/, this.writeTypeDef(variant_3.nameNode, ctx, wr)];
                    case 85:
                        _a.sent();
                        _a.label = 86;
                    case 86:
                        wr.out(" {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx_4 = variant_3.fnCtx;
                        subCtx_4.is_function = true;
                        return [4 /*yield*/, this.WalkNode(variant_3.fnBody, subCtx_4, wr)];
                    case 87:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 88;
                    case 88:
                        i_17++;
                        return [3 /*break*/, 82];
                    case 89:
                        ;
                        _a.label = 90;
                    case 90:
                        i_16++;
                        return [3 /*break*/, 81];
                    case 91:
                        ;
                        _a.label = 92;
                    case 92:
                        i_15++;
                        return [3 /*break*/, 80];
                    case 93:
                        ;
                        _a.label = 94;
                    case 94:
                        declaredGetter = {};
                        if (!(cl.doesInherit() || ((cl.extends_classes.length) > 0))) return [3 /*break*/, 116];
                        i_18 = 0;
                        _a.label = 95;
                    case 95:
                        if (!(i_18 < cl.variables.length)) return [3 /*break*/, 103];
                        p_1 = cl.variables[i_18];
                        declaredGetter[p_1.name] = true;
                        wr.newline();
                        wr.out("// getter for variable " + p_1.name, true);
                        wr.out(("func (this *" + cl.name) + ") ", false);
                        wr.out("Get_", false);
                        wr.out(p_1.compiledName + "() ", false);
                        if (!p_1.nameNode.hasFlag("optional")) return [3 /*break*/, 96];
                        wr.out("*GoNullable", false);
                        return [3 /*break*/, 98];
                    case 96: return [4 /*yield*/, this.writeTypeDef(p_1.nameNode, ctx, wr)];
                    case 97:
                        _a.sent();
                        _a.label = 98;
                    case 98:
                        wr.out(" {", true);
                        wr.indent(1);
                        wr.out("return this." + p_1.compiledName, true);
                        wr.indent(-1);
                        wr.out("}", true);
                        wr.newline();
                        wr.out("// setter for variable " + p_1.name, true);
                        wr.out(("func (this *" + cl.name) + ") ", false);
                        wr.out("Set_", false);
                        wr.out(p_1.compiledName + "( value ", false);
                        if (!p_1.nameNode.hasFlag("optional")) return [3 /*break*/, 99];
                        wr.out("*GoNullable", false);
                        return [3 /*break*/, 101];
                    case 99: return [4 /*yield*/, this.writeTypeDef(p_1.nameNode, ctx, wr)];
                    case 100:
                        _a.sent();
                        _a.label = 101;
                    case 101:
                        wr.out(") ", false);
                        wr.out(" {", true);
                        wr.indent(1);
                        wr.out(("this." + p_1.compiledName) + " = value ", true);
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 102;
                    case 102:
                        i_18++;
                        return [3 /*break*/, 95];
                    case 103:
                        ;
                        if (!((cl.extends_classes.length) > 0)) return [3 /*break*/, 116];
                        i_19 = 0;
                        _a.label = 104;
                    case 104:
                        if (!(i_19 < cl.extends_classes.length)) return [3 /*break*/, 115];
                        pName_3 = cl.extends_classes[i_19];
                        pC_3 = ctx.findClass(pName_3);
                        wr.out("// inherited getters and setters from the parent class " + pName_3, true);
                        i_20 = 0;
                        _a.label = 105;
                    case 105:
                        if (!(i_20 < pC_3.variables.length)) return [3 /*break*/, 113];
                        p_2 = pC_3.variables[i_20];
                        if ((typeof (declaredGetter[p_2.name]) != "undefined" && declaredGetter.hasOwnProperty(p_2.name))) {
                            return [3 /*break*/, 112];
                        }
                        wr.newline();
                        wr.out("// getter for variable " + p_2.name, true);
                        wr.out(("func (this *" + cl.name) + ") ", false);
                        wr.out("Get_", false);
                        wr.out(p_2.compiledName + "() ", false);
                        if (!p_2.nameNode.hasFlag("optional")) return [3 /*break*/, 106];
                        wr.out("*GoNullable", false);
                        return [3 /*break*/, 108];
                    case 106: return [4 /*yield*/, this.writeTypeDef(p_2.nameNode, ctx, wr)];
                    case 107:
                        _a.sent();
                        _a.label = 108;
                    case 108:
                        wr.out(" {", true);
                        wr.indent(1);
                        wr.out("return this." + p_2.compiledName, true);
                        wr.indent(-1);
                        wr.out("}", true);
                        wr.newline();
                        wr.out("// getter for variable " + p_2.name, true);
                        wr.out(("func (this *" + cl.name) + ") ", false);
                        wr.out("Set_", false);
                        wr.out(p_2.compiledName + "( value ", false);
                        if (!p_2.nameNode.hasFlag("optional")) return [3 /*break*/, 109];
                        wr.out("*GoNullable", false);
                        return [3 /*break*/, 111];
                    case 109: return [4 /*yield*/, this.writeTypeDef(p_2.nameNode, ctx, wr)];
                    case 110:
                        _a.sent();
                        _a.label = 111;
                    case 111:
                        wr.out(") ", false);
                        wr.out(" {", true);
                        wr.indent(1);
                        wr.out(("this." + p_2.compiledName) + " = value ", true);
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 112;
                    case 112:
                        i_20++;
                        return [3 /*break*/, 105];
                    case 113:
                        ;
                        _a.label = 114;
                    case 114:
                        i_19++;
                        return [3 /*break*/, 104];
                    case 115:
                        ;
                        _a.label = 116;
                    case 116:
                        i_21 = 0;
                        _a.label = 117;
                    case 117:
                        if (!(i_21 < cl.static_methods.length)) return [3 /*break*/, 120];
                        variant_4 = cl.static_methods[i_21];
                        if (!(variant_4.nameNode.hasFlag("main") && (variant_4.nameNode.code.filename == ctx.getRootFile()))) return [3 /*break*/, 119];
                        wr.out("func main() {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx_5 = variant_4.fnCtx;
                        subCtx_5.is_function = true;
                        subCtx_5.in_static_method = true;
                        return [4 /*yield*/, this.WalkNode(variant_4.fnBody, subCtx_5, wr)];
                    case 118:
                        _a.sent();
                        subCtx_5.in_static_method = false;
                        if (ctx.hasCompilerFlag("forever")) {
                            wr.out("for {}", true);
                        }
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 119;
                    case 119:
                        i_21++;
                        return [3 /*break*/, 117];
                    case 120:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    return RangerGolangClassWriter;
}(RangerGenericClassWriter));
exports.RangerGolangClassWriter = RangerGolangClassWriter;
var RangerPHPClassWriter = /** @class */ (function (_super) {
    __extends(RangerPHPClassWriter, _super);
    function RangerPHPClassWriter() {
        var _this = _super.call(this) || this;
        _this.thisName = "this";
        _this.wrote_header = false;
        return _this;
    }
    RangerPHPClassWriter.prototype.adjustType = function (tn) {
        if (tn == "this") {
            return "this";
        }
        return tn;
    };
    ;
    RangerPHPClassWriter.prototype.EncodeString = function (node, ctx, wr) {
        /** unused:  const encoded_str : string  = ""   **/
        var str_length = node.string_value.length;
        var encoded_str_2 = "";
        var ii = 0;
        while (ii < str_length) {
            var cc = node.string_value.charCodeAt(ii);
            switch (cc) {
                case 8:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(98));
                    break;
                case 9:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(116));
                    break;
                case 10:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(110));
                    break;
                case 12:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(102));
                    break;
                case 13:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(114));
                    break;
                case 34:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(34));
                    break;
                case 36:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(34));
                    break;
                case 92:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(92));
                    break;
                default:
                    encoded_str_2 = encoded_str_2 + (String.fromCharCode(cc));
                    break;
            }
            ;
            ii = ii + 1;
        }
        ;
        return encoded_str_2;
    };
    ;
    RangerPHPClassWriter.prototype.WriteScalarValue = function (node, ctx, wr) {
        switch (node.value_type) {
            case 2:
                wr.out("" + node.double_value, false);
                break;
            case 4:
                var s = this.EncodeString(node, ctx, wr);
                wr.out(("\"" + s) + "\"", false);
                break;
            case 3:
                wr.out("" + node.int_value, false);
                break;
            case 5:
                if (node.boolean_value) {
                    wr.out("true", false);
                }
                else {
                    wr.out("false", false);
                }
                break;
        }
        ;
    };
    ;
    RangerPHPClassWriter.prototype.WriteVRef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var rootObjName, enumName, e, i, p, part, part_1, uc, currC, up, part_2, uc_1, currC_1, up_1, p_1, b_was_static, i_1, part_3, uc_2, currC_2, up_2;
            return __generator(this, function (_a) {
                if (node.vref == "this") {
                    wr.out("$this", false);
                    return [2 /*return*/];
                }
                if (node.eval_type == 13) {
                    if ((node.ns.length) > 1) {
                        rootObjName = node.ns[0];
                        enumName = node.ns[1];
                        e = ctx.getEnum(rootObjName);
                        if ((typeof (e) !== "undefined" && e != null)) {
                            wr.out("" + ((e.values[enumName])), false);
                            return [2 /*return*/];
                        }
                    }
                }
                if ((node.nsp.length) > 0) {
                    for (i = 0; i < node.nsp.length; i++) {
                        p = node.nsp[i];
                        if (i == 0) {
                            part = node.ns[0];
                            if (part == "this") {
                                wr.out("$this", false);
                                continue;
                            }
                        }
                        if (i > 0) {
                            wr.out("->", false);
                        }
                        if (i == 0) {
                            wr.out("$", false);
                            if (p.nameNode.hasFlag("optional")) {
                            }
                            part_1 = node.ns[0];
                            if ((part_1 != "this") && ctx.isMemberVariable(part_1)) {
                                uc = ctx.getCurrentClass();
                                currC = uc;
                                up = currC.findVariable(part_1);
                                if ((typeof (up) !== "undefined" && up != null)) {
                                    if (false == ctx.isInStatic()) {
                                        wr.out(this.thisName + "->", false);
                                    }
                                }
                            }
                        }
                        if ((p.compiledName.length) > 0) {
                            wr.out(this.adjustType(p.compiledName), false);
                        }
                        else {
                            if ((p.name.length) > 0) {
                                wr.out(this.adjustType(p.name), false);
                            }
                            else {
                                wr.out(this.adjustType((node.ns[i])), false);
                            }
                        }
                    }
                    ;
                    return [2 /*return*/];
                }
                if (node.hasParamDesc) {
                    wr.out("$", false);
                    part_2 = node.ns[0];
                    if ((part_2 != "this") && ctx.isMemberVariable(part_2)) {
                        uc_1 = ctx.getCurrentClass();
                        currC_1 = uc_1;
                        up_1 = currC_1.findVariable(part_2);
                        if ((typeof (up_1) !== "undefined" && up_1 != null)) {
                            if (false == ctx.isInStatic()) {
                                wr.out(this.thisName + "->", false);
                            }
                        }
                    }
                    p_1 = node.paramDesc;
                    wr.out(p_1.compiledName, false);
                    return [2 /*return*/];
                }
                b_was_static = false;
                for (i_1 = 0; i_1 < node.ns.length; i_1++) {
                    part_3 = node.ns[i_1];
                    if (i_1 > 0) {
                        if ((i_1 == 1) && b_was_static) {
                            wr.out("::", false);
                        }
                        else {
                            wr.out("->", false);
                        }
                    }
                    if (i_1 == 0) {
                        if (ctx.hasClass(part_3)) {
                            b_was_static = true;
                        }
                        else {
                            wr.out("$", false);
                        }
                        if ((part_3 != "this") && ctx.hasCurrentClass()) {
                            uc_2 = ctx.getCurrentClass();
                            currC_2 = uc_2;
                            up_2 = currC_2.findVariable(part_3);
                            if ((typeof (up_2) !== "undefined" && up_2 != null)) {
                                if (false == ctx.isInStatic()) {
                                    wr.out(this.thisName + "->", false);
                                }
                            }
                        }
                    }
                    wr.out(this.adjustType(part_3), false);
                }
                ;
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerPHPClassWriter.prototype.writeVarInitDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var nn, p, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasParamDesc) return [3 /*break*/, 4];
                        nn = node.children[1];
                        p = nn.paramDesc;
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("/** unused:  ", false);
                        }
                        wr.out("$this->" + p.compiledName, false);
                        if (!((node.children.length) > 2)) return [3 /*break*/, 2];
                        wr.out(" = ", false);
                        ctx.setInExpr();
                        value = node.getThird();
                        return [4 /*yield*/, this.WalkNode(value, ctx, wr)];
                    case 1:
                        _a.sent();
                        ctx.unsetInExpr();
                        return [3 /*break*/, 3];
                    case 2:
                        if (nn.value_type == 6) {
                            wr.out(" = array()", false);
                        }
                        if (nn.value_type == 7) {
                            wr.out(" = array()", false);
                        }
                        _a.label = 3;
                    case 3:
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("   **/", true);
                            return [2 /*return*/];
                        }
                        wr.out(";", false);
                        if ((p.ref_cnt == 0) && (p.is_class_variable == true)) {
                            wr.out("     /** note: unused */", false);
                        }
                        wr.newline();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerPHPClassWriter.prototype.writeVarDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var nn, p, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasParamDesc) return [3 /*break*/, 4];
                        nn = node.children[1];
                        p = nn.paramDesc;
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("/** unused:  ", false);
                        }
                        wr.out("$" + p.compiledName, false);
                        if (!((node.children.length) > 2)) return [3 /*break*/, 2];
                        wr.out(" = ", false);
                        ctx.setInExpr();
                        value = node.getThird();
                        return [4 /*yield*/, this.WalkNode(value, ctx, wr)];
                    case 1:
                        _a.sent();
                        ctx.unsetInExpr();
                        return [3 /*break*/, 3];
                    case 2:
                        if (nn.value_type == 6) {
                            wr.out(" = array()", false);
                        }
                        else {
                            if (nn.value_type == 7) {
                                wr.out(" = array()", false);
                            }
                            else {
                                wr.out(" = null", false);
                            }
                        }
                        _a.label = 3;
                    case 3:
                        if ((p.ref_cnt == 0) && (p.is_class_variable == true)) {
                            wr.out("     /** note: unused */", false);
                        }
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("   **/ ;", true);
                        }
                        else {
                            wr.out(";", false);
                            wr.newline();
                        }
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerPHPClassWriter.prototype.disabledVarDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var nn, p, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasParamDesc) return [3 /*break*/, 4];
                        nn = node.children[1];
                        p = nn.paramDesc;
                        wr.out("$this->" + p.compiledName, false);
                        if (!((node.children.length) > 2)) return [3 /*break*/, 2];
                        wr.out(" = ", false);
                        ctx.setInExpr();
                        value = node.getThird();
                        return [4 /*yield*/, this.WalkNode(value, ctx, wr)];
                    case 1:
                        _a.sent();
                        ctx.unsetInExpr();
                        return [3 /*break*/, 3];
                    case 2:
                        if (nn.value_type == 6) {
                            wr.out(" = array()", false);
                        }
                        if (nn.value_type == 7) {
                            wr.out(" = array()", false);
                        }
                        _a.label = 3;
                    case 3:
                        wr.out(";", false);
                        wr.newline();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerPHPClassWriter.prototype.CreateMethodCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var obj, args, i, arg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        obj = node.getFirst();
                        args = node.getSecond();
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(obj, ctx, wr)];
                    case 1:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out("(", false);
                        ctx.setInExpr();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < args.children.length)) return [3 /*break*/, 5];
                        arg = args.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        return [4 /*yield*/, this.WalkNode(arg, ctx, wr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        ctx.unsetInExpr();
                        wr.out(")", false);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerPHPClassWriter.prototype.CreatePropertyGet = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var obj, prop;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        obj = node.getSecond();
                        prop = node.getThird();
                        wr.out("(", false);
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(obj, ctx, wr)];
                    case 1:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out(")", false);
                        wr.out("->", false);
                        wr.out(prop.vref, false);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerPHPClassWriter.prototype.CreateLambdaCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fName, givenArgs, args, param, i, arg, n;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fName = node.children[0];
                        givenArgs = node.children[1];
                        if ((typeof (fName.expression_value) !== "undefined" && fName.expression_value != null)) {
                            args = fName.expression_value.children[1];
                        }
                        else {
                            param = ctx.getVariableDef(fName.vref);
                            args = param.nameNode.expression_value.children[1];
                        }
                        ctx.setInExpr();
                        wr.out("call_user_func(", false);
                        return [4 /*yield*/, this.WalkNode(fName, ctx, wr)];
                    case 1:
                        _a.sent();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < args.children.length)) return [3 /*break*/, 5];
                        arg = args.children[i];
                        n = givenArgs.children[i];
                        if (i >= 0) {
                            wr.out(", ", false);
                        }
                        if (!(arg.value_type != 0)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.WalkNode(n, ctx, wr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        ctx.unsetInExpr();
                        if (ctx.expressionLevel() == 0) {
                            wr.out(");", true);
                        }
                        else {
                            wr.out(")", false);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerPHPClassWriter.prototype.CreateLambda = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var lambdaCtx, args, body, i, arg, captCnt, i_1, cname, pp, i_2, item, i_3, cname_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        lambdaCtx = node.lambda_ctx;
                        args = node.children[1];
                        body = node.children[2];
                        wr.out("(function (", false);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < args.children.length)) return [3 /*break*/, 4];
                        arg = args.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        return [4 /*yield*/, this.WalkNode(arg, lambdaCtx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        wr.out(") ", false);
                        captCnt = 0;
                        for (i_1 = 0; i_1 < lambdaCtx.captured_variables.length; i_1++) {
                            cname = lambdaCtx.captured_variables[i_1];
                            pp = lambdaCtx.getVariableDef(cname);
                            if (pp.set_cnt >= 0) {
                                if (captCnt == 0) {
                                    wr.out("use (", false);
                                }
                                else {
                                    wr.out(", ", false);
                                }
                                wr.out(" &$" + cname, false);
                                captCnt = captCnt + 1;
                            }
                            else {
                                if (pp.varType == 4) {
                                    ctx.addError(node, "Mutating captured function parameter is not allowed");
                                }
                            }
                        }
                        ;
                        if (captCnt > 0) {
                            wr.out(")", false);
                        }
                        wr.out(" {", true);
                        wr.indent(1);
                        lambdaCtx.restartExpressionLevel();
                        i_2 = 0;
                        _a.label = 5;
                    case 5:
                        if (!(i_2 < body.children.length)) return [3 /*break*/, 8];
                        item = body.children[i_2];
                        return [4 /*yield*/, this.WalkNode(item, lambdaCtx, wr)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7:
                        i_2++;
                        return [3 /*break*/, 5];
                    case 8:
                        ;
                        wr.newline();
                        for (i_3 = 0; i_3 < lambdaCtx.captured_variables.length; i_3++) {
                            cname_1 = lambdaCtx.captured_variables[i_3];
                            wr.out("// captured var " + cname_1, true);
                        }
                        ;
                        wr.indent(-1);
                        if (ctx.expressionLevel() == 0) {
                            wr.out("});", true);
                        }
                        else {
                            wr.out("})", false);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerPHPClassWriter.prototype.writeClassVarDef = function (node, ctx, wr) {
        if (node.hasParamDesc) {
            var nn = node.children[1];
            var p = nn.paramDesc;
            wr.out(("var $" + p.compiledName) + ";", true);
        }
    };
    ;
    RangerPHPClassWriter.prototype.writeArgsDef = function (fnDesc, ctx, wr) {
        for (var i = 0; i < fnDesc.params.length; i++) {
            var arg = fnDesc.params[i];
            if (i > 0) {
                wr.out(",", false);
            }
            wr.out((" $" + arg.compiledName) + " ", false);
        }
        ;
    };
    ;
    RangerPHPClassWriter.prototype.writeArrayLiteral = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        wr.out("array(", false);
                        return [4 /*yield*/, operatorsOf.forEach_15(node.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (index > 0) {
                                                wr.out(", ", false);
                                            }
                                            return [4 /*yield*/, this.WalkNode(item, ctx, wr)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        wr.out(")", false);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerPHPClassWriter.prototype.writeFnCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fc, givenArgs, i, arg, defVal, fc_1, n;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasFnCall) return [3 /*break*/, 10];
                        fc = node.getFirst();
                        return [4 /*yield*/, this.WriteVRef(fc, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out("(", false);
                        givenArgs = node.getSecond();
                        ctx.setInExpr();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < node.fnDesc.params.length)) return [3 /*break*/, 9];
                        arg = node.fnDesc.params[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        if (!((givenArgs.children.length) <= i)) return [3 /*break*/, 6];
                        defVal = arg.nameNode.getFlag("default");
                        if (!(typeof (defVal) !== "undefined" && defVal != null)) return [3 /*break*/, 4];
                        fc_1 = defVal.vref_annotation.getFirst();
                        return [4 /*yield*/, this.WalkNode(fc_1, ctx, wr)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        ctx.addError(node, "Default argument was missing");
                        _a.label = 5;
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        n = givenArgs.children[i];
                        return [4 /*yield*/, this.WalkNode(n, ctx, wr)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        i++;
                        return [3 /*break*/, 2];
                    case 9:
                        ;
                        ctx.unsetInExpr();
                        wr.out(")", false);
                        if (ctx.expressionLevel() == 0) {
                            wr.out(";", true);
                        }
                        _a.label = 10;
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerPHPClassWriter.prototype.writeNewCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cl, constr, givenArgs, i, arg, n;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasNewOper) return [3 /*break*/, 6];
                        cl = node.clDesc;
                        /** unused:  const fc : CodeNode  = node.getSecond()   **/
                        wr.out(" new ", false);
                        wr.out(node.clDesc.name, false);
                        wr.out("(", false);
                        constr = cl.constructor_fn;
                        givenArgs = node.getThird();
                        if (!(typeof (constr) !== "undefined" && constr != null)) return [3 /*break*/, 5];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < constr.params.length)) return [3 /*break*/, 4];
                        arg = constr.params[i];
                        n = givenArgs.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        if (!(true || ((typeof (arg.nameNode) !== "undefined" && arg.nameNode != null)))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.WalkNode(n, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        _a.label = 5;
                    case 5:
                        wr.out(")", false);
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerPHPClassWriter.prototype.CreateCallExpression = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var obj, method, args, i, arg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.has_call) return [3 /*break*/, 9];
                        obj = node.getSecond();
                        method = node.getThird();
                        args = node.children[3];
                        wr.out("", false);
                        ctx.setInExpr();
                        if (!ctx.hasCompilerFlag("php54")) return [3 /*break*/, 2];
                        wr.out(("call_user_method(\"" + method.vref) + "\",", false);
                        return [4 /*yield*/, this.WalkNode(obj, ctx, wr)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        wr.out("(", false);
                        return [4 /*yield*/, this.WalkNode(obj, ctx, wr)];
                    case 3:
                        _a.sent();
                        wr.out(")", false);
                        ctx.unsetInExpr();
                        wr.out("->", false);
                        wr.out(method.vref, false);
                        wr.out("(", false);
                        ctx.setInExpr();
                        _a.label = 4;
                    case 4:
                        i = 0;
                        _a.label = 5;
                    case 5:
                        if (!(i < args.children.length)) return [3 /*break*/, 8];
                        arg = args.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        return [4 /*yield*/, this.WalkNode(arg, ctx, wr)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7:
                        i++;
                        return [3 /*break*/, 5];
                    case 8:
                        ;
                        ctx.unsetInExpr();
                        wr.out(")", false);
                        if (ctx.expressionLevel() == 0) {
                            wr.out(";", true);
                        }
                        _a.label = 9;
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerPHPClassWriter.prototype.writeClass = function (node, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cl, declaredFunction, wr, i, dd, parentClass, i_1, pName, i_2, pvar, constr, i_3, pvar_1, constr_1, subCtx, i_4, variant, subCtx_1, i_5, fnVar, mVs, i_6, variant_1, subCtx_2, i_7, variant_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cl = node.clDesc;
                        if (typeof (cl) === "undefined") {
                            return [2 /*return*/];
                        }
                        declaredFunction = {};
                        wr = orig_wr;
                        /** unused:  const importFork : CodeWriter  = wr.fork()   **/
                        for (i = 0; i < cl.capturedLocals.length; i++) {
                            dd = cl.capturedLocals[i];
                            if (dd.is_class_variable == false) {
                                if (dd.set_cnt > 0) {
                                }
                            }
                        }
                        ;
                        if (this.wrote_header == false) {
                            wr.out("<?php ", true);
                            wr.out("", true);
                            this.wrote_header = true;
                        }
                        wr.out("class " + cl.name, false);
                        if ((cl.extends_classes.length) > 0) {
                            wr.out(" extends ", false);
                            for (i_1 = 0; i_1 < cl.extends_classes.length; i_1++) {
                                pName = cl.extends_classes[i_1];
                                wr.out(pName, false);
                                parentClass = ctx.findClass(pName);
                            }
                            ;
                        }
                        wr.out(" { ", true);
                        wr.indent(1);
                        for (i_2 = 0; i_2 < cl.variables.length; i_2++) {
                            pvar = cl.variables[i_2];
                            this.writeClassVarDef(pvar.node, ctx, wr);
                        }
                        ;
                        wr.out("function __construct(", false);
                        if (cl.has_constructor) {
                            constr = cl.constructor_fn;
                            this.writeArgsDef(constr, ctx, wr);
                        }
                        wr.out(" ) {", true);
                        wr.indent(1);
                        if (typeof (parentClass) != "undefined") {
                            wr.out("parent::__construct();", true);
                        }
                        i_3 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_3 < cl.variables.length)) return [3 /*break*/, 4];
                        pvar_1 = cl.variables[i_3];
                        return [4 /*yield*/, this.writeVarInitDef(pvar_1.node, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i_3++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        if (!cl.has_constructor) return [3 /*break*/, 6];
                        constr_1 = cl.constructor_fn;
                        wr.newline();
                        subCtx = constr_1.fnCtx;
                        subCtx.is_function = true;
                        return [4 /*yield*/, this.WalkNode(constr_1.fnBody, subCtx, wr)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        i_4 = 0;
                        _a.label = 7;
                    case 7:
                        if (!(i_4 < cl.static_methods.length)) return [3 /*break*/, 10];
                        variant = cl.static_methods[i_4];
                        if (variant.nameNode.hasFlag("main")) {
                            return [3 /*break*/, 9];
                        }
                        else {
                            wr.out("public static function ", false);
                            wr.out(variant.compiledName + "(", false);
                            this.writeArgsDef(variant, ctx, wr);
                            wr.out(") {", true);
                        }
                        wr.indent(1);
                        wr.newline();
                        subCtx_1 = variant.fnCtx;
                        subCtx_1.is_function = true;
                        subCtx_1.in_static_method = true;
                        return [4 /*yield*/, this.WalkNode(variant.fnBody, subCtx_1, wr)];
                    case 8:
                        _a.sent();
                        subCtx_1.in_static_method = false;
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 9;
                    case 9:
                        i_4++;
                        return [3 /*break*/, 7];
                    case 10:
                        ;
                        i_5 = 0;
                        _a.label = 11;
                    case 11:
                        if (!(i_5 < cl.defined_variants.length)) return [3 /*break*/, 17];
                        fnVar = cl.defined_variants[i_5];
                        mVs = cl.method_variants[fnVar];
                        i_6 = 0;
                        _a.label = 12;
                    case 12:
                        if (!(i_6 < mVs.variants.length)) return [3 /*break*/, 15];
                        variant_1 = mVs.variants[i_6];
                        if ((typeof (declaredFunction[variant_1.name]) != "undefined" && declaredFunction.hasOwnProperty(variant_1.name))) {
                            return [3 /*break*/, 14];
                        }
                        declaredFunction[variant_1.name] = true;
                        wr.out(("function " + variant_1.compiledName) + "(", false);
                        this.writeArgsDef(variant_1, ctx, wr);
                        wr.out(") {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx_2 = variant_1.fnCtx;
                        subCtx_2.is_function = true;
                        subCtx_2.in_static_method = false;
                        return [4 /*yield*/, this.WalkNode(variant_1.fnBody, subCtx_2, wr)];
                    case 13:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 14;
                    case 14:
                        i_6++;
                        return [3 /*break*/, 12];
                    case 15:
                        ;
                        _a.label = 16;
                    case 16:
                        i_5++;
                        return [3 /*break*/, 11];
                    case 17:
                        ;
                        wr.indent(-1);
                        wr.out("}", true);
                        i_7 = 0;
                        _a.label = 18;
                    case 18:
                        if (!(i_7 < cl.static_methods.length)) return [3 /*break*/, 22];
                        variant_2 = cl.static_methods[i_7];
                        ctx.disableCurrentClass();
                        ctx.in_static_method = true;
                        if (!(variant_2.nameNode.hasFlag("main") && (variant_2.nameNode.code.filename == ctx.getRootFile()))) return [3 /*break*/, 20];
                        wr.out("/* static PHP main routine */", false);
                        wr.newline();
                        return [4 /*yield*/, this.WalkNode(variant_2.fnBody, ctx, wr)];
                    case 19:
                        _a.sent();
                        wr.newline();
                        _a.label = 20;
                    case 20:
                        ctx.in_static_method = false;
                        _a.label = 21;
                    case 21:
                        i_7++;
                        return [3 /*break*/, 18];
                    case 22:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    return RangerPHPClassWriter;
}(RangerGenericClassWriter));
exports.RangerPHPClassWriter = RangerPHPClassWriter;
var WebPageWriter = /** @class */ (function () {
    function WebPageWriter() {
    }
    WebPageWriter.prototype.CreatePage = function (parser, node, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var sc, wr, fnBody, subCtx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sc = node.getSecond();
                        wr = orig_wr;
                        wr.out("// created by WebPageWriter ", true);
                        wr.out(sc.vref + " () {", true);
                        wr.indent(1);
                        wr.out(("var view = document.getElementById('" + sc.vref) + "');", true);
                        fnBody = node.children[2];
                        subCtx = ctx.fork();
                        subCtx.is_function = true;
                        subCtx.in_static_method = true;
                        subCtx.setInMethod();
                        return [4 /*yield*/, parser.WalkNodeChildren(fnBody, subCtx, wr)];
                    case 1:
                        _a.sent();
                        subCtx.unsetInMethod();
                        subCtx.in_static_method = false;
                        subCtx.function_level_context = true;
                        return [4 /*yield*/, this.classWriter.WalkNode(fnBody, subCtx, wr)];
                    case 2:
                        _a.sent();
                        wr.out("return view;", true);
                        wr.indent(-1);
                        wr.out("}", true);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    return WebPageWriter;
}());
exports.WebPageWriter = WebPageWriter;
var RangerJavaScriptClassWriter = /** @class */ (function (_super) {
    __extends(RangerJavaScriptClassWriter, _super);
    function RangerJavaScriptClassWriter() {
        var _this = _super.call(this) || this;
        _this.thisName = "this"; /** note: unused */
        _this.wrote_header = false;
        _this.target_flow = false;
        _this.target_typescript = false;
        return _this;
    }
    RangerJavaScriptClassWriter.prototype.lineEnding = function () {
        return ";";
    };
    ;
    RangerJavaScriptClassWriter.prototype.adjustType = function (tn) {
        if (tn == "this") {
            return "this";
        }
        return tn;
    };
    ;
    RangerJavaScriptClassWriter.prototype.CreateTsUnions = function (parser, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var root;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        root = ctx.getRoot();
                        return [4 /*yield*/, operatorsOf_13.forEach_14(root.definedClasses, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                var cnt_4;
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!item.is_union) return [3 /*break*/, 2];
                                            wr.out(("type union_" + index) + " = ", false);
                                            wr.indent(1);
                                            cnt_4 = 0;
                                            return [4 /*yield*/, operatorsOf.forEach_12(item.is_union_of, (function (item, index) {
                                                    if (ctx.isDefinedClass(item)) {
                                                        var cl = ctx.findClass(item);
                                                        if (false == cl.isNormalClass()) {
                                                            return;
                                                        }
                                                        if (cnt_4 > 0) {
                                                            wr.out("|", false);
                                                        }
                                                        wr.out(_this.getObjectTypeString(item, ctx), false);
                                                        cnt_4 = cnt_4 + 1;
                                                    }
                                                    else {
                                                        if (cnt_4 > 0) {
                                                            wr.out("|", false);
                                                        }
                                                        wr.out(_this.getObjectTypeString(item, ctx), false);
                                                        cnt_4 = cnt_4 + 1;
                                                    }
                                                }))];
                                        case 1:
                                            _a.sent();
                                            wr.indent(-1);
                                            wr.out(";", true);
                                            _a.label = 2;
                                        case 2: return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJavaScriptClassWriter.prototype.writeFnCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fc, fnName, givenArgs, cnt, i, arg, defVal, fc_1, n, i_1, cc, i_2, arg_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasFnCall) return [3 /*break*/, 18];
                        fc = node.getFirst();
                        if (((typeof (node.fnDesc) !== "undefined" && node.fnDesc != null)) && ((typeof (node.fnDesc.nameNode) !== "undefined" && node.fnDesc.nameNode != null))) {
                            fnName = node.fnDesc.nameNode;
                            if (fnName.hasFlag("async")) {
                                wr.out("await ", false);
                            }
                        }
                        return [4 /*yield*/, this.WriteVRef(fc, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out("(", false);
                        givenArgs = node.getSecond();
                        ctx.setInExpr();
                        cnt = 0;
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < node.fnDesc.params.length)) return [3 /*break*/, 9];
                        arg = node.fnDesc.params[i];
                        if (arg.nameNode.hasFlag("keyword")) {
                            return [3 /*break*/, 8];
                        }
                        if (cnt > 0) {
                            wr.out(", ", false);
                        }
                        cnt = cnt + 1;
                        if (!((givenArgs.children.length) <= i)) return [3 /*break*/, 6];
                        defVal = arg.nameNode.getFlag("default");
                        if (!(typeof (defVal) !== "undefined" && defVal != null)) return [3 /*break*/, 4];
                        fc_1 = defVal.vref_annotation.getFirst();
                        return [4 /*yield*/, this.WalkNode(fc_1, ctx, wr)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        ctx.addError(node, "Default argument was missing");
                        _a.label = 5;
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        n = givenArgs.children[i];
                        return [4 /*yield*/, this.WalkNode(n, ctx, wr)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        i++;
                        return [3 /*break*/, 2];
                    case 9:
                        ;
                        ctx.unsetInExpr();
                        wr.out(")", false);
                        if (!((node.methodChain.length) > 0)) return [3 /*break*/, 17];
                        i_1 = 0;
                        _a.label = 10;
                    case 10:
                        if (!(i_1 < node.methodChain.length)) return [3 /*break*/, 16];
                        cc = node.methodChain[i_1];
                        wr.out("." + cc.methodName, false);
                        wr.out("(", false);
                        ctx.setInExpr();
                        i_2 = 0;
                        _a.label = 11;
                    case 11:
                        if (!(i_2 < cc.args.children.length)) return [3 /*break*/, 14];
                        arg_1 = cc.args.children[i_2];
                        if (i_2 > 0) {
                            wr.out(", ", false);
                        }
                        return [4 /*yield*/, this.WalkNode(arg_1, ctx, wr)];
                    case 12:
                        _a.sent();
                        _a.label = 13;
                    case 13:
                        i_2++;
                        return [3 /*break*/, 11];
                    case 14:
                        ;
                        ctx.unsetInExpr();
                        wr.out(")", false);
                        _a.label = 15;
                    case 15:
                        i_1++;
                        return [3 /*break*/, 10];
                    case 16:
                        ;
                        _a.label = 17;
                    case 17:
                        if (ctx.expressionLevel() == 0) {
                            wr.out(";", true);
                        }
                        _a.label = 18;
                    case 18: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJavaScriptClassWriter.prototype.CreateCallExpression = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var obj, method, args, fnName, i, arg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.has_call) return [3 /*break*/, 6];
                        obj = node.getSecond();
                        method = node.getThird();
                        args = node.children[3];
                        if (((typeof (node.fnDesc) !== "undefined" && node.fnDesc != null)) && ((typeof (node.fnDesc.nameNode) !== "undefined" && node.fnDesc.nameNode != null))) {
                            fnName = node.fnDesc.nameNode;
                            if (fnName.hasFlag("async")) {
                                wr.out("await ", false);
                            }
                        }
                        wr.out("(", false);
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(obj, ctx, wr)];
                    case 1:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out(").", false);
                        wr.out(method.vref, false);
                        wr.out("(", false);
                        ctx.setInExpr();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < args.children.length)) return [3 /*break*/, 5];
                        arg = args.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        return [4 /*yield*/, this.WalkNode(arg, ctx, wr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        ctx.unsetInExpr();
                        wr.out(")", false);
                        if (ctx.expressionLevel() == 0) {
                            wr.out(";", true);
                        }
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJavaScriptClassWriter.prototype.getObjectTypeString = function (type_string, ctx) {
        switch (type_string) {
            case "int":
                return "number";
            case "string":
                return "string";
            case "charbuffer":
                return "string";
            case "char":
                return "number";
            case "boolean":
                return "boolean";
            case "double":
                return "number";
        }
        ;
        if (ctx.isDefinedClass(type_string)) {
            var cc = ctx.findClass(type_string);
            if (cc.is_system) {
                /** unused:  const current_sys : RangerAppWriterContext  = ctx   **/
                var sName = (cc.systemNames["es6"]);
                return sName;
            }
            if (cc.is_union) {
                return "union_" + cc.name;
            }
        }
        return type_string;
    };
    ;
    RangerJavaScriptClassWriter.prototype.getTypeString = function (type_string) {
        switch (type_string) {
            case "int":
                return "number";
            case "string":
                return "string";
            case "charbuffer":
                return "string";
            case "char":
                return "number";
            case "boolean":
                return "boolean";
            case "double":
                return "number";
        }
        ;
        return type_string;
    };
    ;
    RangerJavaScriptClassWriter.prototype.writeTypeDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var v_type, t_name, a_name, k_name, _a, rv, sec, i, arg, cc, sName, cc_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        v_type = node.value_type;
                        t_name = node.type_name;
                        a_name = node.array_type;
                        k_name = node.key_type;
                        if (((v_type == 10) || (v_type == 11)) || (v_type == 0)) {
                            v_type = node.typeNameAsType(ctx);
                        }
                        if (node.eval_type != 0) {
                            v_type = node.eval_type;
                            if ((node.eval_type_name.length) > 0) {
                                t_name = node.eval_type_name;
                            }
                            if ((node.eval_array_type.length) > 0) {
                                a_name = node.eval_array_type;
                            }
                            if ((node.eval_key_type.length) > 0) {
                                k_name = node.eval_key_type;
                            }
                        }
                        _a = v_type;
                        switch (_a) {
                            case 17: return [3 /*break*/, 1];
                            case 13: return [3 /*break*/, 8];
                            case 3: return [3 /*break*/, 9];
                            case 14: return [3 /*break*/, 10];
                            case 15: return [3 /*break*/, 11];
                            case 2: return [3 /*break*/, 12];
                            case 4: return [3 /*break*/, 13];
                            case 5: return [3 /*break*/, 14];
                            case 7: return [3 /*break*/, 15];
                            case 6: return [3 /*break*/, 16];
                        }
                        return [3 /*break*/, 17];
                    case 1:
                        rv = node.expression_value.children[0];
                        sec = node.expression_value.children[1];
                        /** unused:  const fc : CodeNode  = sec.getFirst()   **/
                        wr.out("(", false);
                        i = 0;
                        _b.label = 2;
                    case 2:
                        if (!(i < sec.children.length)) return [3 /*break*/, 6];
                        arg = sec.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        return [4 /*yield*/, this.WalkNode(arg, ctx, wr)];
                    case 3:
                        _b.sent();
                        wr.out(":", false);
                        return [4 /*yield*/, this.writeTypeDef(arg, ctx, wr)];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5:
                        i++;
                        return [3 /*break*/, 2];
                    case 6:
                        ;
                        wr.out(") => ", false);
                        if (this.target_typescript) {
                            if (node.hasFlag("async")) {
                                wr.out("Promise<", false);
                            }
                        }
                        return [4 /*yield*/, this.writeTypeDef(rv, ctx, wr)];
                    case 7:
                        _b.sent();
                        if (this.target_typescript) {
                            if (node.hasFlag("async")) {
                                wr.out(">", false);
                            }
                        }
                        return [3 /*break*/, 18];
                    case 8:
                        wr.out("number", false);
                        return [3 /*break*/, 18];
                    case 9:
                        wr.out("number", false);
                        return [3 /*break*/, 18];
                    case 10:
                        wr.out("number", false);
                        return [3 /*break*/, 18];
                    case 11:
                        wr.out("string", false);
                        return [3 /*break*/, 18];
                    case 12:
                        wr.out("number", false);
                        return [3 /*break*/, 18];
                    case 13:
                        wr.out("string", false);
                        return [3 /*break*/, 18];
                    case 14:
                        wr.out("boolean", false);
                        return [3 /*break*/, 18];
                    case 15:
                        wr.out(((("{[key:" + this.getObjectTypeString(k_name, ctx)) + "]:") + this.getObjectTypeString(a_name, ctx)) + "}", false);
                        return [3 /*break*/, 18];
                    case 16:
                        wr.out(("Array<" + this.getObjectTypeString(a_name, ctx)) + ">", false);
                        return [3 /*break*/, 18];
                    case 17:
                        if (node.type_name == "void") {
                            wr.out("void", false);
                            return [2 /*return*/];
                        }
                        if (ctx.isDefinedClass(t_name)) {
                            cc = ctx.findClass(t_name);
                            if (cc.is_system) {
                                sName = (cc.systemNames["es6"]);
                                wr.out(sName, false);
                                return [2 /*return*/];
                            }
                            if (cc.is_union) {
                                wr.out("union_", false);
                                wr.out(t_name, false);
                                return [2 /*return*/];
                            }
                            cc_1 = ctx.findClass(t_name);
                            wr.out(cc_1.name, false);
                            return [2 /*return*/];
                        }
                        wr.out(this.getTypeString(t_name), false);
                        return [3 /*break*/, 18];
                    case 18:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJavaScriptClassWriter.prototype.WriteVRef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var rootObjName, enumName, e, i, p, part, uc, currC, up, part_1, uc_1, currC_1, up_1, p_1, b_was_static, i_1, part_2, uc_2, currC_2, up_2;
            return __generator(this, function (_a) {
                if (node.eval_type == 13) {
                    if ((node.ns.length) > 1) {
                        rootObjName = node.ns[0];
                        enumName = node.ns[1];
                        e = ctx.getEnum(rootObjName);
                        if ((typeof (e) !== "undefined" && e != null)) {
                            wr.out("" + ((e.values[enumName])), false);
                            return [2 /*return*/];
                        }
                    }
                }
                if ((node.nsp.length) > 0) {
                    for (i = 0; i < node.nsp.length; i++) {
                        p = node.nsp[i];
                        if (i > 0) {
                            wr.out(".", false);
                        }
                        if (i == 0) {
                            part = node.ns[0];
                            if ((part != "this") && ctx.isMemberVariable(part)) {
                                uc = ctx.getCurrentClass();
                                currC = uc;
                                up = currC.findVariable(part);
                                if ((typeof (up) !== "undefined" && up != null)) {
                                    wr.out("this.", false);
                                }
                            }
                            if (part == "this") {
                                wr.out("this", false);
                                continue;
                            }
                        }
                        if ((p.compiledName.length) > 0) {
                            wr.out(this.adjustType(p.compiledName), false);
                        }
                        else {
                            if ((p.name.length) > 0) {
                                wr.out(this.adjustType(p.name), false);
                            }
                            else {
                                wr.out(this.adjustType((node.ns[i])), false);
                            }
                        }
                    }
                    ;
                    return [2 /*return*/];
                }
                if (node.hasParamDesc) {
                    part_1 = node.ns[0];
                    if ((part_1 != "this") && ctx.isMemberVariable(part_1)) {
                        uc_1 = ctx.getCurrentClass();
                        currC_1 = uc_1;
                        up_1 = currC_1.findVariable(part_1);
                        if ((typeof (up_1) !== "undefined" && up_1 != null)) {
                            wr.out("this.", false);
                        }
                    }
                    p_1 = node.paramDesc;
                    wr.out(p_1.compiledName, false);
                    return [2 /*return*/];
                }
                b_was_static = false;
                for (i_1 = 0; i_1 < node.ns.length; i_1++) {
                    part_2 = node.ns[i_1];
                    if (i_1 > 0) {
                        if ((i_1 == 1) && b_was_static) {
                            wr.out(".", false);
                        }
                        else {
                            wr.out(".", false);
                        }
                    }
                    if (i_1 == 0) {
                        if (ctx.hasClass(part_2)) {
                            b_was_static = true;
                        }
                        else {
                            wr.out("", false);
                        }
                        if ((part_2 != "this") && ctx.isMemberVariable(part_2)) {
                            uc_2 = ctx.getCurrentClass();
                            currC_2 = uc_2;
                            up_2 = currC_2.findVariable(part_2);
                            if ((typeof (up_2) !== "undefined" && up_2 != null)) {
                                wr.out("this.", false);
                            }
                        }
                    }
                    wr.out(this.adjustType(part_2), false);
                }
                ;
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerJavaScriptClassWriter.prototype.writeVarInitDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var nn, p, remove_unused, was_set, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasParamDesc) return [3 /*break*/, 4];
                        nn = node.children[1];
                        p = nn.paramDesc;
                        remove_unused = ctx.hasCompilerFlag("remove-unused-class-vars");
                        if ((p.ref_cnt == 0) && (remove_unused || (p.is_class_variable == false))) {
                            return [2 /*return*/];
                        }
                        was_set = false;
                        if (!((node.children.length) > 2)) return [3 /*break*/, 2];
                        wr.out(("this." + p.compiledName) + " = ", false);
                        ctx.setInExpr();
                        value = node.getThird();
                        return [4 /*yield*/, this.WalkNode(value, ctx, wr)];
                    case 1:
                        _a.sent();
                        ctx.unsetInExpr();
                        was_set = true;
                        return [3 /*break*/, 3];
                    case 2:
                        if (nn.value_type == 6) {
                            wr.out("this." + p.compiledName, false);
                            if (nn.hasFlag("immutable")) {
                                wr.out(" = require('immutable').List()", false);
                            }
                            else {
                                wr.out(" = []", false);
                            }
                            was_set = true;
                        }
                        if (nn.value_type == 7) {
                            wr.out("this." + p.compiledName, false);
                            if (nn.hasFlag("immutable")) {
                                wr.out(" = require('immutable').Map()", false);
                            }
                            else {
                                wr.out(" = {}", false);
                            }
                            was_set = true;
                        }
                        _a.label = 3;
                    case 3:
                        if (was_set) {
                            wr.out(";", false);
                            if ((p.ref_cnt == 0) && (p.is_class_variable == true)) {
                                wr.out("     /** note: unused */", false);
                            }
                            wr.newline();
                        }
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJavaScriptClassWriter.prototype.writeVarDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var nn, p, has_value, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasParamDesc) return [3 /*break*/, 6];
                        nn = node.children[1];
                        p = nn.paramDesc;
                        /** unused:  const opt_js : boolean  = ctx.hasCompilerFlag("optimize-js")   **/
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("/** unused:  ", false);
                        }
                        has_value = false;
                        if ((node.children.length) > 2) {
                            has_value = true;
                        }
                        if (((p.set_cnt > 0) || p.is_class_variable) || (has_value == false)) {
                            wr.out("let " + p.compiledName, false);
                        }
                        else {
                            wr.out("const " + p.compiledName, false);
                        }
                        if (!this.target_typescript) return [3 /*break*/, 2];
                        wr.out(" : ", false);
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out(" ", false);
                        _a.label = 2;
                    case 2:
                        if (!((node.children.length) > 2)) return [3 /*break*/, 4];
                        wr.out(" = ", false);
                        ctx.setInExpr();
                        value = node.getThird();
                        return [4 /*yield*/, this.WalkNode(value, ctx, wr)];
                    case 3:
                        _a.sent();
                        ctx.unsetInExpr();
                        return [3 /*break*/, 5];
                    case 4:
                        if (nn.value_type == 6) {
                            if (nn.hasFlag("immutable")) {
                                wr.out(" = require('immutable').List()", false);
                            }
                            else {
                                wr.out(" = []", false);
                            }
                        }
                        if (nn.value_type == 7) {
                            if (nn.hasFlag("immutable")) {
                                wr.out(" = require('immutable').Map()", false);
                            }
                            else {
                                wr.out(" = {}", false);
                            }
                        }
                        _a.label = 5;
                    case 5:
                        if ((p.ref_cnt == 0) && (p.is_class_variable == true)) {
                            wr.out("     /** note: unused */", false);
                        }
                        if ((p.ref_cnt == 0) && (p.is_class_variable == false)) {
                            wr.out("   **/ ", true);
                        }
                        else {
                            wr.out(";", false);
                            wr.newline();
                        }
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJavaScriptClassWriter.prototype.writeClassVarDef = function (p, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.target_typescript) return [3 /*break*/, 2];
                        wr.out(p.compiledName, false);
                        wr.out(": ", false);
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out(";", true);
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJavaScriptClassWriter.prototype.CreateLambdaCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fName, args, currM, i, arg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fName = node.children[0];
                        args = node.children[1];
                        ctx.setInExpr();
                        currM = ctx.getCurrentMethod();
                        if (((typeof (currM.nameNode) !== "undefined" && currM.nameNode != null)) && currM.nameNode.hasFlag("async")) {
                            wr.out("await ", false);
                        }
                        return [4 /*yield*/, this.WalkNode(fName, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out("(", false);
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < args.children.length)) return [3 /*break*/, 5];
                        arg = args.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        return [4 /*yield*/, this.WalkNode(arg, ctx, wr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        wr.out(")", false);
                        ctx.unsetInExpr();
                        if (ctx.expressionLevel() == 0) {
                            wr.out(";", true);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJavaScriptClassWriter.prototype.CreateLambda = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var lambdaCtx, fName, args, body, i, arg, i_1, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        lambdaCtx = node.lambda_ctx;
                        fName = node.children[0];
                        args = node.children[1];
                        body = node.children[2];
                        if (ctx.expressionLevel() > 0) {
                            wr.out("(", false);
                        }
                        if (fName.hasFlag("async")) {
                            wr.out("async ", false);
                        }
                        wr.out("(", false);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < args.children.length)) return [3 /*break*/, 7];
                        arg = args.children[i];
                        if (i > 0) {
                            wr.out(", ", false);
                        }
                        if (!(arg.flow_done == false)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.compiler.parser.WalkNode(arg, lambdaCtx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [4 /*yield*/, this.WalkNode(arg, lambdaCtx, wr)];
                    case 4:
                        _a.sent();
                        if (!this.target_typescript) return [3 /*break*/, 6];
                        wr.out(" : ", false);
                        return [4 /*yield*/, this.writeTypeDef(arg, ctx, wr)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        i++;
                        return [3 /*break*/, 1];
                    case 7:
                        ;
                        wr.out(")", false);
                        if (!this.target_typescript) return [3 /*break*/, 9];
                        wr.out(":", false);
                        if (fName.hasFlag("async")) {
                            wr.out(" Promise<", false);
                        }
                        return [4 /*yield*/, this.writeTypeDef(fName, ctx, wr)];
                    case 8:
                        _a.sent();
                        if (fName.hasFlag("async")) {
                            wr.out(">", false);
                        }
                        _a.label = 9;
                    case 9:
                        wr.out(" => { ", true);
                        wr.indent(1);
                        lambdaCtx.restartExpressionLevel();
                        i_1 = 0;
                        _a.label = 10;
                    case 10:
                        if (!(i_1 < body.children.length)) return [3 /*break*/, 13];
                        item = body.children[i_1];
                        return [4 /*yield*/, this.WalkNode(item, lambdaCtx, wr)];
                    case 11:
                        _a.sent();
                        _a.label = 12;
                    case 12:
                        i_1++;
                        return [3 /*break*/, 10];
                    case 13:
                        ;
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", false);
                        if (ctx.expressionLevel() > 0) {
                            wr.out(")", false);
                        }
                        else {
                            wr.out("", true);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJavaScriptClassWriter.prototype.writeArgsDef = function (fnDesc, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cnt, pms, i, arg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cnt = 0;
                        pms = operatorsOf.filter_50(fnDesc.params, (function (item, index) {
                            if (item.nameNode.hasFlag("keyword")) {
                                return false;
                            }
                            return true;
                        }));
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < pms.length)) return [3 /*break*/, 4];
                        arg = pms[i];
                        if (cnt > 0) {
                            wr.out(", ", false);
                        }
                        cnt = cnt + 1;
                        wr.out(arg.compiledName, false);
                        if (!this.target_typescript) return [3 /*break*/, 3];
                        wr.out(" : ", false);
                        return [4 /*yield*/, this.writeTypeDef(arg.nameNode, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJavaScriptClassWriter.prototype.writeClass = function (node, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cl, is_react_native, is_rn_default, wr, root, b_extd, do_export, i, pName, i_1, pvar, constr, i_2, pvar_1, constr_1, subCtx, i_3, fnVar, mVs, i_4, variant, subCtx_1, i_5, variant_1, subCtx_2, i_6, variant_2, asyncKeyword, subCtx_3, i_7, variant_3, asyncKeyword_1, theEnd_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cl = node.clDesc;
                        is_react_native = false;
                        is_rn_default = false;
                        this.target_typescript = ctx.hasCompilerFlag("typescript");
                        if (ctx.hasCompilerFlag("dead4main") || ctx.hasCompilerSetting("dceclass")) {
                            if (cl.is_used_by_main == false) {
                                return [2 /*return*/];
                            }
                        }
                        if (cl.is_interface) {
                            orig_wr.out("// interface : " + cl.name, true);
                            return [2 /*return*/];
                        }
                        if (typeof (cl) === "undefined") {
                            return [2 /*return*/];
                        }
                        if (cl.nameNode.hasFlag("ReactNative")) {
                            is_react_native = true;
                            this.compFlags["ReactNative"] = true;
                        }
                        if (cl.nameNode.hasFlag("default")) {
                            is_rn_default = true;
                        }
                        wr = orig_wr;
                        if (!(this.wrote_header == false)) return [3 /*break*/, 6];
                        this.wrote_header = true;
                        if (ctx.hasCompilerFlag("nodecli")) {
                            wr.out("#!/usr/bin/env node", true);
                        }
                        if (!(ctx.hasCompilerFlag("nodemodule") && (this.target_typescript == false))) return [3 /*break*/, 2];
                        root = ctx.getRoot();
                        return [4 /*yield*/, operatorsOf_13.forEach_14(root.definedClasses, (function (item, index) {
                                if (ctx.hasCompilerFlag("dead4main") || ctx.hasCompilerSetting("dceclass")) {
                                    if (item.is_used_by_main == false) {
                                        return;
                                    }
                                }
                                if (item.isNormalClass()) {
                                    var theEnd = wr.getTag("file_end");
                                    theEnd.out(((("module.exports." + item.name) + " = ") + item.name) + ";", true);
                                }
                            }))];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        this.target_flow = ctx.hasCompilerFlag("flow");
                        if (!this.target_typescript) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.CreateTsUnions(this.compiler.parser, ctx, wr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        if (!ctx.hasCompilerFlag("npm")) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.writeNpmPackage(node, ctx, wr)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        b_extd = false;
                        do_export = false;
                        if (is_react_native || this.target_typescript) {
                            do_export = true;
                            if (cl.is_system || cl.is_operator_class) {
                                do_export = false;
                            }
                        }
                        if (do_export) {
                            wr.out("export ", false);
                            if (is_rn_default) {
                                wr.out(" default ", false);
                            }
                        }
                        wr.out(("class " + cl.name) + " ", false);
                        if (is_react_native) {
                            wr.out(" extends Component ", false);
                        }
                        else {
                            for (i = 0; i < cl.extends_classes.length; i++) {
                                pName = cl.extends_classes[i];
                                if (i == 0) {
                                    wr.out(" extends ", false);
                                }
                                wr.out(pName, false);
                                b_extd = true;
                            }
                            ;
                        }
                        wr.out(" {", true);
                        wr.indent(1);
                        i_1 = 0;
                        _a.label = 7;
                    case 7:
                        if (!(i_1 < cl.variables.length)) return [3 /*break*/, 10];
                        pvar = cl.variables[i_1];
                        return [4 /*yield*/, this.writeClassVarDef(pvar, ctx, wr)];
                    case 8:
                        _a.sent();
                        _a.label = 9;
                    case 9:
                        i_1++;
                        return [3 /*break*/, 7];
                    case 10:
                        ;
                        if (!(is_react_native == false)) return [3 /*break*/, 19];
                        wr.out("constructor(", false);
                        if (!cl.has_constructor) return [3 /*break*/, 12];
                        constr = cl.constructor_fn;
                        return [4 /*yield*/, this.writeArgsDef(constr, ctx, wr)];
                    case 11:
                        _a.sent();
                        _a.label = 12;
                    case 12:
                        wr.out(") {", true);
                        wr.indent(1);
                        if (b_extd) {
                            wr.out("super()", true);
                        }
                        i_2 = 0;
                        _a.label = 13;
                    case 13:
                        if (!(i_2 < cl.variables.length)) return [3 /*break*/, 16];
                        pvar_1 = cl.variables[i_2];
                        return [4 /*yield*/, this.writeVarInitDef(pvar_1.node, ctx, wr)];
                    case 14:
                        _a.sent();
                        _a.label = 15;
                    case 15:
                        i_2++;
                        return [3 /*break*/, 13];
                    case 16:
                        ;
                        if (!cl.has_constructor) return [3 /*break*/, 18];
                        constr_1 = cl.constructor_fn;
                        wr.newline();
                        subCtx = constr_1.fnCtx;
                        subCtx.is_function = true;
                        return [4 /*yield*/, this.WalkNode(constr_1.fnBody, subCtx, wr)];
                    case 17:
                        _a.sent();
                        _a.label = 18;
                    case 18:
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 19;
                    case 19:
                        i_3 = 0;
                        _a.label = 20;
                    case 20:
                        if (!(i_3 < cl.defined_variants.length)) return [3 /*break*/, 30];
                        fnVar = cl.defined_variants[i_3];
                        mVs = cl.method_variants[fnVar];
                        i_4 = 0;
                        _a.label = 21;
                    case 21:
                        if (!(i_4 < mVs.variants.length)) return [3 /*break*/, 28];
                        variant = mVs.variants[i_4];
                        if (variant.nameNode.hasFlag("async")) {
                            wr.out("async ", false);
                        }
                        wr.out(("" + variant.compiledName) + " (", false);
                        return [4 /*yield*/, this.writeArgsDef(variant, ctx, wr)];
                    case 22:
                        _a.sent();
                        wr.out(")", false);
                        if (!this.target_typescript) return [3 /*break*/, 24];
                        wr.out(" : ", false);
                        if (variant.nameNode.hasFlag("async")) {
                            wr.out(" Promise<", false);
                        }
                        return [4 /*yield*/, this.writeTypeDef(variant.nameNode, ctx, wr)];
                    case 23:
                        _a.sent();
                        if (variant.nameNode.hasFlag("async")) {
                            wr.out(">", false);
                        }
                        wr.out(" ", false);
                        _a.label = 24;
                    case 24:
                        wr.out(" {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx_1 = variant.fnCtx;
                        subCtx_1.is_function = true;
                        return [4 /*yield*/, operatorsOf_13.forEach_20(subCtx_1.localVariables, (function (item, index) {
                                if (item.is_register) {
                                    wr.out("// register " + item.name, true);
                                }
                            }))];
                    case 25:
                        _a.sent();
                        return [4 /*yield*/, this.WalkNode(variant.fnBody, subCtx_1, wr)];
                    case 26:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("};", true);
                        _a.label = 27;
                    case 27:
                        i_4++;
                        return [3 /*break*/, 21];
                    case 28:
                        ;
                        _a.label = 29;
                    case 29:
                        i_3++;
                        return [3 /*break*/, 20];
                    case 30:
                        ;
                        if (!this.target_typescript) return [3 /*break*/, 37];
                        i_5 = 0;
                        _a.label = 31;
                    case 31:
                        if (!(i_5 < cl.static_methods.length)) return [3 /*break*/, 36];
                        variant_1 = cl.static_methods[i_5];
                        if (variant_1.nameNode.hasFlag("main")) {
                            return [3 /*break*/, 35];
                        }
                        wr.out("// typescript static ", true);
                        wr.out("static ", false);
                        if (variant_1.nameNode.hasFlag("async")) {
                            wr.out("async ", false);
                        }
                        wr.out(("" + variant_1.compiledName) + " (", false);
                        return [4 /*yield*/, this.writeArgsDef(variant_1, ctx, wr)];
                    case 32:
                        _a.sent();
                        wr.out(")", false);
                        wr.out(" : ", false);
                        if (variant_1.nameNode.hasFlag("async")) {
                            wr.out(" Promise<", false);
                        }
                        return [4 /*yield*/, this.writeTypeDef(variant_1.nameNode, ctx, wr)];
                    case 33:
                        _a.sent();
                        if (variant_1.nameNode.hasFlag("async")) {
                            wr.out("> ", false);
                        }
                        wr.out(" ", false);
                        wr.out(" {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx_2 = variant_1.fnCtx;
                        subCtx_2.is_function = true;
                        return [4 /*yield*/, this.WalkNode(variant_1.fnBody, subCtx_2, wr)];
                    case 34:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("};", true);
                        _a.label = 35;
                    case 35:
                        i_5++;
                        return [3 /*break*/, 31];
                    case 36:
                        ;
                        _a.label = 37;
                    case 37:
                        wr.indent(-1);
                        wr.out("}", true);
                        if (!(this.target_typescript == false)) return [3 /*break*/, 45];
                        i_6 = 0;
                        _a.label = 38;
                    case 38:
                        if (!(i_6 < cl.static_methods.length)) return [3 /*break*/, 44];
                        variant_2 = cl.static_methods[i_6];
                        if (!variant_2.nameNode.hasFlag("main")) return [3 /*break*/, 39];
                        return [3 /*break*/, 43];
                    case 39:
                        asyncKeyword = "";
                        if (variant_2.nameNode.hasFlag("async")) {
                            asyncKeyword = "async ";
                        }
                        wr.out(((((cl.name + ".") + variant_2.compiledName) + " = ") + asyncKeyword) + "function(", false);
                        return [4 /*yield*/, this.writeArgsDef(variant_2, ctx, wr)];
                    case 40:
                        _a.sent();
                        wr.out(") {", true);
                        _a.label = 41;
                    case 41:
                        wr.indent(1);
                        wr.newline();
                        subCtx_3 = variant_2.fnCtx;
                        subCtx_3.is_function = true;
                        return [4 /*yield*/, this.WalkNode(variant_2.fnBody, subCtx_3, wr)];
                    case 42:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("};", true);
                        _a.label = 43;
                    case 43:
                        i_6++;
                        return [3 /*break*/, 38];
                    case 44:
                        ;
                        _a.label = 45;
                    case 45:
                        if (!(ctx.hasCompilerFlag("nodemodule") == false)) return [3 /*break*/, 50];
                        i_7 = 0;
                        _a.label = 46;
                    case 46:
                        if (!(i_7 < cl.static_methods.length)) return [3 /*break*/, 49];
                        variant_3 = cl.static_methods[i_7];
                        ctx.disableCurrentClass();
                        if (!(variant_3.nameNode.hasFlag("main") && (variant_3.nameNode.code.filename == ctx.getRootFile()))) return [3 /*break*/, 48];
                        asyncKeyword_1 = "";
                        if (variant_3.nameNode.hasFlag("async")) {
                            asyncKeyword_1 = "async ";
                        }
                        theEnd_1 = wr.getTag("file_end");
                        theEnd_1.out("/* static JavaSript main routine at the end of the JS file */", false);
                        theEnd_1.newline();
                        theEnd_1.out(asyncKeyword_1 + "function __js_main() {", true);
                        theEnd_1.indent(1);
                        return [4 /*yield*/, this.WalkNode(variant_3.fnBody, ctx, theEnd_1)];
                    case 47:
                        _a.sent();
                        theEnd_1.newline();
                        theEnd_1.indent(-1);
                        theEnd_1.out("}", true);
                        theEnd_1.out("__js_main();", true);
                        _a.label = 48;
                    case 48:
                        i_7++;
                        return [3 /*break*/, 46];
                    case 49:
                        ;
                        _a.label = 50;
                    case 50: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJavaScriptClassWriter.prototype.BuildAST = function (code_string) {
        var lang_code = new SourceCode(code_string);
        lang_code.filename = "services";
        var lang_parser = new RangerLispParser(lang_code);
        lang_parser.parse(false);
        var node = lang_parser.rootNode;
        return node;
    };
    ;
    RangerJavaScriptClassWriter.prototype.CreateServices = function (parser, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var root, serviceBlock, wr, codeNode, serviceClassDef, theEnd;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (ctx.hasCompilerFlag("client")) {
                            ctx.addError(CodeNode.blockNode(), "client service writing for target JavaScript is not implemented");
                            return [2 /*return*/];
                        }
                        root = ctx.getRoot();
                        serviceBlock = CodeNode.blockNode();
                        wr = new CodeWriter();
                        wr.out("class test_webservice {", true);
                        wr.indent(1);
                        wr.out("fn run () {", true);
                        wr.indent(1);
                        wr.out("def www (create_web_server)", true);
                        wr.out("prepare_server www", true);
                        return [4 /*yield*/, operatorsOf_13.forEach_25(root.appServices, (function (item, index) {
                                try {
                                    var paramList = item.getThird();
                                    var param = paramList.getFirst();
                                    wr.out(("www.post_route(\"/" + item.appGUID) + "\" {", true);
                                    wr.indent(1);
                                    wr.out(("def obj (" + param.type_name) + ".fromDictionary( (from_string (get_post_data req ))) )", true);
                                    wr.out("def service (new appServices)", true);
                                    wr.out(("def data (service." + item.appGUID) + "(obj))", true);
                                    wr.out("res.send((to_string (data.toDictionary())))", true);
                                    wr.indent(-1);
                                    wr.out("})", true);
                                    var nn = item.getSecond();
                                    nn.vref = item.appGUID;
                                    var params = item.getThird();
                                    var block_index = 3;
                                    var ch_len = (item.children.length) - 1;
                                    for (var i = 0; i < item.children.length; i++) {
                                        var cb = item.children[i];
                                        if (i > 3) {
                                            if ((cb.vref.length) > 0) {
                                                if (ctx.hasCompilerFlag(cb.vref) && (i < ch_len)) {
                                                    block_index = i + 1;
                                                }
                                            }
                                        }
                                    }
                                    ;
                                    var codeBlock = item.getChild(block_index);
                                    serviceBlock.children.push(CodeNode.op3("fn", [nn, params, codeBlock]));
                                }
                                catch (e) {
                                    ctx.addError(item, "Invalid service function");
                                }
                            }))];
                    case 1:
                        _a.sent();
                        wr.indent(-1);
                        wr.out("www.startServer( 1777, {", true);
                        wr.indent(1);
                        wr.out("print \"Server started\"", true);
                        wr.indent(-1);
                        wr.out("}", true);
                        wr.out("}", true);
                        wr.indent(-1);
                        wr.out("}", true);
                        codeNode = this.BuildAST(wr.getCode());
                        serviceClassDef = CodeNode.op3("class", [CodeNode.vref1("appServices"), serviceBlock]);
                        theEnd = orig_wr.getTag("file_end");
                        return [4 /*yield*/, parser.WalkCollectMethods(serviceClassDef, root, theEnd)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, parser.WalkCollectMethods(codeNode, root, theEnd)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, parser.WalkNode(serviceClassDef, root, theEnd)];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, parser.WalkNode(codeNode, root, theEnd)];
                    case 5:
                        _a.sent();
                        theEnd.out("(new test_webservice).run();", true);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJavaScriptClassWriter.prototype.CreatePages = function (parser, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var wr;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        wr = orig_wr.getFileWriter(".", "pages.js");
                        wr.out("class theApplicationClass {", true);
                        wr.indent(1);
                        return [4 /*yield*/, operatorsOf_13.forEach_25(ctx.appPages, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.CreatePage(parser, item, ctx, wr)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        wr.indent(-1);
                        wr.out("}", true);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJavaScriptClassWriter.prototype.CreatePage = function (parser, node, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var writer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        writer = new WebPageWriter();
                        writer.classWriter = this;
                        return [4 /*yield*/, writer.CreatePage(parser, node, ctx, orig_wr)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerJavaScriptClassWriter.prototype.writeNpmPackage = function (node, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var wr, opts, target_file;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        wr = orig_wr.getFileWriter(".", "package.json");
                        opts = ["name", "version", "description", "author", "license"];
                        wr.out("{", true);
                        wr.indent(1);
                        return [4 /*yield*/, operatorsOf.forEach_12(opts, (function (item, index) {
                                if (ctx.hasCompilerSetting(item) == false) {
                                    ctx.addError(node, ("NPM package requires option -" + item) + "=<value>");
                                }
                                else {
                                    wr.out(((("\"" + item) + "\" : \"") + ctx.getCompilerSetting(item)) + "\",", true);
                                }
                            }))];
                    case 1:
                        _a.sent();
                        target_file = ctx.getCompilerSetting("o");
                        if (ctx.hasCompilerFlag("nodecli")) {
                            wr.out(((("\"bin\": {\"" + ctx.getCompilerSetting("name")) + "\":\"") + target_file) + "\"},", true);
                        }
                        wr.out("\"scripts\":{},", true);
                        wr.out(("\"main\":\"" + target_file) + "\"", true);
                        wr.indent(-1);
                        wr.out("}", true);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    return RangerJavaScriptClassWriter;
}(RangerGenericClassWriter));
exports.RangerJavaScriptClassWriter = RangerJavaScriptClassWriter;
var RangerRangerClassWriter = /** @class */ (function (_super) {
    __extends(RangerRangerClassWriter, _super);
    function RangerRangerClassWriter() {
        return _super.call(this) || this;
    }
    RangerRangerClassWriter.prototype.adjustType = function (tn) {
        if (tn == "this") {
            return "this";
        }
        return tn;
    };
    ;
    RangerRangerClassWriter.prototype.getObjectTypeString = function (type_string, ctx) {
        return type_string;
    };
    ;
    RangerRangerClassWriter.prototype.getTypeString = function (type_string) {
        return type_string;
    };
    ;
    RangerRangerClassWriter.prototype.writeArrayLiteral = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        wr.out("([] ", false);
                        return [4 /*yield*/, operatorsOf.forEach_15(node.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (index > 0) {
                                                wr.out(" ", false);
                                            }
                                            return [4 /*yield*/, this.WalkNode(item, ctx, wr)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        wr.out(")", false);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerRangerClassWriter.prototype.writeTypeDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var v_type, t_name, a_name, k_name;
            return __generator(this, function (_a) {
                v_type = node.value_type;
                t_name = node.type_name;
                a_name = node.array_type;
                k_name = node.key_type;
                if (((v_type == 10) || (v_type == 11)) || (v_type == 0)) {
                    v_type = node.typeNameAsType(ctx);
                }
                if (node.eval_type != 0) {
                    v_type = node.eval_type;
                    if ((node.eval_type_name.length) > 0) {
                        t_name = node.eval_type_name;
                    }
                    if ((node.eval_array_type.length) > 0) {
                        a_name = node.eval_array_type;
                    }
                    if ((node.eval_key_type.length) > 0) {
                        k_name = node.eval_key_type;
                    }
                }
                if (v_type == 7) {
                    wr.out(((("[" + k_name) + ":") + a_name) + "]", false);
                    return [2 /*return*/];
                }
                if (v_type == 6) {
                    wr.out(("[" + a_name) + "]", false);
                    return [2 /*return*/];
                }
                wr.out(t_name, false);
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerRangerClassWriter.prototype.WriteVRef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                wr.out(node.vref, false);
                return [2 /*return*/];
            });
        });
    };
    ;
    RangerRangerClassWriter.prototype.WriteVRefWithOpt = function (node, ctx, wr) {
        wr.out(node.vref, false);
        var flags = ["optional", "weak", "strong", "temp", "lives", "returns", "returnvalue"];
        var some_set = false;
        for (var i = 0; i < flags.length; i++) {
            var flag = flags[i];
            if (node.hasFlag(flag)) {
                if (false == some_set) {
                    wr.out("@(", false);
                    some_set = true;
                }
                else {
                    wr.out(" ", false);
                }
                wr.out(flag, false);
            }
        }
        ;
        if (some_set) {
            wr.out(")", false);
        }
    };
    ;
    RangerRangerClassWriter.prototype.writeVarDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var nn, p, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasParamDesc) return [3 /*break*/, 4];
                        nn = node.children[1];
                        p = nn.paramDesc;
                        wr.out("def ", false);
                        this.WriteVRefWithOpt(nn, ctx, wr);
                        wr.out(":", false);
                        return [4 /*yield*/, this.writeTypeDef(p.nameNode, ctx, wr)];
                    case 1:
                        _a.sent();
                        if (!((node.children.length) > 2)) return [3 /*break*/, 3];
                        wr.out(" ", false);
                        ctx.setInExpr();
                        value = node.getThird();
                        return [4 /*yield*/, this.WalkNode(value, ctx, wr)];
                    case 2:
                        _a.sent();
                        ctx.unsetInExpr();
                        _a.label = 3;
                    case 3:
                        wr.newline();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerRangerClassWriter.prototype.CreateLambdaCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fName, args, i, arg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fName = node.children[0];
                        args = node.children[1];
                        return [4 /*yield*/, this.WriteVRef(fName, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out("(", false);
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < args.children.length)) return [3 /*break*/, 5];
                        arg = args.children[i];
                        if (i > 0) {
                            wr.out(" ", false);
                        }
                        return [4 /*yield*/, this.WalkNode(arg, ctx, wr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        wr.out(")", false);
                        if (ctx.expressionLevel() == 0) {
                            wr.out(" ", true);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerRangerClassWriter.prototype.CreateLambda = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var lambdaCtx, nn, args, body, i, arg, newLambdaCtx, i_1, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        lambdaCtx = node.lambda_ctx;
                        nn = node.children[0];
                        args = node.children[1];
                        body = node.children[2];
                        wr.out("(fn:", false);
                        return [4 /*yield*/, this.writeTypeDef(nn, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out(" (", false);
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < args.children.length)) return [3 /*break*/, 5];
                        arg = args.children[i];
                        if (i > 0) {
                            wr.out(" ", false);
                        }
                        this.WriteVRefWithOpt(arg, ctx, wr);
                        wr.out(":", false);
                        return [4 /*yield*/, this.writeTypeDef(arg, ctx, wr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        wr.out(")", false);
                        wr.out(" { ", true);
                        wr.indent(1);
                        lambdaCtx.restartExpressionLevel();
                        newLambdaCtx = lambdaCtx.fork();
                        newLambdaCtx.targetLangName = "ranger";
                        i_1 = 0;
                        _a.label = 6;
                    case 6:
                        if (!(i_1 < body.children.length)) return [3 /*break*/, 9];
                        item = body.children[i_1];
                        return [4 /*yield*/, this.WalkNode(item, newLambdaCtx, wr)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        i_1++;
                        return [3 /*break*/, 6];
                    case 9:
                        ;
                        wr.newline();
                        wr.indent(-1);
                        wr.out("})", true);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerRangerClassWriter.prototype.writeFnCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fc, givenArgs, i, arg, defVal, fc_1, n;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasFnCall) return [3 /*break*/, 10];
                        if (ctx.expressionLevel() > 0) {
                            wr.out("(", false);
                        }
                        fc = node.getFirst();
                        return [4 /*yield*/, this.WriteVRef(fc, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out("(", false);
                        givenArgs = node.getSecond();
                        ctx.setInExpr();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < node.fnDesc.params.length)) return [3 /*break*/, 9];
                        arg = node.fnDesc.params[i];
                        if (i > 0) {
                            wr.out(" ", false);
                        }
                        if (!((givenArgs.children.length) <= i)) return [3 /*break*/, 6];
                        defVal = arg.nameNode.getFlag("default");
                        if (!(typeof (defVal) !== "undefined" && defVal != null)) return [3 /*break*/, 4];
                        fc_1 = defVal.vref_annotation.getFirst();
                        return [4 /*yield*/, this.WalkNode(fc_1, ctx, wr)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        ctx.addError(node, "Default argument was missing");
                        _a.label = 5;
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        n = givenArgs.children[i];
                        return [4 /*yield*/, this.WalkNode(n, ctx, wr)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        i++;
                        return [3 /*break*/, 2];
                    case 9:
                        ;
                        ctx.unsetInExpr();
                        wr.out(")", false);
                        if (ctx.expressionLevel() > 0) {
                            wr.out(")", false);
                        }
                        if (ctx.expressionLevel() == 0) {
                            wr.newline();
                        }
                        _a.label = 10;
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerRangerClassWriter.prototype.writeNewCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cl, constr, givenArgs, i, arg, n;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasNewOper) return [3 /*break*/, 6];
                        cl = node.clDesc;
                        /** unused:  const fc : CodeNode  = node.getSecond()   **/
                        wr.out("(new " + node.clDesc.name, false);
                        wr.out("(", false);
                        constr = cl.constructor_fn;
                        givenArgs = node.getThird();
                        if (!(typeof (constr) !== "undefined" && constr != null)) return [3 /*break*/, 5];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < constr.params.length)) return [3 /*break*/, 4];
                        arg = constr.params[i];
                        n = givenArgs.children[i];
                        if (i > 0) {
                            wr.out(" ", false);
                        }
                        if (!(true || ((typeof (arg.nameNode) !== "undefined" && arg.nameNode != null)))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.WalkNode(n, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        _a.label = 5;
                    case 5:
                        wr.out("))", false);
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerRangerClassWriter.prototype.writeArgsDef = function (fnDesc, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var i, arg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < fnDesc.params.length)) return [3 /*break*/, 4];
                        arg = fnDesc.params[i];
                        if (i > 0) {
                            wr.out(",", false);
                        }
                        wr.out(" ", false);
                        this.WriteVRefWithOpt(arg.nameNode, ctx, wr);
                        wr.out(":", false);
                        return [4 /*yield*/, this.writeTypeDef(arg.nameNode, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerRangerClassWriter.prototype.CreateCallExpression = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var obj, method, args, i, arg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.has_call) return [3 /*break*/, 6];
                        obj = node.getSecond();
                        method = node.getThird();
                        args = node.children[3];
                        wr.out("(call ", false);
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(obj, ctx, wr)];
                    case 1:
                        _a.sent();
                        ctx.unsetInExpr();
                        wr.out(" ", false);
                        wr.out(method.vref, false);
                        wr.out("(", false);
                        ctx.setInExpr();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < args.children.length)) return [3 /*break*/, 5];
                        arg = args.children[i];
                        if (i > 0) {
                            wr.out(" ", false);
                        }
                        return [4 /*yield*/, this.WalkNode(arg, ctx, wr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        ;
                        ctx.unsetInExpr();
                        wr.out("))", false);
                        if (ctx.expressionLevel() == 0) {
                        }
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerRangerClassWriter.prototype.writeClass = function (node, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cl, wr, importFork, i, pName, i_1, pvar, constr, subCtx, i_2, variant, subCtx_1, i_3, fnVar, mVs, i_4, variant_1, subCtx_2, import_list, i_5, codeStr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cl = node.clDesc;
                        if (typeof (cl) === "undefined") {
                            return [2 /*return*/];
                        }
                        wr = orig_wr;
                        importFork = wr.fork();
                        wr.out("", true);
                        wr.out("class " + cl.name, false);
                        wr.out(" { ", true);
                        wr.indent(1);
                        if ((cl.extends_classes.length) > 0) {
                            wr.out("Extends(", false);
                            for (i = 0; i < cl.extends_classes.length; i++) {
                                pName = cl.extends_classes[i];
                                wr.out(pName, false);
                            }
                            ;
                            wr.out(")", true);
                        }
                        wr.createTag("utilities");
                        i_1 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_1 < cl.variables.length)) return [3 /*break*/, 4];
                        pvar = cl.variables[i_1];
                        return [4 /*yield*/, this.writeVarDef(pvar.node, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i_1++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        if (!cl.has_constructor) return [3 /*break*/, 7];
                        constr = cl.constructor_fn;
                        wr.out("", true);
                        wr.out("Constructor (", false);
                        return [4 /*yield*/, this.writeArgsDef(constr, ctx, wr)];
                    case 5:
                        _a.sent();
                        wr.out(" ) {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx = constr.fnCtx;
                        subCtx.is_function = true;
                        return [4 /*yield*/, this.WalkNode(constr.fnBody, subCtx, wr)];
                    case 6:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 7;
                    case 7:
                        i_2 = 0;
                        _a.label = 8;
                    case 8:
                        if (!(i_2 < cl.static_methods.length)) return [3 /*break*/, 15];
                        variant = cl.static_methods[i_2];
                        wr.out("", true);
                        if (!variant.nameNode.hasFlag("main")) return [3 /*break*/, 9];
                        wr.out("sfn m@(main):void () {", true);
                        return [3 /*break*/, 12];
                    case 9:
                        wr.out("sfn ", false);
                        this.WriteVRefWithOpt(variant.nameNode, ctx, wr);
                        wr.out(":", false);
                        return [4 /*yield*/, this.writeTypeDef(variant.nameNode, ctx, wr)];
                    case 10:
                        _a.sent();
                        wr.out(" (", false);
                        return [4 /*yield*/, this.writeArgsDef(variant, ctx, wr)];
                    case 11:
                        _a.sent();
                        wr.out(") {", true);
                        _a.label = 12;
                    case 12:
                        wr.indent(1);
                        wr.newline();
                        subCtx_1 = variant.fnCtx;
                        subCtx_1.is_function = true;
                        return [4 /*yield*/, this.WalkNode(variant.fnBody, subCtx_1, wr)];
                    case 13:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 14;
                    case 14:
                        i_2++;
                        return [3 /*break*/, 8];
                    case 15:
                        ;
                        i_3 = 0;
                        _a.label = 16;
                    case 16:
                        if (!(i_3 < cl.defined_variants.length)) return [3 /*break*/, 24];
                        fnVar = cl.defined_variants[i_3];
                        mVs = cl.method_variants[fnVar];
                        i_4 = 0;
                        _a.label = 17;
                    case 17:
                        if (!(i_4 < mVs.variants.length)) return [3 /*break*/, 22];
                        variant_1 = mVs.variants[i_4];
                        wr.out("", true);
                        wr.out("fn ", false);
                        this.WriteVRefWithOpt(variant_1.nameNode, ctx, wr);
                        wr.out(":", false);
                        return [4 /*yield*/, this.writeTypeDef(variant_1.nameNode, ctx, wr)];
                    case 18:
                        _a.sent();
                        wr.out(" ", false);
                        wr.out("(", false);
                        return [4 /*yield*/, this.writeArgsDef(variant_1, ctx, wr)];
                    case 19:
                        _a.sent();
                        wr.out(") {", true);
                        wr.indent(1);
                        wr.newline();
                        subCtx_2 = variant_1.fnCtx;
                        subCtx_2.is_function = true;
                        return [4 /*yield*/, this.WalkNode(variant_1.fnBody, subCtx_2, wr)];
                    case 20:
                        _a.sent();
                        wr.newline();
                        wr.indent(-1);
                        wr.out("}", true);
                        _a.label = 21;
                    case 21:
                        i_4++;
                        return [3 /*break*/, 17];
                    case 22:
                        ;
                        _a.label = 23;
                    case 23:
                        i_3++;
                        return [3 /*break*/, 16];
                    case 24:
                        ;
                        wr.indent(-1);
                        wr.out("}", true);
                        import_list = wr.getImports();
                        for (i_5 = 0; i_5 < import_list.length; i_5++) {
                            codeStr = import_list[i_5];
                            importFork.out(("Import \"" + codeStr) + "\"", true);
                        }
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    return RangerRangerClassWriter;
}(RangerGenericClassWriter));
exports.RangerRangerClassWriter = RangerRangerClassWriter;
var OpList = /** @class */ (function () {
    function OpList() {
        this.list = [];
    }
    return OpList;
}());
exports.OpList = OpList;
var RangerActiveOperators = /** @class */ (function () {
    function RangerActiveOperators() {
        this.opHash = {};
        this.initialized = false;
    }
    RangerActiveOperators.prototype.fork = function (fromOperator) {
        var newOps = new RangerActiveOperators();
        newOps.parent = this;
        for (var i = 0; i < fromOperator.children.length; i++) {
            var lch = fromOperator.children[i];
            var fc = lch.getFirst();
            if (fc.vref == "operators") {
                var n = lch.getSecond();
                newOps.stdCommands = n;
            }
        }
        ;
        return newOps;
    };
    ;
    RangerActiveOperators.prototype.initializeOpCache = function () {
        return __awaiter(this, void 0, void 0, function () {
            var i, lch, fc, opList, newOpList;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, operatorsOf_13.forEach_19(this.opHash, (function (item, index) {
                            item.list.length = 0;
                        }))];
                    case 1:
                        _a.sent();
                        for (i = 0; i < this.stdCommands.children.length; i++) {
                            lch = this.stdCommands.children[i];
                            fc = lch.getFirst();
                            if ((typeof (this.opHash[fc.vref]) != "undefined" && this.opHash.hasOwnProperty(fc.vref))) {
                                opList = (this.opHash[fc.vref]);
                                opList.list.push(lch);
                            }
                            else {
                                newOpList = new OpList();
                                this.opHash[fc.vref] = newOpList;
                                newOpList.list.push(lch);
                            }
                        }
                        ;
                        this.initialized = true;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerActiveOperators.prototype.getOperators = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var results, items;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        results = [];
                        if (!(false == this.initialized)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.initializeOpCache()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        items = this.opHash[name];
                        if ((typeof (items) !== "undefined" && items != null)) {
                            return [2 /*return*/, items.list];
                        }
                        return [2 /*return*/, results];
                }
            });
        });
    };
    ;
    RangerActiveOperators.prototype.initFrom = function (main) {
        var lang;
        for (var i = 0; i < main.children.length; i++) {
            var m = main.children[i];
            var fc = m.getFirst();
            if (fc.vref == "language") {
                lang = m;
            }
        }
        ;
        if (typeof (lang) === "undefined") {
            return;
        }
        /** unused:  let cmds : CodeNode    **/
        var langNodes = lang.children[1];
        for (var i_1 = 0; i_1 < langNodes.children.length; i_1++) {
            var lch = langNodes.children[i_1];
            var fc_1 = lch.getFirst();
            if (fc_1.vref == "commands") {
                /** unused:  const n : CodeNode  = lch.getSecond()   **/
                this.stdCommands = lch.getSecond();
            }
        }
        ;
        return;
    };
    ;
    return RangerActiveOperators;
}());
exports.RangerActiveOperators = RangerActiveOperators;
var LiveCompiler = /** @class */ (function () {
    function LiveCompiler() {
        this.hasCreatedPolyfill = {}; /** note: unused */
        this.repeat_index = 0;
        this.installedFile = {};
    }
    LiveCompiler.prototype.initWriter = function (ctx) {
        if ((typeof (this.langWriter) !== "undefined" && this.langWriter != null)) {
            return;
        }
        var langName = operatorsOf_21.getTargetLang_22(ctx);
        console.log("Livecompiler starting with language => " + langName);
        switch (langName) {
            case "go":
                this.langWriter = new RangerGolangClassWriter();
                break;
            case "scala":
                this.langWriter = new RangerScalaClassWriter();
                break;
            case "java7":
                this.langWriter = new RangerJava7ClassWriter();
                break;
            case "swift3":
                this.langWriter = new RangerSwift3ClassWriter();
                break;
            case "kotlin":
                this.langWriter = new RangerKotlinClassWriter();
                break;
            case "php":
                this.langWriter = new RangerPHPClassWriter();
                break;
            case "cpp":
                this.langWriter = new RangerCppClassWriter();
                break;
            case "csharp":
                this.langWriter = new RangerCSharpClassWriter();
                break;
            case "es6":
                this.langWriter = new RangerJavaScriptClassWriter();
                break;
            case "ranger":
                this.langWriter = new RangerRangerClassWriter();
                break;
        }
        ;
        if ((typeof (this.langWriter) !== "undefined" && this.langWriter != null)) {
            this.langWriter.compiler = this;
        }
        else {
            this.langWriter = new RangerGenericClassWriter();
            this.langWriter.compiler = this;
        }
    };
    ;
    LiveCompiler.prototype.EncodeString = function (node, ctx, wr) {
        /** unused:  const encoded_str : string  = ""   **/
        var str_length = node.string_value.length;
        var encoded_str_2 = "";
        var ii = 0;
        while (ii < str_length) {
            var ch = node.string_value.charCodeAt(ii);
            var cc = ch;
            switch (cc) {
                case 8:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(98));
                    break;
                case 9:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(116));
                    break;
                case 10:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(110));
                    break;
                case 12:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(102));
                    break;
                case 13:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(114));
                    break;
                case 34:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(34));
                    break;
                case 92:
                    encoded_str_2 = (encoded_str_2 + (String.fromCharCode(92))) + (String.fromCharCode(92));
                    break;
                default:
                    encoded_str_2 = encoded_str_2 + (String.fromCharCode(ch));
                    break;
            }
            ;
            ii = ii + 1;
        }
        ;
        return encoded_str_2;
    };
    ;
    LiveCompiler.prototype.WriteScalarValue = function (node, ctx, wr) {
        this.langWriter.WriteScalarValue(node, ctx, wr);
    };
    ;
    LiveCompiler.prototype.adjustType = function (tn) {
        if (tn == "this") {
            return "self";
        }
        return tn;
    };
    ;
    LiveCompiler.prototype.WriteVRef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.langWriter.WriteVRef(node, ctx, wr)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    LiveCompiler.prototype.writeTypeDef = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.langWriter.writeTypeDef(node, ctx, wr)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    LiveCompiler.prototype.CreateLambdaCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.langWriter.CreateLambdaCall(node, ctx, wr)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    LiveCompiler.prototype.CreateCallExpression = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.langWriter.CreateCallExpression(node, ctx, wr)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    LiveCompiler.prototype.CreateLambda = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.langWriter.CreateLambda(node, ctx, wr)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    LiveCompiler.prototype.getTypeString = function (str, ctx) {
        return "";
    };
    ;
    LiveCompiler.prototype.createPolyfill = function (code, ctx, wr) {
        var p_write = wr.getTag("utilities");
        if (((typeof (p_write.compiledTags[code]) != "undefined" && p_write.compiledTags.hasOwnProperty(code))) == false) {
            p_write.raw(code, true);
            p_write.compiledTags[code] = true;
        }
    };
    ;
    LiveCompiler.prototype.installFile = function (filename, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var env, fileData, file_wr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if ((typeof (this.installedFile[filename]) != "undefined" && this.installedFile.hasOwnProperty(filename))) {
                            return [2 /*return*/];
                        }
                        env = ctx.getEnv();
                        this.installedFile[filename] = true;
                        if (!operatorsOf_8.filec95exists_9(env, (operatorsOf_8.installc95directory_51(env) + "/"), filename)) return [3 /*break*/, 2];
                        return [4 /*yield*/, (new Promise(function (resolve) { require('fs').readFile((operatorsOf_8.installc95directory_51(env) + "/") + '/' + filename, 'utf8', function (err, data) { resolve(data); }); }))];
                    case 1:
                        fileData = _a.sent();
                        if ((typeof (fileData) !== "undefined" && fileData != null)) {
                            file_wr = wr.getFileWriter(".", filename);
                            file_wr.raw(fileData, false);
                        }
                        else {
                            console.log("did not get contents of " + filename);
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        console.log(("did not find installed file " + operatorsOf_8.installc95directory_51(env)) + filename);
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ;
    LiveCompiler.prototype.findOpCode = function (op, node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fnName, args, details, i, det, fc, match, all_matched, origCode, theCode, appCtx, stdFnName, stdClass, runCtx, b_failed, m, ii, arg, p, err_cnt, flowParser, TmpWr, err_delta, i_1, e, line_index, i_2, cc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fnName = op.children[1];
                        args = op.children[2];
                        if (!((op.children.length) > 3)) return [3 /*break*/, 12];
                        details = op.children[3];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < details.children.length)) return [3 /*break*/, 11];
                        det = details.children[i];
                        if (!((det.children.length) > 0)) return [3 /*break*/, 10];
                        fc = det.children[0];
                        if (!(fc.vref == "code")) return [3 /*break*/, 10];
                        match = new RangerArgMatch();
                        all_matched = match.matchArguments(args, node, ctx, 1);
                        if (all_matched == false) {
                            return [2 /*return*/];
                        }
                        origCode = det.children[1];
                        theCode = origCode.rebuildWithType(match, true);
                        appCtx = ctx.getRoot();
                        stdFnName = appCtx.createSignature(fnName.vref, (fnName.vref + theCode.getCode()));
                        stdClass = ctx.findClass("RangerStaticMethods");
                        runCtx = appCtx.fork();
                        b_failed = false;
                        if (!(false == ((typeof (stdClass.defined_static_methods[stdFnName]) != "undefined" && stdClass.defined_static_methods.hasOwnProperty(stdFnName))))) return [3 /*break*/, 3];
                        runCtx.setInMethod();
                        m = new RangerAppFunctionDesc();
                        m.name = stdFnName;
                        m.node = op;
                        m.is_static = true;
                        m.nameNode = fnName;
                        m.fnBody = theCode;
                        for (ii = 0; ii < args.children.length; ii++) {
                            arg = args.children[ii];
                            p = new RangerAppParamDesc();
                            p.name = arg.vref;
                            p.value_type = arg.value_type;
                            p.node = arg;
                            p.nameNode = arg;
                            p.refType = 1;
                            p.varType = 4;
                            m.params.push(p);
                            arg.hasParamDesc = true;
                            arg.paramDesc = p;
                            arg.eval_type = arg.value_type;
                            arg.eval_type_name = arg.type_name;
                            runCtx.defineVariable(p.name, p);
                        }
                        ;
                        stdClass.addStaticMethod(m);
                        err_cnt = ctx.compilerErrors.length;
                        flowParser = new RangerFlowParser();
                        TmpWr = new CodeWriter();
                        return [4 /*yield*/, flowParser.WalkNode(theCode, runCtx, TmpWr)];
                    case 2:
                        _a.sent();
                        runCtx.unsetInMethod();
                        err_delta = (ctx.compilerErrors.length) - err_cnt;
                        if (err_delta > 0) {
                            b_failed = true;
                            console.log("Had following compiler errors:");
                            for (i_1 = 0; i_1 < ctx.compilerErrors.length; i_1++) {
                                e = ctx.compilerErrors[i_1];
                                if (i_1 < err_cnt) {
                                    continue;
                                }
                                line_index = e.node.getLine();
                                console.log((e.node.getFilename() + " Line: ") + line_index);
                                console.log(e.description);
                                console.log(e.node.getLineString(line_index));
                            }
                            ;
                        }
                        else {
                            console.log("no errors found");
                        }
                        _a.label = 3;
                    case 3:
                        if (!b_failed) return [3 /*break*/, 4];
                        wr.out("/* custom operator compilation failed */ ", false);
                        return [3 /*break*/, 9];
                    case 4:
                        wr.out(("RangerStaticMethods." + stdFnName) + "(", false);
                        i_2 = 0;
                        _a.label = 5;
                    case 5:
                        if (!(i_2 < node.children.length)) return [3 /*break*/, 8];
                        cc = node.children[i_2];
                        if (i_2 == 0) {
                            return [3 /*break*/, 7];
                        }
                        if (i_2 > 1) {
                            wr.out(", ", false);
                        }
                        return [4 /*yield*/, this.WalkNode(cc, ctx, wr)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7:
                        i_2++;
                        return [3 /*break*/, 5];
                    case 8:
                        ;
                        wr.out(")", false);
                        _a.label = 9;
                    case 9: return [2 /*return*/];
                    case 10:
                        i++;
                        return [3 /*break*/, 1];
                    case 11:
                        ;
                        _a.label = 12;
                    case 12: return [2 /*return*/];
                }
            });
        });
    };
    ;
    LiveCompiler.prototype.findOpTemplate = function (op, node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var langName, rv, opDef, details, _loop_7, det, tpl, i, state_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        langName = operatorsOf_21.getTargetLang_22(ctx);
                        opDef = op;
                        if (!((op.children.length) > 3)) return [3 /*break*/, 5];
                        details = op.children[3];
                        _loop_7 = function (i) {
                            var fc, tplList, i_1, tplName, tplImpl, is_ts, opNameNode, opArgs, rangerTpl_2, cnt_5;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        det = details.children[i];
                                        if (!((det.children.length) > 0)) return [3 /*break*/, 2];
                                        fc = det.children[0];
                                        if (!(fc.vref == "templates")) return [3 /*break*/, 2];
                                        tplList = det.children[1];
                                        for (i_1 = 0; i_1 < tplList.children.length; i_1++) {
                                            tpl = tplList.children[i_1];
                                            tplName = tpl.getFirst();
                                            tplImpl = void 0;
                                            tplImpl = tpl.getSecond();
                                            is_ts = ctx.hasCompilerFlag("typescript");
                                            if (is_ts && ((tplName.vref == "typescript") || (tplName.vref == "ts"))) {
                                                rv = tplImpl;
                                                return [2 /*return*/, { value: rv }];
                                            }
                                            if ((tplName.vref != "*") && (tplName.vref != langName)) {
                                                continue;
                                            }
                                            if (tplName.hasFlag("mutable")) {
                                                if (false == node.hasFlag("mutable")) {
                                                    continue;
                                                }
                                            }
                                            rv = tplImpl;
                                            return [2 /*return*/, { value: rv }];
                                        }
                                        ;
                                        if (!(langName == "ranger")) return [3 /*break*/, 2];
                                        opNameNode = opDef.getFirst();
                                        opArgs = opDef.getThird();
                                        rangerTpl_2 = CodeNode.fromList([CodeNode.newStr((("(" + opNameNode.vref) + " "))]);
                                        cnt_5 = 1;
                                        return [4 /*yield*/, operatorsOf.forEach_15(opArgs.children, (function (item, index) {
                                                if (item.type_name == "block") {
                                                    rangerTpl_2.children.push(CodeNode.fromList([CodeNode.vref1("block"), CodeNode.newInt(cnt_5)]));
                                                }
                                                else {
                                                    rangerTpl_2.children.push(CodeNode.fromList([CodeNode.vref1("e"), CodeNode.newInt(cnt_5)]));
                                                }
                                                cnt_5 = cnt_5 + 1;
                                            }))];
                                    case 1:
                                        _a.sent();
                                        rangerTpl_2.children.push(CodeNode.newStr(")"));
                                        rv = rangerTpl_2;
                                        _a.label = 2;
                                    case 2: return [2 /*return*/];
                                }
                            });
                        };
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < details.children.length)) return [3 /*break*/, 4];
                        return [5 /*yield**/, _loop_7(i)];
                    case 2:
                        state_4 = _a.sent();
                        if (typeof state_4 === "object")
                            return [2 /*return*/, state_4.value];
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        _a.label = 5;
                    case 5: return [2 /*return*/, rv];
                }
            });
        });
    };
    ;
    LiveCompiler.prototype.localCall = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node.hasFnCall) return [3 /*break*/, 2];
                        if (!(typeof (this.langWriter) !== "undefined" && this.langWriter != null)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.langWriter.writeFnCall(node, ctx, wr)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 2:
                        if (!node.hasNewOper) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.langWriter.writeNewCall(node, ctx, wr)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 4:
                        if (!node.hasVarDef) return [3 /*break*/, 9];
                        if (!node.disabled_node) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.langWriter.disabledVarDef(node, ctx, wr)];
                    case 5:
                        _a.sent();
                        return [3 /*break*/, 8];
                    case 6: return [4 /*yield*/, this.langWriter.writeVarDef(node, ctx, wr)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8: return [2 /*return*/, true];
                    case 9:
                        if (!node.hasClassDescription) return [3 /*break*/, 11];
                        return [4 /*yield*/, this.langWriter.writeClass(node, ctx, wr)];
                    case 10:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 11: return [2 /*return*/, false];
                }
            });
        });
    };
    ;
    LiveCompiler.prototype.WalkNode = function (node, in_ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var ctx, liveNodes, op, tplImpl, evalCtx, opName, _loop_8, this_4, item, i, state_5;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.initWriter(in_ctx);
                        if (node.disabled_node) {
                            return [2 /*return*/];
                        }
                        ctx = in_ctx;
                        if ((typeof (node.evalCtx) !== "undefined" && node.evalCtx != null)) {
                            ctx = node.evalCtx;
                        }
                        if ((node.register_name.length) > 0) {
                            if (ctx.expressionLevel() > 0) {
                                if ((node.reg_compiled_name.length) > 0) {
                                    wr.out(node.reg_compiled_name, false);
                                }
                                else {
                                    console.log((("Could not find compiled name for " + node.register_name) + " at ") + node.getCode());
                                }
                            }
                            return [2 /*return*/];
                        }
                        liveNodes = [];
                        if (!((node.register_expressions.length) > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, operatorsOf.forEach_15(node.register_expressions, (function (item, index) {
                                liveNodes.push(item);
                            }))];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, operatorsOf.forEach_15(liveNodes, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!(item.register_set == false)) return [3 /*break*/, 2];
                                        item.register_set = true;
                                        return [4 /*yield*/, this.WalkNode(item, ctx, wr)];
                                    case 1:
                                        _a.sent();
                                        _a.label = 2;
                                    case 2: return [2 /*return*/];
                                }
                            });
                        }); }))];
                    case 3:
                        _a.sent();
                        liveNodes.length = 0;
                        if (node.value_type == 12) {
                            return [2 /*return*/];
                        }
                        if (node.isPrimitive()) {
                            this.WriteScalarValue(node, ctx, wr);
                            return [2 /*return*/];
                        }
                        this.lastProcessedNode = node;
                        if (!node.isFirstVref("property")) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.langWriter.CreatePropertyGet(node, ctx, wr)];
                    case 4:
                        _a.sent();
                        return [2 /*return*/];
                    case 5:
                        if (node.is_plugin) {
                            return [2 /*return*/];
                        }
                        if (!node.is_array_literal) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.langWriter.writeArrayLiteral(node, ctx, wr)];
                    case 6:
                        _a.sent();
                        return [2 /*return*/];
                    case 7:
                        if (!(((node.value_type == 11) || (node.value_type == 7)) || (node.value_type == 6))) return [3 /*break*/, 9];
                        return [4 /*yield*/, this.WriteVRef(node, ctx, wr)];
                    case 8:
                        _a.sent();
                        return [2 /*return*/];
                    case 9:
                        if (!(node.value_type == 18)) return [3 /*break*/, 11];
                        return [4 /*yield*/, this.WriteVRef(node, ctx, wr)];
                    case 10:
                        _a.sent();
                        return [2 /*return*/];
                    case 11:
                        if (!((node.children.length) > 0)) return [3 /*break*/, 27];
                        if (!node.has_operator) return [3 /*break*/, 17];
                        op = ctx.findOperator(node);
                        return [4 /*yield*/, this.findOpTemplate(op, node, ctx, wr)];
                    case 12:
                        tplImpl = _a.sent();
                        evalCtx = ctx;
                        if ((typeof (node.evalCtx) !== "undefined" && node.evalCtx != null)) {
                            evalCtx = node.evalCtx;
                        }
                        if (!(typeof (tplImpl) !== "undefined" && tplImpl != null)) return [3 /*break*/, 14];
                        opName = op.getSecond();
                        if (opName.hasFlag("returns")) {
                            this.langWriter.release_local_vars(node, evalCtx, wr);
                        }
                        return [4 /*yield*/, this.walkCommandList(tplImpl, node, evalCtx, wr)];
                    case 13:
                        _a.sent();
                        return [3 /*break*/, 16];
                    case 14: return [4 /*yield*/, this.findOpCode(op, node, evalCtx, wr)];
                    case 15:
                        _a.sent();
                        _a.label = 16;
                    case 16: return [2 /*return*/];
                    case 17:
                        if (!node.is_direct_method_call) return [3 /*break*/, 19];
                        return [4 /*yield*/, this.langWriter.CreateMethodCall(node, ctx, wr)];
                    case 18:
                        _a.sent();
                        return [2 /*return*/];
                    case 19:
                        if (!node.has_lambda) return [3 /*break*/, 21];
                        return [4 /*yield*/, this.CreateLambda(node, ctx, wr)];
                    case 20:
                        _a.sent();
                        return [2 /*return*/];
                    case 21:
                        if (!node.has_lambda_call) return [3 /*break*/, 23];
                        return [4 /*yield*/, this.CreateLambdaCall(node, ctx, wr)];
                    case 22:
                        _a.sent();
                        return [2 /*return*/];
                    case 23:
                        if (node.is_part_of_chain) {
                            return [2 /*return*/];
                        }
                        if (!node.has_call) return [3 /*break*/, 25];
                        return [4 /*yield*/, this.CreateCallExpression(node, ctx, wr)];
                    case 24:
                        _a.sent();
                        return [2 /*return*/];
                    case 25:
                        if (!((node.children.length) > 1)) return [3 /*break*/, 27];
                        return [4 /*yield*/, this.localCall(node, ctx, wr)];
                    case 26:
                        if (_a.sent()) {
                            return [2 /*return*/];
                        }
                        _a.label = 27;
                    case 27:
                        if (!node.expression) return [3 /*break*/, 32];
                        _loop_8 = function (i) {
                            var liveNodes_2_1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        item = node.children[i];
                                        if ((node.didReturnAtIndex >= 0) && (node.didReturnAtIndex < i)) {
                                            return [2 /*return*/, "break"];
                                        }
                                        if (!node.is_block_node) return [3 /*break*/, 4];
                                        liveNodes_2_1 = [];
                                        if (!((item.register_expressions.length) > 0)) return [3 /*break*/, 2];
                                        return [4 /*yield*/, operatorsOf.forEach_15(item.register_expressions, (function (item, index) {
                                                liveNodes_2_1.push(item);
                                            }))];
                                    case 1:
                                        _a.sent();
                                        _a.label = 2;
                                    case 2:
                                        item.walkTreeUntil((function (item, i) {
                                            if (item.is_block_node) {
                                                return false;
                                            }
                                            return true;
                                        }));
                                        return [4 /*yield*/, operatorsOf.forEach_15(liveNodes_2_1, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0:
                                                            if (!(item.register_set == false)) return [3 /*break*/, 2];
                                                            item.register_set = true;
                                                            return [4 /*yield*/, this.WalkNode(item, ctx, wr)];
                                                        case 1:
                                                            _a.sent();
                                                            _a.label = 2;
                                                        case 2: return [2 /*return*/];
                                                    }
                                                });
                                            }); }))];
                                    case 3:
                                        _a.sent();
                                        _a.label = 4;
                                    case 4: return [4 /*yield*/, this_4.WalkNode(item, ctx, wr)];
                                    case 5:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_4 = this;
                        i = 0;
                        _a.label = 28;
                    case 28:
                        if (!(i < node.children.length)) return [3 /*break*/, 31];
                        return [5 /*yield**/, _loop_8(i)];
                    case 29:
                        state_5 = _a.sent();
                        if (state_5 === "break")
                            return [3 /*break*/, 31];
                        _a.label = 30;
                    case 30:
                        i++;
                        return [3 /*break*/, 28];
                    case 31:
                        ;
                        return [3 /*break*/, 34];
                    case 32:
                        if (!(node.value_type == 17)) return [3 /*break*/, 34];
                        return [4 /*yield*/, this.WriteVRef(node, ctx, wr)];
                    case 33:
                        _a.sent();
                        _a.label = 34;
                    case 34: return [2 /*return*/];
                }
            });
        });
    };
    ;
    LiveCompiler.prototype.walkCommandList = function (cmd, node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var opn, nn, i, c;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (ctx.expressionLevel() == 0) {
                            wr.newline();
                            if (operatorsOf_21.getTargetLang_22(ctx) == "swift3") {
                                opn = node.operator_node;
                                nn = opn.getSecond();
                                if (nn.type_name != "void") {
                                    wr.out("_ = ", false);
                                }
                            }
                        }
                        if (ctx.expressionLevel() > 1) {
                            wr.out("(", false);
                        }
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < cmd.children.length)) return [3 /*break*/, 4];
                        c = cmd.children[i];
                        return [4 /*yield*/, this.walkCommand(c, node, ctx, wr)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        if (ctx.expressionLevel() > 1) {
                            wr.out(")", false);
                        }
                        if (ctx.expressionLevel() == 0) {
                            wr.line_end(this.langWriter.lineEnding());
                            wr.newline();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    LiveCompiler.prototype.walkCommand = function (cmd, node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var cmdE, cmdArg, _a, idx, arg, root, sNode, idx_1, arg_1, idx_2, arg_2, sCtx, p, p_1, idx_3, arg_3, cc, idx_4, arg_4, setting, idx_5, arg_5, setting_1, idx_6, arg_6, cmdData, name_6, idx_7, arg_7, idx_8, arg_8, idx_9, arg_9, idx_10, arg_10, idx_11, arg_11, idx_12, arg_12, idx_13, arg_13, idx_14, arg_14, i, ch, idx_15, cmdToRepeat, i_1, ii, cc_1, fc, dc, dc_1, idx_16, cmdToRepeat_1, i_2, ii_1, cc_2, fc_1, dc_2, dc_3, idx_17, arg_15, i_3, ch_1, idx_18, arg_16, p_2, idx_19, arg_17, ss, ss_1, idx_20, arg_18, ss_2, ss_3, idx_21, arg_19, ss_4, ss_5, idx_22, arg_20, fName, p_write, code, classWr, package_name, idx_23, arg_21, p_write_1, newWriter, testCtx, p_str, mCtx, idx_24, arg_22, idx_25, arg_23, p_3, nameNode, tn, fc_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!cmd.expression) return [3 /*break*/, 83];
                        if ((cmd.children.length) < 2) {
                            ctx.addError(node, "Invalid command");
                            ctx.addError(cmd, "Invalid command");
                            return [2 /*return*/];
                        }
                        cmdE = cmd.getFirst();
                        cmdArg = cmd.getSecond();
                        _a = cmdE.vref;
                        switch (_a) {
                            case "service_id": return [3 /*break*/, 1];
                            case "log": return [3 /*break*/, 2];
                            case "str": return [3 /*break*/, 3];
                            case "block": return [3 /*break*/, 4];
                            case "varname": return [3 /*break*/, 7];
                            case "defvar": return [3 /*break*/, 8];
                            case "cc": return [3 /*break*/, 9];
                            case "optional_option": return [3 /*break*/, 10];
                            case "required_option": return [3 /*break*/, 11];
                            case "java_case": return [3 /*break*/, 12];
                            case "plugin": return [3 /*break*/, 15];
                            case "lambda": return [3 /*break*/, 16];
                            case "e": return [3 /*break*/, 19];
                            case "goset": return [3 /*break*/, 22];
                            case "pe": return [3 /*break*/, 25];
                            case "ptr": return [3 /*break*/, 28];
                            case "ptrsrc": return [3 /*break*/, 29];
                            case "nameof": return [3 /*break*/, 30];
                            case "list": return [3 /*break*/, 31];
                            case "repeat": return [3 /*break*/, 37];
                            case "repeat_from": return [3 /*break*/, 43];
                            case "comma": return [3 /*break*/, 49];
                            case "swift_rc": return [3 /*break*/, 55];
                            case "r_ktype": return [3 /*break*/, 56];
                            case "r_atype": return [3 /*break*/, 57];
                            case "r_atype_fname": return [3 /*break*/, 58];
                            case "custom": return [3 /*break*/, 59];
                            case "arraytype": return [3 /*break*/, 61];
                            case "java_class": return [3 /*break*/, 62];
                            case "rawtype": return [3 /*break*/, 63];
                            case "macro": return [3 /*break*/, 68];
                            case "install_file": return [3 /*break*/, 72];
                            case "create_polyfill": return [3 /*break*/, 74];
                            case "typeof": return [3 /*break*/, 75];
                            case "imp": return [3 /*break*/, 80];
                            case "atype": return [3 /*break*/, 81];
                        }
                        return [3 /*break*/, 82];
                    case 1:
                        idx = cmdArg.int_value;
                        if ((node.children.length) >= idx) {
                            arg = node.children[idx];
                            root = ctx.getRoot();
                            sNode = root.appServices[arg.vref];
                            if ((typeof (sNode) !== "undefined" && sNode != null)) {
                                wr.out(sNode.appGUID, false);
                            }
                            else {
                                ctx.addError(arg, "Service not found");
                            }
                        }
                        else {
                            ctx.addError(node, "Service not found");
                        }
                        return [3 /*break*/, 82];
                    case 2:
                        console.log(cmdArg.string_value);
                        return [3 /*break*/, 82];
                    case 3:
                        idx_1 = cmdArg.int_value;
                        if ((node.children.length) > idx_1) {
                            arg_1 = node.children[idx_1];
                            wr.out(arg_1.string_value, false);
                        }
                        return [3 /*break*/, 82];
                    case 4:
                        idx_2 = cmdArg.int_value;
                        if (!((node.children.length) > idx_2)) return [3 /*break*/, 6];
                        arg_2 = node.children[idx_2];
                        sCtx = ctx.fork();
                        sCtx.restartExpressionLevel();
                        return [4 /*yield*/, this.WalkNode(arg_2, sCtx, wr)];
                    case 5:
                        _b.sent();
                        _b.label = 6;
                    case 6: return [3 /*break*/, 82];
                    case 7:
                        if (ctx.isVarDefined(cmdArg.vref)) {
                            p = ctx.getVariableDef(cmdArg.vref);
                            wr.out(p.compiledName, false);
                        }
                        return [3 /*break*/, 82];
                    case 8:
                        p_1 = new RangerAppParamDesc();
                        p_1.name = cmdArg.vref;
                        p_1.value_type = cmdArg.value_type;
                        p_1.node = cmdArg;
                        p_1.nameNode = cmdArg;
                        p_1.is_optional = false;
                        ctx.defineVariable(p_1.name, p_1);
                        return [3 /*break*/, 82];
                    case 9:
                        idx_3 = cmdArg.int_value;
                        if ((node.children.length) > idx_3) {
                            arg_3 = node.children[idx_3];
                            cc = arg_3.string_value.charCodeAt(0);
                            wr.out("" + (cc), false);
                        }
                        return [3 /*break*/, 82];
                    case 10:
                        idx_4 = cmdArg.int_value;
                        if ((node.children.length) > idx_4) {
                            arg_4 = node.children[idx_4];
                            if (ctx.hasCompilerSetting(arg_4.string_value)) {
                                setting = ctx.getCompilerSetting(arg_4.string_value);
                                wr.out(setting, false);
                            }
                        }
                        return [3 /*break*/, 82];
                    case 11:
                        idx_5 = cmdArg.int_value;
                        if ((node.children.length) > idx_5) {
                            arg_5 = node.children[idx_5];
                            if (ctx.hasCompilerSetting(arg_5.string_value)) {
                                setting_1 = ctx.getCompilerSetting(arg_5.string_value);
                                wr.out(setting_1, false);
                            }
                            else {
                                ctx.addError(node, ("This source code requires compiler option -" + arg_5.string_value) + "=<> to be set ");
                            }
                        }
                        return [3 /*break*/, 82];
                    case 12:
                        idx_6 = cmdArg.int_value;
                        if (!((node.children.length) > idx_6)) return [3 /*break*/, 14];
                        arg_6 = node.children[idx_6];
                        return [4 /*yield*/, this.WalkNode(arg_6, ctx, wr)];
                    case 13:
                        _b.sent();
                        if (arg_6.didReturnAtIndex < 0) {
                            wr.newline();
                            wr.out("break;", true);
                        }
                        _b.label = 14;
                    case 14: return [3 /*break*/, 82];
                    case 15:
                        if ((cmd.children.length) > 2) {
                            cmdData = cmd.getThird();
                            name_6 = cmdArg.string_value;
                            ctx.addPluginNode(name_6, cmdData);
                        }
                        return [3 /*break*/, 82];
                    case 16:
                        idx_7 = cmdArg.int_value;
                        if (!((node.children.length) > idx_7)) return [3 /*break*/, 18];
                        arg_7 = node.children[idx_7];
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(arg_7, ctx, wr)];
                    case 17:
                        _b.sent();
                        ctx.unsetInExpr();
                        _b.label = 18;
                    case 18: return [3 /*break*/, 82];
                    case 19:
                        idx_8 = cmdArg.int_value;
                        if (!((node.children.length) > idx_8)) return [3 /*break*/, 21];
                        arg_8 = node.children[idx_8];
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(arg_8, ctx, wr)];
                    case 20:
                        _b.sent();
                        ctx.unsetInExpr();
                        _b.label = 21;
                    case 21: return [3 /*break*/, 82];
                    case 22:
                        idx_9 = cmdArg.int_value;
                        if (!((node.children.length) > idx_9)) return [3 /*break*/, 24];
                        arg_9 = node.children[idx_9];
                        ctx.setInExpr();
                        return [4 /*yield*/, this.langWriter.WriteSetterVRef(arg_9, ctx, wr)];
                    case 23:
                        _b.sent();
                        ctx.unsetInExpr();
                        _b.label = 24;
                    case 24: return [3 /*break*/, 82];
                    case 25:
                        idx_10 = cmdArg.int_value;
                        if (!((node.children.length) > idx_10)) return [3 /*break*/, 27];
                        arg_10 = node.children[idx_10];
                        return [4 /*yield*/, this.WalkNode(arg_10, ctx, wr)];
                    case 26:
                        _b.sent();
                        _b.label = 27;
                    case 27: return [3 /*break*/, 82];
                    case 28:
                        idx_11 = cmdArg.int_value;
                        if ((node.children.length) > idx_11) {
                            arg_11 = node.children[idx_11];
                            if (arg_11.hasParamDesc) {
                                if (arg_11.paramDesc.nameNode.isAPrimitiveType() == false) {
                                    wr.out("*", false);
                                }
                            }
                            else {
                                if (arg_11.isAPrimitiveType() == false) {
                                    wr.out("*", false);
                                }
                            }
                        }
                        return [3 /*break*/, 82];
                    case 29:
                        idx_12 = cmdArg.int_value;
                        if ((node.children.length) > idx_12) {
                            arg_12 = node.children[idx_12];
                            if ((arg_12.isPrimitiveType() == false) && (arg_12.isPrimitive() == false)) {
                                wr.out("&", false);
                            }
                        }
                        return [3 /*break*/, 82];
                    case 30:
                        idx_13 = cmdArg.int_value;
                        if ((node.children.length) > idx_13) {
                            arg_13 = node.children[idx_13];
                            wr.out(arg_13.vref, false);
                        }
                        return [3 /*break*/, 82];
                    case 31:
                        idx_14 = cmdArg.int_value;
                        if (!((node.children.length) > idx_14)) return [3 /*break*/, 36];
                        arg_14 = node.children[idx_14];
                        i = 0;
                        _b.label = 32;
                    case 32:
                        if (!(i < arg_14.children.length)) return [3 /*break*/, 35];
                        ch = arg_14.children[i];
                        if (i > 0) {
                            wr.out(" ", false);
                        }
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(ch, ctx, wr)];
                    case 33:
                        _b.sent();
                        ctx.unsetInExpr();
                        _b.label = 34;
                    case 34:
                        i++;
                        return [3 /*break*/, 32];
                    case 35:
                        ;
                        _b.label = 36;
                    case 36: return [3 /*break*/, 82];
                    case 37:
                        idx_15 = cmdArg.int_value;
                        this.repeat_index = idx_15;
                        if (!((node.children.length) >= idx_15)) return [3 /*break*/, 42];
                        cmdToRepeat = cmd.getThird();
                        i_1 = idx_15;
                        _b.label = 38;
                    case 38:
                        if (!(i_1 < (node.children.length))) return [3 /*break*/, 41];
                        if (!(i_1 >= idx_15)) return [3 /*break*/, 40];
                        for (ii = 0; ii < cmdToRepeat.children.length; ii++) {
                            cc_1 = cmdToRepeat.children[ii];
                            if ((cc_1.children.length) > 0) {
                                fc = cc_1.getFirst();
                                if (fc.vref == "e") {
                                    dc = cc_1.getSecond();
                                    dc.int_value = i_1;
                                }
                                if (fc.vref == "block") {
                                    dc_1 = cc_1.getSecond();
                                    dc_1.int_value = i_1;
                                }
                            }
                        }
                        ;
                        return [4 /*yield*/, this.walkCommandList(cmdToRepeat, node, ctx, wr)];
                    case 39:
                        _b.sent();
                        _b.label = 40;
                    case 40:
                        i_1 = i_1 + 1;
                        return [3 /*break*/, 38];
                    case 41:
                        ;
                        _b.label = 42;
                    case 42: return [3 /*break*/, 82];
                    case 43:
                        idx_16 = cmdArg.int_value;
                        this.repeat_index = idx_16;
                        if (!((node.children.length) >= idx_16)) return [3 /*break*/, 48];
                        cmdToRepeat_1 = cmd.getThird();
                        i_2 = idx_16;
                        _b.label = 44;
                    case 44:
                        if (!(i_2 < (node.children.length))) return [3 /*break*/, 47];
                        if (!(i_2 >= idx_16)) return [3 /*break*/, 46];
                        for (ii_1 = 0; ii_1 < cmdToRepeat_1.children.length; ii_1++) {
                            cc_2 = cmdToRepeat_1.children[ii_1];
                            if ((cc_2.children.length) > 0) {
                                fc_1 = cc_2.getFirst();
                                if (fc_1.vref == "e") {
                                    dc_2 = cc_2.getSecond();
                                    dc_2.int_value = i_2;
                                }
                                if (fc_1.vref == "block") {
                                    dc_3 = cc_2.getSecond();
                                    dc_3.int_value = i_2;
                                }
                            }
                        }
                        ;
                        return [4 /*yield*/, this.walkCommandList(cmdToRepeat_1, node, ctx, wr)];
                    case 45:
                        _b.sent();
                        if ((i_2 + 1) < (node.children.length)) {
                            wr.out(",", false);
                        }
                        _b.label = 46;
                    case 46:
                        i_2 = i_2 + 1;
                        return [3 /*break*/, 44];
                    case 47:
                        ;
                        _b.label = 48;
                    case 48: return [3 /*break*/, 82];
                    case 49:
                        idx_17 = cmdArg.int_value;
                        if (!((node.children.length) > idx_17)) return [3 /*break*/, 54];
                        arg_15 = node.children[idx_17];
                        i_3 = 0;
                        _b.label = 50;
                    case 50:
                        if (!(i_3 < arg_15.children.length)) return [3 /*break*/, 53];
                        ch_1 = arg_15.children[i_3];
                        if (i_3 > 0) {
                            wr.out(",", false);
                        }
                        ctx.setInExpr();
                        return [4 /*yield*/, this.WalkNode(ch_1, ctx, wr)];
                    case 51:
                        _b.sent();
                        ctx.unsetInExpr();
                        _b.label = 52;
                    case 52:
                        i_3++;
                        return [3 /*break*/, 50];
                    case 53:
                        ;
                        _b.label = 54;
                    case 54: return [3 /*break*/, 82];
                    case 55:
                        idx_18 = cmdArg.int_value;
                        if ((node.children.length) > idx_18) {
                            arg_16 = node.children[idx_18];
                            if (arg_16.hasParamDesc) {
                                if (arg_16.paramDesc.ref_cnt == 0) {
                                    wr.out("_", false);
                                }
                                else {
                                    p_2 = ctx.getVariableDef(arg_16.vref);
                                    wr.out(p_2.compiledName, false);
                                }
                            }
                            else {
                                wr.out(arg_16.vref, false);
                            }
                        }
                        return [3 /*break*/, 82];
                    case 56:
                        idx_19 = cmdArg.int_value;
                        if ((node.children.length) > idx_19) {
                            arg_17 = node.children[idx_19];
                            if (arg_17.hasParamDesc) {
                                ss = this.langWriter.getObjectTypeString(arg_17.paramDesc.nameNode.key_type, ctx);
                                wr.out(ss, false);
                            }
                            else {
                                ss_1 = this.langWriter.getObjectTypeString(arg_17.key_type, ctx);
                                wr.out(ss_1, false);
                            }
                        }
                        return [3 /*break*/, 82];
                    case 57:
                        idx_20 = cmdArg.int_value;
                        if ((node.children.length) > idx_20) {
                            arg_18 = node.children[idx_20];
                            if (arg_18.hasParamDesc) {
                                ss_2 = this.langWriter.getObjectTypeString(arg_18.paramDesc.nameNode.array_type, ctx);
                                wr.out(ss_2, false);
                            }
                            else {
                                ss_3 = this.langWriter.getObjectTypeString(arg_18.array_type, ctx);
                                wr.out(ss_3, false);
                            }
                        }
                        return [3 /*break*/, 82];
                    case 58:
                        idx_21 = cmdArg.int_value;
                        if ((node.children.length) > idx_21) {
                            arg_19 = node.children[idx_21];
                            if (arg_19.hasParamDesc) {
                                ss_4 = this.langWriter.getObjectTypeString(arg_19.paramDesc.nameNode.array_type, ctx);
                                if (ss_4 == "interface{}") {
                                    ss_4 = "interface";
                                }
                                wr.out(ss_4, false);
                            }
                            else {
                                ss_5 = this.langWriter.getObjectTypeString(arg_19.array_type, ctx);
                                if (ss_5 == "interface{}") {
                                    ss_5 = "interface";
                                }
                                wr.out(ss_5, false);
                            }
                        }
                        return [3 /*break*/, 82];
                    case 59: return [4 /*yield*/, this.langWriter.CustomOperator(node, ctx, wr)];
                    case 60:
                        _b.sent();
                        return [3 /*break*/, 82];
                    case 61:
                        idx_22 = cmdArg.int_value;
                        if ((node.children.length) > idx_22) {
                            arg_20 = node.children[idx_22];
                            if (arg_20.hasParamDesc) {
                                this.langWriter.writeArrayTypeDef(arg_20.paramDesc.nameNode, ctx, wr);
                            }
                            else {
                                this.langWriter.writeArrayTypeDef(arg_20, ctx, wr);
                            }
                        }
                        return [3 /*break*/, 82];
                    case 62:
                        try {
                            fName = cmdArg.string_value + ".java";
                            p_write = wr.getTag("utilities");
                            if (((typeof (p_write.compiledTags[fName]) != "undefined" && p_write.compiledTags.hasOwnProperty(fName))) == false) {
                                code = cmd.getThird();
                                classWr = wr.getFileWriter(".", fName);
                                if ((classWr.getCode().length) > 0) {
                                }
                                else {
                                    package_name = ctx.getCompilerSetting("package");
                                    classWr.out(("package " + package_name) + ";", true);
                                    classWr.raw(code.string_value, false);
                                    p_write.compiledTags[fName] = true;
                                }
                            }
                        }
                        catch (e) {
                        }
                        return [3 /*break*/, 82];
                    case 63:
                        idx_23 = cmdArg.int_value;
                        if (!((node.children.length) > idx_23)) return [3 /*break*/, 67];
                        arg_21 = node.children[idx_23];
                        if (!arg_21.hasParamDesc) return [3 /*break*/, 65];
                        return [4 /*yield*/, this.langWriter.writeRawTypeDef(arg_21.paramDesc.nameNode, ctx, wr)];
                    case 64:
                        _b.sent();
                        return [3 /*break*/, 67];
                    case 65: return [4 /*yield*/, this.langWriter.writeRawTypeDef(arg_21, ctx, wr)];
                    case 66:
                        _b.sent();
                        _b.label = 67;
                    case 67: return [3 /*break*/, 82];
                    case 68:
                        p_write_1 = wr.getTag("utilities");
                        newWriter = new CodeWriter();
                        testCtx = ctx.fork();
                        testCtx.restartExpressionLevel();
                        testCtx.targetLangName = "ranger";
                        return [4 /*yield*/, this.walkCommandList(cmdArg, node, testCtx, newWriter)];
                    case 69:
                        _b.sent();
                        p_str = newWriter.getCode();
                        if (!(((typeof (p_write_1.compiledTags[p_str]) != "undefined" && p_write_1.compiledTags.hasOwnProperty(p_str))) == false)) return [3 /*break*/, 71];
                        p_write_1.compiledTags[p_str] = true;
                        mCtx = ctx.fork();
                        mCtx.restartExpressionLevel();
                        mCtx.targetLangName = "ranger";
                        return [4 /*yield*/, this.walkCommandList(cmdArg, node, mCtx, p_write_1)];
                    case 70:
                        _b.sent();
                        _b.label = 71;
                    case 71: return [3 /*break*/, 82];
                    case 72: return [4 /*yield*/, this.installFile(cmdArg.string_value, ctx, wr)];
                    case 73:
                        _b.sent();
                        return [3 /*break*/, 82];
                    case 74:
                        this.createPolyfill(cmdArg.string_value, ctx, wr);
                        return [3 /*break*/, 82];
                    case 75:
                        idx_24 = cmdArg.int_value;
                        if (!((node.children.length) >= idx_24)) return [3 /*break*/, 79];
                        arg_22 = node.children[idx_24];
                        if (!arg_22.hasParamDesc) return [3 /*break*/, 77];
                        return [4 /*yield*/, this.writeTypeDef(arg_22.paramDesc.nameNode, ctx, wr)];
                    case 76:
                        _b.sent();
                        return [3 /*break*/, 79];
                    case 77: return [4 /*yield*/, this.writeTypeDef(arg_22, ctx, wr)];
                    case 78:
                        _b.sent();
                        _b.label = 79;
                    case 79: return [3 /*break*/, 82];
                    case 80:
                        this.langWriter.import_lib(cmdArg.string_value, ctx, wr);
                        return [3 /*break*/, 82];
                    case 81:
                        idx_25 = cmdArg.int_value;
                        if ((node.children.length) >= idx_25) {
                            arg_23 = node.children[idx_25];
                            p_3 = this.findParamDesc(arg_23, ctx, wr);
                            nameNode = p_3.nameNode;
                            tn = nameNode.array_type;
                            wr.out(this.getTypeString(tn, ctx), false);
                        }
                        return [3 /*break*/, 82];
                    case 82:
                        ;
                        return [3 /*break*/, 84];
                    case 83:
                        if (cmd.value_type == 11) {
                            switch (cmd.vref) {
                                case "nl":
                                    wr.newline();
                                    break;
                                case "space":
                                    wr.out(" ", false);
                                    break;
                                case "I":
                                    wr.indent(1);
                                    break;
                                case "i":
                                    wr.indent(-1);
                                    break;
                                case "op":
                                    fc_2 = node.getFirst();
                                    wr.out(fc_2.vref, false);
                                    break;
                            }
                            ;
                        }
                        else {
                            if (cmd.value_type == 4) {
                                wr.out(cmd.string_value, false);
                            }
                        }
                        _b.label = 84;
                    case 84: return [2 /*return*/];
                }
            });
        });
    };
    ;
    LiveCompiler.prototype.compile = function (node, ctx, wr) {
    };
    ;
    LiveCompiler.prototype.findParamDesc = function (obj, ctx, wr) {
        var varDesc;
        var set_nsp = false;
        var classDesc;
        if (0 == (obj.nsp.length)) {
            set_nsp = true;
        }
        if (obj.vref != "this") {
            if ((obj.ns.length) > 1) {
                var cnt = obj.ns.length;
                var classRefDesc = void 0;
                for (var i = 0; i < obj.ns.length; i++) {
                    var strname = obj.ns[i];
                    if (i == 0) {
                        if (strname == "this") {
                            classDesc = ctx.getCurrentClass();
                            if (set_nsp) {
                                obj.nsp.push(classDesc);
                            }
                        }
                        else {
                            if (ctx.isDefinedClass(strname)) {
                                classDesc = ctx.findClass(strname);
                                if (set_nsp) {
                                    obj.nsp.push(classDesc);
                                }
                                continue;
                            }
                            classRefDesc = ctx.getVariableDef(strname);
                            if (typeof (classRefDesc) === "undefined") {
                                ctx.addError(obj, "Error, no description for called object: " + strname);
                                break;
                            }
                            if (set_nsp) {
                                obj.nsp.push(classRefDesc);
                            }
                            classRefDesc.ref_cnt = 1 + classRefDesc.ref_cnt;
                            classDesc = ctx.findClass(classRefDesc.nameNode.type_name);
                        }
                    }
                    else {
                        if (i < (cnt - 1)) {
                            varDesc = classDesc.findVariable(strname);
                            if (typeof (varDesc) === "undefined") {
                                ctx.addError(obj, "Error, no description for refenced obj: " + strname);
                            }
                            var subClass = varDesc.getTypeName();
                            classDesc = ctx.findClass(subClass);
                            if (set_nsp) {
                                obj.nsp.push(varDesc);
                            }
                            continue;
                        }
                        if ((typeof (classDesc) !== "undefined" && classDesc != null)) {
                            varDesc = classDesc.findVariable(strname);
                            if (typeof (varDesc) === "undefined") {
                                var classMethod = classDesc.findMethod(strname);
                                if (typeof (classMethod) === "undefined") {
                                    classMethod = classDesc.findStaticMethod(strname);
                                    if (typeof (classMethod) === "undefined") {
                                        ctx.addError(obj, "variable not found " + strname);
                                    }
                                }
                                if ((typeof (classMethod) !== "undefined" && classMethod != null)) {
                                    if (set_nsp) {
                                        obj.nsp.push(classMethod);
                                    }
                                    return classMethod;
                                }
                            }
                            if (set_nsp) {
                                obj.nsp.push(varDesc);
                            }
                        }
                    }
                }
                ;
                return varDesc;
            }
            varDesc = ctx.getVariableDef(obj.vref);
            if ((typeof (varDesc.nameNode) !== "undefined" && varDesc.nameNode != null)) {
            }
            else {
                console.log("findParamDesc : description not found for " + obj.vref);
                if ((typeof (varDesc) !== "undefined" && varDesc != null)) {
                    console.log("Vardesc was found though..." + varDesc.name);
                }
                ctx.addError(obj, "Error, no description for called object: " + obj.vref);
            }
            return varDesc;
        }
        var cc = ctx.getCurrentClass();
        return cc;
    };
    ;
    return LiveCompiler;
}());
exports.LiveCompiler = LiveCompiler;
var ColorConsole = /** @class */ (function () {
    function ColorConsole() {
    }
    ColorConsole.prototype.out = function (color, str) {
        console.log(str);
    };
    ;
    return ColorConsole;
}());
exports.ColorConsole = ColorConsole;
var RangerDocGenerator = /** @class */ (function () {
    function RangerDocGenerator() {
    }
    RangerDocGenerator.prototype.writeTypeDef = function (item, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, rv, args, e_9;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (item.hasFlag("optional")) {
                            wr.out("<optional>", false);
                        }
                        _a = item.value_type;
                        switch (_a) {
                            case 6: return [3 /*break*/, 1];
                            case 7: return [3 /*break*/, 2];
                            case 17: return [3 /*break*/, 3];
                        }
                        return [3 /*break*/, 9];
                    case 1:
                        wr.out(("[" + item.array_type) + "]", false);
                        return [3 /*break*/, 10];
                    case 2:
                        wr.out(((("[" + item.key_type) + ":") + item.array_type) + "]", false);
                        return [3 /*break*/, 10];
                    case 3:
                        wr.out("(fn:", false);
                        _b.label = 4;
                    case 4:
                        _b.trys.push([4, 7, , 8]);
                        rv = item.expression_value.children[0];
                        args = item.expression_value.children[1];
                        return [4 /*yield*/, this.writeTypeDef(rv, ctx, wr)];
                    case 5:
                        _b.sent();
                        wr.out(" (", false);
                        return [4 /*yield*/, operatorsOf.forEach_15(args.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (index > 0) {
                                                wr.out(", ", false);
                                            }
                                            wr.out(item.vref, false);
                                            wr.out(": ", false);
                                            return [4 /*yield*/, this.writeTypeDef(item, ctx, wr)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 6:
                        _b.sent();
                        wr.out(")", false);
                        return [3 /*break*/, 8];
                    case 7:
                        e_9 = _b.sent();
                        return [3 /*break*/, 8];
                    case 8:
                        wr.out(")", false);
                        return [3 /*break*/, 10];
                    case 9:
                        if ((item.type_name.length) > 0) {
                            wr.out("" + item.type_name, false);
                        }
                        return [3 /*break*/, 10];
                    case 10:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerDocGenerator.prototype.writeArgDefs = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, operatorsOf.forEach_15(node.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (index > 0) {
                                            wr.out(" ", false);
                                        }
                                        wr.out(("`" + item.vref) + "`", false);
                                        wr.out(":", false);
                                        return [4 /*yield*/, this.writeTypeDef(item, ctx, wr)];
                                    case 1:
                                        _a.sent();
                                        wr.out(" ", false);
                                        return [2 /*return*/];
                                }
                            });
                        }); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerDocGenerator.prototype.createClassDoc = function (node, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var b_only_documented_1, wr_4, root;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!ctx.hasCompilerSetting("classdoc")) return [3 /*break*/, 2];
                        b_only_documented_1 = false == ctx.hasCompilerFlag("allowempty");
                        wr_4 = orig_wr.getFileWriter(".", ctx.getCompilerSetting("classdoc"));
                        if (b_only_documented_1 == false) {
                            wr_4.out("# Classes", true);
                        }
                        root = ctx.getRoot();
                        return [4 /*yield*/, operatorsOf_13.forEach_14(root.definedClasses, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                var theClass;
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (false == item.isNormalClass()) {
                                                return [2 /*return*/];
                                            }
                                            if (b_only_documented_1 == false) {
                                                wr_4.out("## " + index, true);
                                            }
                                            theClass = item;
                                            return [4 /*yield*/, operatorsOf_13.forEach_30(item.method_variants, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                                    var _this = this;
                                                    return __generator(this, function (_a) {
                                                        switch (_a.label) {
                                                            case 0: return [4 /*yield*/, operatorsOf.forEach_29(item.variants, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                                                    var i, arg;
                                                                    return __generator(this, function (_a) {
                                                                        switch (_a.label) {
                                                                            case 0:
                                                                                if (b_only_documented_1) {
                                                                                    if ((item.git_doc.length) == 0) {
                                                                                        return [2 /*return*/];
                                                                                    }
                                                                                }
                                                                                wr_4.out("#### ", false);
                                                                                if (!(typeof (item.nameNode) != "undefined")) return [3 /*break*/, 2];
                                                                                if (!(item.nameNode.type_name != "void")) return [3 /*break*/, 2];
                                                                                wr_4.out("`", false);
                                                                                return [4 /*yield*/, this.writeTypeDef(item.nameNode, ctx, wr_4)];
                                                                            case 1:
                                                                                _a.sent();
                                                                                wr_4.out("` ", false);
                                                                                _a.label = 2;
                                                                            case 2:
                                                                                wr_4.out((theClass.name + ":: ") + item.name, false);
                                                                                wr_4.out("(", false);
                                                                                i = 0;
                                                                                _a.label = 3;
                                                                            case 3:
                                                                                if (!(i < item.params.length)) return [3 /*break*/, 6];
                                                                                arg = item.params[i];
                                                                                if (i > 0) {
                                                                                    wr_4.out(" ", false);
                                                                                }
                                                                                wr_4.out(("`" + arg.compiledName) + "`", false);
                                                                                wr_4.out(":", false);
                                                                                return [4 /*yield*/, this.writeTypeDef(arg.nameNode, ctx, wr_4)];
                                                                            case 4:
                                                                                _a.sent();
                                                                                _a.label = 5;
                                                                            case 5:
                                                                                i++;
                                                                                return [3 /*break*/, 3];
                                                                            case 6:
                                                                                ;
                                                                                wr_4.out(")", false);
                                                                                wr_4.out("", true);
                                                                                wr_4.out(item.git_doc, false);
                                                                                wr_4.out("", true);
                                                                                return [2 /*return*/];
                                                                        }
                                                                    });
                                                                }); }))];
                                                            case 1:
                                                                _a.sent();
                                                                return [2 /*return*/];
                                                        }
                                                    });
                                                }); }))];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerDocGenerator.prototype.writeOpDesc = function (item, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var fc, nameNode, args, name;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fc = item.getFirst();
                        nameNode = item.getSecond();
                        args = item.getThird();
                        wr.out("| ", false);
                        name = fc.vref;
                        if (fc.vref == "||") {
                            name = "&#124;&#124;";
                        }
                        if (fc.vref == "|") {
                            name = "&#124;";
                        }
                        wr.out(name, false);
                        wr.out(" | ", false);
                        if (!(nameNode.type_name != "void")) return [3 /*break*/, 2];
                        wr.out("`", false);
                        return [4 /*yield*/, this.writeTypeDef(nameNode, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out("` ", false);
                        _a.label = 2;
                    case 2:
                        wr.out("| ", false);
                        wr.out("  (", false);
                        return [4 /*yield*/, this.writeArgDefs(args, ctx, wr)];
                    case 3:
                        _a.sent();
                        wr.out(" )", false);
                        wr.out("| ", false);
                        if (item.hasStringProperty("doc")) {
                            wr.out(item.getStringProperty("doc"), false);
                        }
                        wr.out("| ", false);
                        wr.out("", true);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerDocGenerator.prototype.writeTypeDoc = function (list, tester, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var www, cnt;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        www = wr.fork();
                        wr.out("", true);
                        wr.out("", true);
                        wr.out("| operator | returns | arguments | description |", true);
                        wr.out("| -------- | ------- | --------- | ------------| ", true);
                        cnt = 0;
                        return [4 /*yield*/, operatorsOf.forEach_17(list, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, tester(item)];
                                        case 1:
                                            if (!_a.sent()) return [3 /*break*/, 3];
                                            if (cnt > 0) {
                                                www.out(", ", false);
                                            }
                                            www.out(("  `" + item.name) + "` ", false);
                                            return [4 /*yield*/, this.writeOpDesc(item.node, ctx, wr)];
                                        case 2:
                                            _a.sent();
                                            cnt = cnt + 1;
                                            _a.label = 3;
                                        case 3: return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    RangerDocGenerator.prototype.createOperatorDoc = function (node, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var wr, allOps, statements, lang_statements, operator_list, nList;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!ctx.hasCompilerSetting("operatordoc")) return [3 /*break*/, 12];
                        wr = orig_wr.getFileWriter(".", ctx.getCompilerSetting("operatordoc"));
                        return [4 /*yield*/, ctx.getAllOperators()];
                    case 1:
                        allOps = _a.sent();
                        statements = operatorsOf.filter_52(allOps, (function (item, index) {
                            var is_map_array = false;
                            if (typeof (item.firstArg) != "undefined") {
                                is_map_array = (item.firstArg.value_type == 6) || (item.firstArg.value_type == 7);
                            }
                            if ((item.name.indexOf("if_")) == 0) {
                                return false;
                            }
                            return (item.nameNode.type_name == "void") && (false == is_map_array);
                        }));
                        lang_statements = operatorsOf.filter_52(allOps, (function (item, index) {
                            if ((item.name.indexOf("if_")) == 0) {
                                return true;
                            }
                            return false;
                        }));
                        statements = operatorsOf.groupBy_53(statements, (function (item) {
                            return item.name;
                        }));
                        operator_list = operatorsOf.filter_52(allOps, (function (item, index) {
                            var is_map_array_1 = false;
                            if (typeof (item.firstArg) != "undefined") {
                                is_map_array_1 = (item.firstArg.value_type == 6) || (item.firstArg.value_type == 7);
                            }
                            return is_map_array_1 || (item.nameNode.type_name != "void");
                        }));
                        nList = operatorsOf.groupBy_53(operator_list, (function (item) {
                            var key = item.name;
                            var fc = item.firstArg;
                            if (typeof (fc) != "undefined") {
                                key = key + (((((":" + fc.type_name) + ":") + fc.key_type) + ":") + fc.array_type);
                            }
                            return key;
                        }));
                        wr.out("## Statements", true);
                        return [4 /*yield*/, this.writeTypeDoc(statements, (function (item) {
                                return true;
                            }), ctx, wr)];
                    case 2:
                        _a.sent();
                        wr.out("", true);
                        wr.out("## Language switches", true);
                        return [4 /*yield*/, this.writeTypeDoc(lang_statements, (function (item) {
                                return true;
                            }), ctx, wr)];
                    case 3:
                        _a.sent();
                        wr.out("", true);
                        wr.out("## Operators without arguments", true);
                        return [4 /*yield*/, this.writeTypeDoc(nList, (function (item) {
                                return typeof (item.firstArg) === "undefined";
                            }), ctx, wr)];
                    case 4:
                        _a.sent();
                        wr.out("", true);
                        wr.out("## Generic operators", true);
                        return [4 /*yield*/, this.writeTypeDoc(nList, (function (item) {
                                if (typeof (item.firstArg) != "undefined") {
                                    return item.firstArg.type_name == "T";
                                }
                                return false;
                            }), ctx, wr)];
                    case 5:
                        _a.sent();
                        wr.out("", true);
                        wr.out("## Numeric operators", true);
                        return [4 /*yield*/, this.writeTypeDoc(nList, (function (item) {
                                if (typeof (item.firstArg) != "undefined") {
                                    return ((item.firstArg.type_name == "int") || (item.firstArg.type_name == "double")) && ((item.nameNode.type_name == "int") || (item.nameNode.type_name == "double"));
                                }
                                return false;
                            }), ctx, wr)];
                    case 6:
                        _a.sent();
                        wr.out("", true);
                        wr.out("## Miscellaneous operators", true);
                        return [4 /*yield*/, this.writeTypeDoc(nList, (function (item) {
                                if (typeof (item.firstArg) != "undefined") {
                                    return ((item.firstArg.type_name == "int") || (item.firstArg.type_name == "double")) && (((item.nameNode.type_name != "int") && (item.nameNode.type_name != "double")) && (item.nameNode.type_name != "boolean"));
                                }
                                return false;
                            }), ctx, wr)];
                    case 7:
                        _a.sent();
                        wr.out("", true);
                        wr.out("## String operators", true);
                        return [4 /*yield*/, this.writeTypeDoc(nList, (function (item) {
                                if (typeof (item.firstArg) != "undefined") {
                                    return item.firstArg.type_name == "string";
                                }
                                return false;
                            }), ctx, wr)];
                    case 8:
                        _a.sent();
                        wr.out("", true);
                        wr.out("", true);
                        wr.out("## Array operators", true);
                        return [4 /*yield*/, this.writeTypeDoc(nList, (function (item) {
                                if (typeof (item.firstArg) != "undefined") {
                                    return item.firstArg.value_type == 6;
                                }
                                return false;
                            }), ctx, wr)];
                    case 9:
                        _a.sent();
                        wr.out("", true);
                        wr.out("## Map operators", true);
                        return [4 /*yield*/, this.writeTypeDoc(nList, (function (item) {
                                if (typeof (item.firstArg) != "undefined") {
                                    return item.firstArg.value_type == 7;
                                }
                                return false;
                            }), ctx, wr)];
                    case 10:
                        _a.sent();
                        wr.out("", true);
                        wr.out("## Boolean / test operators", true);
                        return [4 /*yield*/, this.writeTypeDoc(nList, (function (item) {
                                if (typeof (item.firstArg) != "undefined") {
                                    return item.nameNode.type_name == "boolean";
                                }
                                return false;
                            }), ctx, wr)];
                    case 11:
                        _a.sent();
                        _a.label = 12;
                    case 12: return [2 /*return*/];
                }
            });
        });
    };
    ;
    return RangerDocGenerator;
}());
exports.RangerDocGenerator = RangerDocGenerator;
var viewbuilder_Android = /** @class */ (function () {
    function viewbuilder_Android() {
    }
    viewbuilder_Android.prototype._attr = function (wr, name, value) {
        wr.out((((("android:" + name) + "=") + "\"") + value) + "\" ", true);
    };
    ;
    viewbuilder_Android.prototype.elWithText = function (name, node, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var width, height, weight;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        wr.out(("<" + name) + " ", true);
                        wr.indent(1);
                        width = "match_parent";
                        height = "wrap_content";
                        weight = "";
                        return [4 /*yield*/, operatorsOf.forEach_15(node.children, (function (item, index) {
                                switch (item.value_type) {
                                    case 20:
                                        _this._attr(wr, "text", item.string_value);
                                        break;
                                }
                                ;
                            }))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, operatorsOf.forEach_15(node.attrs, (function (item, index) {
                                if (item.vref == "font-size") {
                                    _this._attr(wr, "textSize", item.string_value + "dp");
                                }
                                if (item.vref == "id") {
                                    _this._attr(wr, "id", "@+id/" + item.string_value);
                                }
                                if (item.vref == "width-pros") {
                                    weight = item.string_value;
                                }
                                if (item.vref == "width") {
                                    width = item.string_value + "dp";
                                }
                            }))];
                    case 2:
                        _a.sent();
                        this._attr(wr, "layout_width", width);
                        this._attr(wr, "layout_height", height);
                        if ((weight.length) > 0) {
                            this._attr(wr, "layout_weight", weight);
                        }
                        wr.out("/>", true);
                        wr.indent(-1);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    viewbuilder_Android.prototype.WalkNode = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, orientation_1;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = node.vref;
                        switch (_a) {
                            case "ScrollView": return [3 /*break*/, 1];
                            case "LinearLayout": return [3 /*break*/, 4];
                            case "Button": return [3 /*break*/, 7];
                            case "Text": return [3 /*break*/, 9];
                            case "Input": return [3 /*break*/, 11];
                        }
                        return [3 /*break*/, 14];
                    case 1:
                        wr.out("<ScrollView ", true);
                        wr.indent(1);
                        this._attr(wr, "layout_width", "match_parent");
                        this._attr(wr, "layout_height", "wrap_content");
                        return [4 /*yield*/, operatorsOf.forEach_15(node.attrs, (function (item, index) {
                                if (item.vref == "id") {
                                    _this._attr(wr, "id", "@+id/" + item.string_value);
                                }
                            }))];
                    case 2:
                        _b.sent();
                        wr.out(">", true);
                        wr.indent(1);
                        return [4 /*yield*/, operatorsOf.forEach_15(node.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.WalkNode(item, ctx, wr)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 3:
                        _b.sent();
                        wr.indent(-1);
                        wr.out("</ScrollView>", true);
                        wr.indent(-1);
                        return [3 /*break*/, 14];
                    case 4:
                        wr.out("<LinearLayout ", true);
                        wr.indent(1);
                        this._attr(wr, "layout_width", "match_parent");
                        this._attr(wr, "layout_height", "wrap_content");
                        orientation_1 = "vertical";
                        return [4 /*yield*/, operatorsOf.forEach_15(node.attrs, (function (item, index) {
                                if (item.vref == "id") {
                                    _this._attr(wr, "id", "@+id/" + item.string_value);
                                }
                                if (item.vref == "direction") {
                                    orientation_1 = item.string_value;
                                }
                            }))];
                    case 5:
                        _b.sent();
                        this._attr(wr, "orientation", orientation_1);
                        this._attr(wr, "weightSum", "100");
                        wr.out(">", true);
                        wr.indent(1);
                        return [4 /*yield*/, operatorsOf.forEach_15(node.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.WalkNode(item, ctx, wr)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 6:
                        _b.sent();
                        wr.indent(-1);
                        wr.out("</LinearLayout>", true);
                        wr.indent(-1);
                        return [3 /*break*/, 14];
                    case 7: return [4 /*yield*/, this.elWithText("Button", node, wr)];
                    case 8:
                        _b.sent();
                        return [3 /*break*/, 14];
                    case 9: return [4 /*yield*/, this.elWithText("TextView", node, wr)];
                    case 10:
                        _b.sent();
                        return [3 /*break*/, 14];
                    case 11:
                        wr.out("<EditText ", true);
                        wr.indent(1);
                        this._attr(wr, "layout_width", "match_parent");
                        this._attr(wr, "layout_height", "wrap_content");
                        return [4 /*yield*/, operatorsOf.forEach_15(node.attrs, (function (item, index) {
                                if (item.vref == "hint") {
                                    _this._attr(wr, "hint", item.string_value);
                                }
                                if (item.vref == "id") {
                                    _this._attr(wr, "id", "@+id/" + item.string_value);
                                }
                                if ((item.vref == "type") && (item.string_value == "password")) {
                                    _this._attr(wr, "inputType", "textPassword");
                                }
                            }))];
                    case 12:
                        _b.sent();
                        return [4 /*yield*/, operatorsOf.forEach_15(node.children, (function (item, index) {
                                switch (item.value_type) {
                                    case 20:
                                        _this._attr(wr, "text", item.string_value);
                                        break;
                                }
                                ;
                            }))];
                    case 13:
                        _b.sent();
                        wr.out("/>", true);
                        wr.indent(-1);
                        return [3 /*break*/, 14];
                    case 14:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    viewbuilder_Android.prototype.writeClass = function (node, ctx, orig_wr) {
        return __awaiter(this, void 0, void 0, function () {
            var viewName, b_scroll, wr, viewTag;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        viewName = "";
                        b_scroll = false;
                        return [4 /*yield*/, operatorsOf.forEach_15(node.attrs, (function (item, index) {
                                if (item.vref == "name") {
                                    viewName = item.string_value;
                                }
                                if (item.vref == "type") {
                                    if (item.string_value == "scroll") {
                                        b_scroll = true;
                                    }
                                }
                            }))];
                    case 1:
                        _a.sent();
                        wr = orig_wr.getFileWriter("layout", (("activity_" + viewName) + ".xml"));
                        wr.out("<?xml version=\"1.0\" encoding=\"utf-8\"?>", true);
                        viewTag = "LinearLayout";
                        if (b_scroll) {
                            viewTag = "ScrollView";
                        }
                        wr.out(("<" + viewTag) + " xmlns:android=\"http://schemas.android.com/apk/res/android\" ", true);
                        wr.indent(1);
                        this._attr(wr, "layout_width", "match_parent");
                        this._attr(wr, "layout_height", "match_parent");
                        if (b_scroll == false) {
                            this._attr(wr, "paddingLeft", "16dp");
                            this._attr(wr, "paddingRight", "16dp");
                            this._attr(wr, "orientation", "vertical");
                        }
                        this._attr(wr, "id", "@+id/view_id_" + viewName);
                        wr.out(">", true);
                        return [4 /*yield*/, operatorsOf.forEach_15(node.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.WalkNode(item, ctx, wr)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 2:
                        _a.sent();
                        wr.indent(-1);
                        wr.out(("</" + viewTag) + ">", true);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    return viewbuilder_Android;
}());
exports.viewbuilder_Android = viewbuilder_Android;
var viewbuilder_Web = /** @class */ (function () {
    function viewbuilder_Web() {
    }
    viewbuilder_Web.prototype._attr = function (wr, name, value) {
        wr.out(((((" " + name) + "=") + "\"") + value) + "\" ", false);
    };
    ;
    viewbuilder_Web.prototype.tagAttrs = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, operatorsOf.forEach_15(node.attrs, (function (item, index) {
                            if (item.vref == "id") {
                                _this._attr(wr, "x-id", item.string_value);
                            }
                            if (item.vref == "hint") {
                                _this._attr(wr, "tooltip", item.string_value);
                                _this._attr(wr, "title", item.string_value);
                                _this._attr(wr, "placeholder", item.string_value);
                            }
                        }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    viewbuilder_Web.prototype.tagText = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, operatorsOf.forEach_15(node.children, (function (item, index) {
                            switch (item.value_type) {
                                case 20:
                                    wr.out(item.string_value, false);
                                    break;
                            }
                            ;
                        }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    viewbuilder_Web.prototype.tag = function (name, node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        wr.out("<" + name, false);
                        return [4 /*yield*/, this.tagAttrs(node, ctx, wr)];
                    case 1:
                        _a.sent();
                        wr.out(">", false);
                        return [4 /*yield*/, this.tagText(node, ctx, wr)];
                    case 2:
                        _a.sent();
                        wr.out(("</" + name) + ">", true);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    viewbuilder_Web.prototype.WalkNode = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = node.vref;
                        switch (_a) {
                            case "LinearLayout": return [3 /*break*/, 1];
                            case "Button": return [3 /*break*/, 3];
                            case "Text": return [3 /*break*/, 6];
                            case "Input": return [3 /*break*/, 8];
                        }
                        return [3 /*break*/, 10];
                    case 1: return [4 /*yield*/, this.tag("div", node, ctx, wr)];
                    case 2:
                        _b.sent();
                        return [3 /*break*/, 10];
                    case 3:
                        wr.out("<div><a class='waves-effect waves-light btn' ", false);
                        return [4 /*yield*/, this.tagAttrs(node, ctx, wr)];
                    case 4:
                        _b.sent();
                        wr.out(">", false);
                        return [4 /*yield*/, this.tagText(node, ctx, wr)];
                    case 5:
                        _b.sent();
                        wr.out("</a></div>", false);
                        return [3 /*break*/, 10];
                    case 6: return [4 /*yield*/, this.tag("div", node, ctx, wr)];
                    case 7:
                        _b.sent();
                        return [3 /*break*/, 10];
                    case 8:
                        wr.out("<div>", true);
                        return [4 /*yield*/, this.tag("input", node, ctx, wr)];
                    case 9:
                        _b.sent();
                        wr.out("</div>", true);
                        return [3 /*break*/, 10];
                    case 10:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    viewbuilder_Web.prototype.CreateViews = function (ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        wr.out("<!DOCTYPE html>", true);
                        wr.out("<html>", true);
                        wr.indent(1);
                        wr.out("<head>", true);
                        wr.indent(1);
                        wr.out("\r\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/css/materialize.min.css\">\r\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/js/materialize.min.js\"></script>    \r\n    ", true);
                        wr.indent(-1);
                        wr.out("</head>", true);
                        wr.out("<body>", true);
                        return [4 /*yield*/, operatorsOf_13.forEach_25(ctx.viewClassBody, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.writeClass(item, ctx, wr)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        wr.out("</body>", true);
                        wr.out("</html>", true);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    viewbuilder_Web.prototype.writeClass = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var viewName;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        viewName = "";
                        return [4 /*yield*/, operatorsOf.forEach_15(node.attrs, (function (item, index) {
                                if (item.vref == "name") {
                                    viewName = item.string_value;
                                }
                            }))];
                    case 1:
                        _a.sent();
                        wr.out("", true);
                        wr.out(("<div id=\"" + viewName) + "\">", true);
                        wr.indent(1);
                        return [4 /*yield*/, operatorsOf.forEach_15(node.children, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.WalkNode(item, ctx, wr)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 2:
                        _a.sent();
                        wr.indent(-1);
                        wr.out("</div>", true);
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    return viewbuilder_Web;
}());
exports.viewbuilder_Web = viewbuilder_Web;
var CompilerResults = /** @class */ (function () {
    function CompilerResults() {
        this.target_dir = "";
    }
    return CompilerResults;
}());
exports.CompilerResults = CompilerResults;
var VirtualCompiler = /** @class */ (function () {
    function VirtualCompiler() {
    }
    VirtualCompiler.prototype.getEnvVar = function (name) {
        return operatorsOf_8.envc95var_54((this.envObj), name);
    };
    ;
    VirtualCompiler.prototype.possiblePaths = function (envVarName) {
        var res = [];
        var parts = envVarName.split(";");
        res.push("./");
        for (var i = 0; i < parts.length; i++) {
            var str = parts[i];
            var s = str.trim();
            if ((s.length) > 0) {
                var dirNames = s.split("/");
                dirNames.pop();
                var theDir = dirNames.join("/");
                res.push(theDir);
            }
        }
        ;
        res.push(operatorsOf_8.installc95directory_51((this.envObj)));
        return res;
    };
    ;
    VirtualCompiler.prototype.searchLib = function (paths, libname) {
        for (var i = 0; i < paths.length; i++) {
            var path = paths[i];
            if (operatorsOf_8.filec95exists_9((this.envObj), path, libname)) {
                return path;
            }
        }
        ;
        return "";
    };
    ;
    VirtualCompiler.prototype.fillStr = function (cnt) {
        var s = "";
        var i = cnt;
        while (i > 0) {
            s = s + " ";
            i = i - 1;
        }
        ;
        return s;
    };
    ;
    VirtualCompiler.prototype.run = function (env) {
        return __awaiter(this, void 0, void 0, function () {
            var res, allowed_languages, params, the_file, plugins_only, valid_options, valid_flags, parser_pragmas, optCnt, option, optionDesc, optCnt_1, option_1, optionDesc_1, optCnt_2, option_2, optionDesc_2, root_file, the_lang_file, the_lang, the_target_dir, the_target, package_name, comp_attrs, outDir, langLibEnv, idir, theFilePaths, theFilePath, langFilePaths, langFilePath, langFileDirs, c, code, parser, root, flags, ci, ch, inserted_nodes, fc, fName, i, flag_name, compInfo, i_1, cnt, fc_1, sc, i_2, new_node, outDir_2, outDir_3, pLang, appCtx, i_3, include_path, root_parts, lcc, node, flowParser, fileSystem, file, wr, fileWr, val, list, lang_str, lang_code, lang_parser, ops, ppList, _a, resDir, resFs, file_2, wr_2_1, builder_2, resDir_1, resFs_1, file_3, wr_3, builder_1, staticMethods, importFork, contentFork, handledClasses, i_4, cName, cl, i_5, eClassName, parentCl, i_6, ifDesc, i_7, cName_1, cl_1, i_8, cName_2, cl_2, import_list, added_import, i_9, codeStr, parts, p0, p1, gen, gen_1, ppList_1, e_10;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        res = new CompilerResults();
                        this.envObj = env;
                        allowed_languages = ["es6", "go", "scala", "java7", "swift3", "cpp", "php", "csharp"];
                        params = env.commandLine;
                        the_file = "";
                        plugins_only = false;
                        valid_options = ["l", "Selected language, one of " + (allowed_languages.join(", ")), "d", "output directory, default directory is \"bin/\"", "o", "output file, default is \"output.<language>\"", "classdoc", "write class documentation .md file", "operatordoc", "write operator documention into .md file"];
                        valid_flags = ["deadcode", "Eliminate functions which are not called by any other functions", "dead4main", "Eliminate functions and classes which are unreachable from the main function", "forever", "Leave the main program into eternal loop (Go, Swift)", "allowti", "Allow type inference at target lang (creates slightly smaller code)", "plugins-only", "ignore built-in language output and use only plugins", "plugins", "(node compiler only) run specified npm plugins -plugins=\"plugin1,plugin2\"", "strict", "Strict mode. Do not allow automatic unwrapping of optionals outside of try blocks.", "typescript", "Writes JavaScript code with TypeScript annotations", "npm", "Write the package.json to the output directory", "nodecli", "Insert node.js command line header #!/usr/bin/env node to the beginning of the JavaScript file", "nodemodule", "Export the classes as node.js modules (this option will disable the static main function)", "client", "the code is ment to be run in the client environment", "scalafiddle", "scalafiddle.io compatible output", "compiler", "recompile the compiler", "copysrc", "copy all the source codes into the target directory"];
                        parser_pragmas = ["@noinfix(true)", "disable operator infix parsing and automatic type definition checking "];
                        if ((typeof (params.flags["compiler"]) != "undefined" && params.flags.hasOwnProperty("compiler"))) {
                            console.log("---------------------------------------------");
                            console.log(" re-compiling the compiler itself ");
                            console.log("---------------------------------------------");
                            the_file = "ng_Compiler.clj";
                        }
                        else {
                            if ((params.values.length) < 1) {
                                console.log("Ranger compiler, version " + "2.1.67");
                                console.log("Installed at: " + operatorsOf_8.installc95directory_51(env));
                                console.log("Usage: <file> <options> <flags>");
                                console.log("Options: -<option>=<value> ");
                                optCnt = 0;
                                while (optCnt < (valid_options.length)) {
                                    option = valid_options[optCnt];
                                    optionDesc = valid_options[(optCnt + 1)];
                                    console.log(((("  -" + option) + "=<value> ") + this.fillStr((13 - (option.length)))) + optionDesc);
                                    optCnt = optCnt + 2;
                                }
                                ;
                                console.log("Flags: -<flag> ");
                                optCnt_1 = 0;
                                while (optCnt_1 < (valid_flags.length)) {
                                    option_1 = valid_flags[optCnt_1];
                                    optionDesc_1 = valid_flags[(optCnt_1 + 1)];
                                    console.log(((("  -" + option_1) + " ") + this.fillStr((13 - (option_1.length)))) + optionDesc_1);
                                    optCnt_1 = optCnt_1 + 2;
                                }
                                ;
                                console.log("Pragmas: (inside the source code files) ");
                                optCnt_2 = 0;
                                while (optCnt_2 < (parser_pragmas.length)) {
                                    option_2 = parser_pragmas[optCnt_2];
                                    optionDesc_2 = parser_pragmas[(optCnt_2 + 1)];
                                    console.log(((("   " + option_2) + " ") + this.fillStr((16 - (option_2.length)))) + optionDesc_2);
                                    optCnt_2 = optCnt_2 + 2;
                                }
                                ;
                                return [2 /*return*/, res];
                            }
                            the_file = params.values[0];
                        }
                        root_file = the_file;
                        the_lang_file = "Lang.clj";
                        the_lang = "es6";
                        the_target_dir = operatorsOf_8.currentc95directory_51(env) + "/bin";
                        the_target = "output";
                        package_name = "";
                        comp_attrs = {};
                        outDir = params.getParam("o");
                        if ((typeof (outDir) !== "undefined" && outDir != null)) {
                            the_target = outDir;
                        }
                        langLibEnv = operatorsOf_8.envc95var_54(env, "RANGER_LIB");
                        idir = __dirname;
                        langLibEnv = ((((require("path").normalize((idir + "/../compiler/"))) + ";") + (require("path").normalize((idir + "/../lib/")))) + ";") + langLibEnv;
                        env.setEnv("RANGER_LIB", langLibEnv);
                        console.log("ENV: " + operatorsOf_8.envc95var_54(env, "RANGER_LIB"));
                        theFilePaths = this.possiblePaths(operatorsOf_8.envc95var_54(env, "RANGER_LIB"));
                        theFilePath = this.searchLib(theFilePaths, the_file);
                        if (operatorsOf_8.filec95exists_9(env, theFilePath, the_file) == false) {
                            console.log("Could not compile.");
                            console.log("File not found: " + the_file);
                            return [2 /*return*/, res];
                        }
                        langFilePaths = this.possiblePaths(this.getEnvVar("RANGER_LIB"));
                        langFilePath = this.searchLib(langFilePaths, the_lang_file);
                        if (operatorsOf_8.filec95exists_9(env, langFilePath, the_lang_file) == false) {
                            console.log(("language file " + the_lang_file) + " not found! Check the library directory or RANGER_LIB enviroment variable");
                            console.log("currently pointing at : " + langLibEnv);
                            console.log("download: https://raw.githubusercontent.com/terotests/Ranger/master/compiler/Lang.clj");
                            return [2 /*return*/, res];
                        }
                        else {
                            console.log("Using language file from : " + langFilePath);
                        }
                        console.log("File to be compiled: " + the_file);
                        langFileDirs = this.possiblePaths(this.getEnvVar("RANGER_LIB"));
                        return [4 /*yield*/, operatorsOf_8.readc95file_9(env, theFilePath, the_file)];
                    case 1:
                        c = _b.sent();
                        code = new SourceCode(c);
                        code.filename = the_file;
                        parser = new RangerLispParser(code);
                        if ((typeof (params.flags["no-op-transform"]) != "undefined" && params.flags.hasOwnProperty("no-op-transform"))) {
                            parser.disableOperators = true;
                        }
                        parser.parse((typeof (params.flags["no-op-transform"]) != "undefined" && params.flags.hasOwnProperty("no-op-transform")));
                        root = parser.rootNode;
                        console.log("--> ready to compile");
                        flags = Object.keys(params.flags);
                        for (ci = 0; ci < root.children.length; ci++) {
                            ch = root.children[ci];
                            inserted_nodes = [];
                            if ((ch.children.length) > 2) {
                                fc = ch.getFirst();
                                if (fc.vref == "flag") {
                                    fName = ch.getSecond();
                                    for (i = 0; i < flags.length; i++) {
                                        flag_name = flags[i];
                                        if (flag_name == fName.vref) {
                                            compInfo = ch.getThird();
                                            i_1 = 0;
                                            cnt = compInfo.children.length;
                                            while (i_1 < (cnt - 1)) {
                                                fc_1 = compInfo.children[i_1];
                                                sc = compInfo.children[(i_1 + 1)];
                                                switch (fc_1.vref) {
                                                    case "libpath":
                                                        langFileDirs = this.possiblePaths(sc.string_value);
                                                        break;
                                                    case "output":
                                                        the_target = sc.string_value;
                                                        break;
                                                    case "root-file":
                                                        root_file = sc.string_value;
                                                        break;
                                                    case "language":
                                                        the_lang = sc.string_value;
                                                        break;
                                                    case "absolute_output_dir":
                                                        the_target_dir = sc.string_value;
                                                        break;
                                                    case "relative_output_dir":
                                                        the_target_dir = (operatorsOf_8.currentc95directory_51(env) + "/") + sc.string_value;
                                                        break;
                                                    case "package":
                                                        package_name = sc.string_value;
                                                        break;
                                                    case "android_res_dir":
                                                        comp_attrs[fc_1.vref] = sc.string_value;
                                                        break;
                                                    case "web_res_dir":
                                                        comp_attrs[fc_1.vref] = sc.string_value;
                                                        break;
                                                    case "Import":
                                                        inserted_nodes.push(CodeNode.fromList([CodeNode.vref1("Import"), CodeNode.newStr(sc.string_value)]));
                                                        break;
                                                    default:
                                                        if ((sc.string_value.length) > 0) {
                                                            comp_attrs[fc_1.vref] = sc.string_value;
                                                        }
                                                        break;
                                                }
                                                ;
                                                i_1 = i_1 + 2;
                                            }
                                            ;
                                        }
                                    }
                                    ;
                                    ch.children.length = 0;
                                    for (i_2 = 0; i_2 < inserted_nodes.length; i_2++) {
                                        new_node = inserted_nodes[i_2];
                                        console.log(" *** Inserting " + new_node.getCode());
                                        root.children.splice(0, 0, new_node);
                                    }
                                    ;
                                }
                            }
                        }
                        ;
                        root.children.splice(0, 0, CodeNode.fromList([CodeNode.vref1("Import"), CodeNode.newStr("stdlib.clj")]));
                        outDir_2 = params.getParam("o");
                        if ((typeof (outDir_2) !== "undefined" && outDir_2 != null)) {
                            the_target = outDir_2;
                        }
                        comp_attrs["o"] = the_target;
                        outDir_3 = params.getParam("d");
                        if ((typeof (outDir_3) !== "undefined" && outDir_3 != null)) {
                            the_target_dir = (operatorsOf_8.currentc95directory_51(env) + "/") + (outDir_3);
                        }
                        comp_attrs["d"] = the_target_dir;
                        pLang = params.getParam("l");
                        if ((typeof (pLang) !== "undefined" && pLang != null)) {
                            the_lang = pLang;
                        }
                        appCtx = new RangerAppWriterContext();
                        appCtx.env = env;
                        appCtx.libraryPaths = langFileDirs;
                        appCtx.compilerSettings["package"] = package_name;
                        if (appCtx.hasCompilerFlag("verbose")) {
                            for (i_3 = 0; i_3 < appCtx.libraryPaths.length; i_3++) {
                                include_path = appCtx.libraryPaths[i_3];
                                console.log("include-path : " + include_path);
                            }
                            ;
                        }
                        operatorsOf_13.forEach_55(params.flags, (function (item, index) {
                            var n = index;
                            appCtx.compilerFlags[n] = true;
                        }));
                        operatorsOf_13.forEach_40(params.params, (function (item, index) {
                            var v = item;
                            comp_attrs[index] = v;
                        }));
                        operatorsOf_13.forEach_40(comp_attrs, (function (item, index) {
                            var n_1 = item;
                            appCtx.compilerSettings[index] = n_1;
                        }));
                        if ((allowed_languages.indexOf(the_lang)) < 0) {
                            console.log("Invalid language : " + the_lang);
                            /** unused:  const s : string  = ""   **/
                            console.log("allowed languages: " + (allowed_languages.join(" ")));
                            return [2 /*return*/, res];
                        }
                        appCtx.compilerSettings["l"] = the_lang;
                        if (the_target == "output") {
                            root_parts = root_file.split(".");
                            if ((root_parts.length) == 2) {
                                the_target = root_parts[0];
                            }
                            switch (the_lang) {
                                case "es6":
                                    the_target = the_target + ".js";
                                    if (appCtx.hasCompilerFlag("typescript")) {
                                        the_target = the_target + ".ts";
                                    }
                                    break;
                                case "swift3":
                                    the_target = the_target + ".swift";
                                    break;
                                case "php":
                                    the_target = the_target + ".php";
                                    break;
                                case "csharp":
                                    the_target = the_target + ".cs";
                                    break;
                                case "java7":
                                    the_target = the_target + ".java";
                                    break;
                                case "go":
                                    the_target = the_target + ".go";
                                    break;
                                case "scala":
                                    the_target = the_target + ".scala";
                                    break;
                                case "cpp":
                                    the_target = the_target + ".cpp";
                                    break;
                            }
                            ;
                        }
                        appCtx.compilerSettings["o"] = the_target;
                        lcc = new LiveCompiler();
                        node = parser.rootNode;
                        flowParser = new RangerFlowParser();
                        fileSystem = new CodeFileSystem();
                        file = fileSystem.getFile(".", the_target);
                        wr = file.getWriter();
                        if (appCtx.hasCompilerFlag("copysrc")) {
                            console.log("--> copying " + code.filename);
                            fileWr = wr.getFileWriter(".", code.filename);
                            fileWr.raw(code.code, false);
                        }
                        appCtx.parser = flowParser;
                        appCtx.compiler = lcc;
                        lcc.parser = flowParser;
                        if (!appCtx.hasCompilerSetting("plugins")) return [3 /*break*/, 3];
                        val = appCtx.getCompilerSetting("plugins");
                        list = val.split(",");
                        return [4 /*yield*/, operatorsOf.forEach_12(list, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                var plugin, features, regPlug, e_11;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            _a.trys.push([0, 3, , 4]);
                                            plugin = require(item);
                                            features = (new plugin.Plugin()).features();
                                            if (!appCtx.hasCompilerFlag("verbose")) return [3 /*break*/, 2];
                                            console.log(("Plugin " + item) + " registered with features ");
                                            return [4 /*yield*/, operatorsOf.forEach_12(features, (function (item, index) {
                                                    console.log(" [x] " + item);
                                                }))];
                                        case 1:
                                            _a.sent();
                                            _a.label = 2;
                                        case 2:
                                            regPlug = new RangerRegisteredPlugin();
                                            regPlug.name = item;
                                            regPlug.features = operatorsOf.clone_56(features);
                                            appCtx.addPlugin(regPlug);
                                            return [3 /*break*/, 4];
                                        case 3:
                                            e_11 = _a.sent();
                                            console.log("Failed to register plugin " + item);
                                            return [3 /*break*/, 4];
                                        case 4: return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        plugins_only = appCtx.hasCompilerFlag("plugins-only");
                        _b.label = 4;
                    case 4:
                        _b.trys.push([4, 52, , 53]);
                        return [4 /*yield*/, flowParser.mergeImports(node, appCtx, wr)];
                    case 5:
                        _b.sent();
                        return [4 /*yield*/, operatorsOf_8.readc95file_9(env, langFilePath, the_lang_file)];
                    case 6:
                        lang_str = _b.sent();
                        lang_code = new SourceCode(lang_str);
                        lang_code.filename = the_lang_file;
                        lang_parser = new RangerLispParser(lang_code);
                        lang_parser.parse(false);
                        appCtx.langOperators = lang_parser.rootNode;
                        appCtx.setRootFile(root_file);
                        ops = new RangerActiveOperators();
                        ops.initFrom(lang_parser.rootNode);
                        appCtx.operators = ops;
                        appCtx.targetLangName = the_lang;
                        lcc.initWriter(appCtx);
                        console.log("--- context inited ---");
                        console.log("1. Collecting available methods.");
                        return [4 /*yield*/, flowParser.CollectMethods(node, appCtx, wr)];
                    case 7:
                        _b.sent();
                        if ((appCtx.compilerErrors.length) > 0) {
                            VirtualCompiler.displayCompilerErrors(appCtx);
                            return [2 /*return*/, res];
                        }
                        return [4 /*yield*/, flowParser.CreateCTTI(node, appCtx, wr)];
                    case 8:
                        _b.sent();
                        if (!appCtx.hasCompilerFlag("rtti")) return [3 /*break*/, 10];
                        return [4 /*yield*/, flowParser.CreateRTTI(node, appCtx, wr)];
                    case 9:
                        _b.sent();
                        _b.label = 10;
                    case 10:
                        ppList = appCtx.findPluginsFor("pre_flow");
                        return [4 /*yield*/, operatorsOf.forEach_12(ppList, (function (item, index) {
                                try {
                                    var plugin_1 = require(item);
                                    ((new plugin_1.Plugin())["pre_flow"])(root, appCtx, wr);
                                }
                                catch (e) {
                                }
                            }))];
                    case 11:
                        _b.sent();
                        return [4 /*yield*/, appCtx.initOpList()];
                    case 12:
                        _b.sent();
                        console.log("2. Analyzing the code.");
                        console.log("selected language is " + appCtx.targetLangName);
                        return [4 /*yield*/, flowParser.StartWalk(node, appCtx, wr)];
                    case 13:
                        _b.sent();
                        return [4 /*yield*/, flowParser.SolveAsyncFuncs(root, appCtx, wr)];
                    case 14:
                        _b.sent();
                        console.log("3. Compiling the source code.");
                        _a = appCtx.targetLangName;
                        switch (_a) {
                            case "java7": return [3 /*break*/, 15];
                            case "es6": return [3 /*break*/, 18];
                        }
                        return [3 /*break*/, 21];
                    case 15:
                        if (!(typeof (comp_attrs["android_res_dir"]) != "undefined" && comp_attrs.hasOwnProperty("android_res_dir"))) return [3 /*break*/, 17];
                        console.log("--> had android res dir");
                        resDir = (comp_attrs["android_res_dir"]);
                        resFs = new CodeFileSystem();
                        file_2 = resFs.getFile(".", "README.txt");
                        wr_2_1 = file_2.getWriter();
                        builder_2 = new viewbuilder_Android();
                        return [4 /*yield*/, operatorsOf_13.forEach_25(appCtx.viewClassBody, (function (item, index) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, builder_2.writeClass(item, appCtx, wr_2_1)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 16:
                        _b.sent();
                        resFs.saveTo(resDir, appCtx.hasCompilerFlag("show-writes"));
                        _b.label = 17;
                    case 17: return [3 /*break*/, 21];
                    case 18:
                        if (!(typeof (comp_attrs["web_res_dir"]) != "undefined" && comp_attrs.hasOwnProperty("web_res_dir"))) return [3 /*break*/, 20];
                        console.log("--> had web res dir");
                        resDir_1 = (comp_attrs["web_res_dir"]);
                        resFs_1 = new CodeFileSystem();
                        file_3 = resFs_1.getFile(".", "webviews.html");
                        wr_3 = file_3.getWriter();
                        builder_1 = new viewbuilder_Web();
                        return [4 /*yield*/, builder_1.CreateViews(appCtx, wr_3)];
                    case 19:
                        _b.sent();
                        resFs_1.saveTo(resDir_1, appCtx.hasCompilerFlag("show-writes"));
                        _b.label = 20;
                    case 20: return [3 /*break*/, 21];
                    case 21:
                        ;
                        staticMethods = void 0;
                        importFork = wr.fork();
                        contentFork = wr.fork();
                        /** unused:  const theEnd : CodeWriter  = wr.createTag("file_end")   **/
                        wr = contentFork;
                        handledClasses = {};
                        i_4 = 0;
                        _b.label = 22;
                    case 22:
                        if (!(i_4 < appCtx.definedClassList.length)) return [3 /*break*/, 30];
                        cName = appCtx.definedClassList[i_4];
                        if (cName == "RangerStaticMethods") {
                            staticMethods = appCtx.definedClasses[cName];
                            return [3 /*break*/, 29];
                        }
                        cl = appCtx.definedClasses[cName];
                        if (cl.is_operator_class) {
                            return [3 /*break*/, 29];
                        }
                        if (cl.is_trait) {
                            return [3 /*break*/, 29];
                        }
                        if (cl.is_system) {
                            return [3 /*break*/, 29];
                        }
                        if (cl.is_generic_instance) {
                            return [3 /*break*/, 29];
                        }
                        if (cl.is_system_union) {
                            return [3 /*break*/, 29];
                        }
                        if (cl.is_union) {
                            return [3 /*break*/, 29];
                        }
                        if ((typeof (handledClasses[cName]) != "undefined" && handledClasses.hasOwnProperty(cName))) {
                            return [3 /*break*/, 29];
                        }
                        handledClasses[cName] = true;
                        if (!((cl.extends_classes.length) > 0)) return [3 /*break*/, 27];
                        i_5 = 0;
                        _b.label = 23;
                    case 23:
                        if (!(i_5 < cl.extends_classes.length)) return [3 /*break*/, 26];
                        eClassName = cl.extends_classes[i_5];
                        if ((typeof (handledClasses[eClassName]) != "undefined" && handledClasses.hasOwnProperty(eClassName))) {
                            return [3 /*break*/, 25];
                        }
                        parentCl = appCtx.definedClasses[eClassName];
                        return [4 /*yield*/, lcc.WalkNode(parentCl.classNode, appCtx, wr)];
                    case 24:
                        _b.sent();
                        handledClasses[eClassName] = true;
                        _b.label = 25;
                    case 25:
                        i_5++;
                        return [3 /*break*/, 23];
                    case 26:
                        ;
                        _b.label = 27;
                    case 27: return [4 /*yield*/, lcc.WalkNode(cl.classNode, appCtx, wr)];
                    case 28:
                        _b.sent();
                        _b.label = 29;
                    case 29:
                        i_4++;
                        return [3 /*break*/, 22];
                    case 30:
                        ;
                        if (!(typeof (staticMethods) !== "undefined" && staticMethods != null)) return [3 /*break*/, 32];
                        return [4 /*yield*/, lcc.WalkNode(staticMethods.classNode, appCtx, wr)];
                    case 31:
                        _b.sent();
                        _b.label = 32;
                    case 32:
                        i_6 = 0;
                        _b.label = 33;
                    case 33:
                        if (!(i_6 < flowParser.collectedIntefaces.length)) return [3 /*break*/, 36];
                        ifDesc = flowParser.collectedIntefaces[i_6];
                        console.log("should define also interface " + ifDesc.name);
                        return [4 /*yield*/, lcc.langWriter.writeInterface(ifDesc, appCtx, wr)];
                    case 34:
                        _b.sent();
                        _b.label = 35;
                    case 35:
                        i_6++;
                        return [3 /*break*/, 33];
                    case 36:
                        ;
                        i_7 = 0;
                        _b.label = 37;
                    case 37:
                        if (!(i_7 < appCtx.definedClassList.length)) return [3 /*break*/, 42];
                        cName_1 = appCtx.definedClassList[i_7];
                        if ((typeof (handledClasses[cName_1]) != "undefined" && handledClasses.hasOwnProperty(cName_1))) {
                            return [3 /*break*/, 41];
                        }
                        if (cName_1 == "RangerStaticMethods") {
                            staticMethods = appCtx.definedClasses[cName_1];
                            return [3 /*break*/, 41];
                        }
                        cl_1 = appCtx.definedClasses[cName_1];
                        if (cl_1.is_operator_class) {
                            return [3 /*break*/, 41];
                        }
                        if (!cl_1.is_generic_instance) return [3 /*break*/, 39];
                        return [4 /*yield*/, lcc.WalkNode(cl_1.classNode, appCtx, wr)];
                    case 38:
                        _b.sent();
                        _b.label = 39;
                    case 39:
                        if (cl_1.is_trait) {
                            return [3 /*break*/, 41];
                        }
                        if (cl_1.is_system) {
                            return [3 /*break*/, 41];
                        }
                        if (cl_1.is_operator_class) {
                            return [3 /*break*/, 41];
                        }
                        if (cl_1.is_generic_instance) {
                            return [3 /*break*/, 41];
                        }
                        if (cl_1.is_system_union) {
                            return [3 /*break*/, 41];
                        }
                        if (cl_1.is_union) {
                            return [3 /*break*/, 41];
                        }
                        return [4 /*yield*/, lcc.WalkNode(cl_1.classNode, appCtx, wr)];
                    case 40:
                        _b.sent();
                        _b.label = 41;
                    case 41:
                        i_7++;
                        return [3 /*break*/, 37];
                    case 42:
                        ;
                        i_8 = 0;
                        _b.label = 43;
                    case 43:
                        if (!(i_8 < appCtx.definedClassList.length)) return [3 /*break*/, 46];
                        cName_2 = appCtx.definedClassList[i_8];
                        cl_2 = appCtx.definedClasses[cName_2];
                        if (!cl_2.is_operator_class) return [3 /*break*/, 45];
                        return [4 /*yield*/, lcc.WalkNode(cl_2.classNode, appCtx, wr)];
                    case 44:
                        _b.sent();
                        _b.label = 45;
                    case 45:
                        i_8++;
                        return [3 /*break*/, 43];
                    case 46:
                        ;
                        import_list = wr.getImports();
                        if (appCtx.targetLangName == "go") {
                            importFork.out("package main", true);
                            importFork.newline();
                            importFork.out("import (", true);
                            importFork.indent(1);
                        }
                        added_import = {};
                        for (i_9 = 0; i_9 < import_list.length; i_9++) {
                            codeStr = import_list[i_9];
                            if ((typeof (added_import[codeStr]) != "undefined" && added_import.hasOwnProperty(codeStr))) {
                                continue;
                            }
                            added_import[codeStr] = true;
                            switch (appCtx.targetLangName) {
                                case "es6":
                                    parts = codeStr.split(".");
                                    p0 = parts[0];
                                    if ((parts.length) > 1) {
                                        p1 = parts[1];
                                        importFork.out(((((("const " + p1) + " = require('") + p0) + "').") + p1) + ";", true);
                                    }
                                    if ((parts.length) == 1) {
                                        importFork.out(((("const " + p0) + " = require('") + p0) + "');", true);
                                    }
                                    break;
                                case "go":
                                    if ((codeStr.charCodeAt(0)) == (("_".charCodeAt(0)))) {
                                        importFork.out((" _ \"" + (codeStr.substring(1, (codeStr.length)))) + "\"", true);
                                    }
                                    else {
                                        importFork.out(("\"" + codeStr) + "\"", true);
                                    }
                                    break;
                                case "csharp":
                                    importFork.out(("using " + codeStr) + ";", true);
                                    break;
                                case "rust":
                                    importFork.out(("use " + codeStr) + ";", true);
                                    break;
                                case "java7":
                                    importFork.out(("import " + codeStr) + ";", true);
                                    break;
                                case "cpp":
                                    importFork.out("#include  " + codeStr, true);
                                    break;
                                default:
                                    importFork.out("import " + codeStr, true);
                                    break;
                            }
                            ;
                        }
                        ;
                        if (appCtx.targetLangName == "go") {
                            importFork.indent(-1);
                            importFork.out(")", true);
                        }
                        if (!appCtx.hasCompilerSetting("classdoc")) return [3 /*break*/, 48];
                        gen = new RangerDocGenerator();
                        return [4 /*yield*/, gen.createClassDoc(root, appCtx, wr)];
                    case 47:
                        _b.sent();
                        _b.label = 48;
                    case 48:
                        if (!appCtx.hasCompilerSetting("operatordoc")) return [3 /*break*/, 50];
                        gen_1 = new RangerDocGenerator();
                        return [4 /*yield*/, gen_1.createOperatorDoc(root, appCtx, wr)];
                    case 49:
                        _b.sent();
                        _b.label = 50;
                    case 50:
                        VirtualCompiler.displayCompilerErrors(appCtx);
                        ppList_1 = appCtx.findPluginsFor("postprocess");
                        return [4 /*yield*/, operatorsOf.forEach_12(ppList_1, (function (item, index) {
                                try {
                                    var plugin_2 = require(item);
                                    ((new plugin_2.Plugin())["postprocess"])(root, appCtx, wr);
                                }
                                catch (e) {
                                }
                            }))];
                    case 51:
                        _b.sent();
                        res.target_dir = the_target_dir;
                        res.fileSystem = fileSystem;
                        res.ctx = appCtx;
                        return [3 /*break*/, 53];
                    case 52:
                        e_10 = _b.sent();
                        console.log((e_10.toString()));
                        if (typeof (lcc.lastProcessedNode) != "undefined") {
                            console.log("Got compiler error close to");
                            console.log(lcc.lastProcessedNode.getLineAsString());
                            return [2 /*return*/, res];
                        }
                        if (typeof (flowParser.lastProcessedNode) != "undefined") {
                            console.log("Got compiler error close to");
                            console.log(flowParser.lastProcessedNode.getLineAsString());
                            return [2 /*return*/, res];
                        }
                        console.log("Got unknown compiler error");
                        return [3 /*break*/, 53];
                    case 53: return [2 /*return*/, res];
                }
            });
        });
    };
    ;
    // typescript static 
    VirtualCompiler.create_env = function () {
        return __awaiter(this, void 0, void 0, function () {
            var env, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5;
            return __generator(this, function (_6) {
                switch (_6.label) {
                    case 0:
                        env = new InputEnv();
                        env.filesystem = new InputFSFolder();
                        env.commandLine = new CmdParams();
                        _b = (_a = operatorsOf_3).createc95file_4;
                        _c = [env.filesystem, "Lang.clj"];
                        return [4 /*yield*/, (new Promise(function (resolve) { require('fs').readFile("." + '/' + "Lang.clj", 'utf8', function (err, data) { resolve(data); }); }))];
                    case 1:
                        _b.apply(_a, _c.concat([(_6.sent())]));
                        _e = (_d = operatorsOf_3).createc95file_4;
                        _f = [env.filesystem, "stdlib.clj"];
                        return [4 /*yield*/, (new Promise(function (resolve) { require('fs').readFile("../lib/" + '/' + "stdlib.clj", 'utf8', function (err, data) { resolve(data); }); }))];
                    case 2:
                        _e.apply(_d, _f.concat([(_6.sent())]));
                        _h = (_g = operatorsOf_3).createc95file_4;
                        _j = [env.filesystem, "stdops.clj"];
                        return [4 /*yield*/, (new Promise(function (resolve) { require('fs').readFile("../lib/" + '/' + "stdops.clj", 'utf8', function (err, data) { resolve(data); }); }))];
                    case 3:
                        _h.apply(_g, _j.concat([(_6.sent())]));
                        _l = (_k = operatorsOf_3).createc95file_4;
                        _m = [env.filesystem, "Timers.clj"];
                        return [4 /*yield*/, (new Promise(function (resolve) { require('fs').readFile("../lib/" + '/' + "Timers.clj", 'utf8', function (err, data) { resolve(data); }); }))];
                    case 4:
                        _l.apply(_k, _m.concat([(_6.sent())]));
                        _p = (_o = operatorsOf_3).createc95file_4;
                        _q = [env.filesystem, "DOMLib.clj"];
                        return [4 /*yield*/, (new Promise(function (resolve) { require('fs').readFile("../lib/" + '/' + "DOMLib.clj", 'utf8', function (err, data) { resolve(data); }); }))];
                    case 5:
                        _p.apply(_o, _q.concat([(_6.sent())]));
                        _s = (_r = operatorsOf_3).createc95file_4;
                        _t = [env.filesystem, "Ajax.clj"];
                        return [4 /*yield*/, (new Promise(function (resolve) { require('fs').readFile("../lib/" + '/' + "Ajax.clj", 'utf8', function (err, data) { resolve(data); }); }))];
                    case 6:
                        _s.apply(_r, _t.concat([(_6.sent())]));
                        _v = (_u = operatorsOf_3).createc95file_4;
                        _w = [env.filesystem, "Crypto.clj"];
                        return [4 /*yield*/, (new Promise(function (resolve) { require('fs').readFile("../lib/" + '/' + "Crypto.clj", 'utf8', function (err, data) { resolve(data); }); }))];
                    case 7:
                        _v.apply(_u, _w.concat([(_6.sent())]));
                        _y = (_x = operatorsOf_3).createc95file_4;
                        _z = [env.filesystem, "Engine3D.clj"];
                        return [4 /*yield*/, (new Promise(function (resolve) { require('fs').readFile("../lib/" + '/' + "Engine3D.clj", 'utf8', function (err, data) { resolve(data); }); }))];
                    case 8:
                        _y.apply(_x, _z.concat([(_6.sent())]));
                        _1 = (_0 = operatorsOf_3).createc95file_4;
                        _2 = [env.filesystem, "Storage.clj"];
                        return [4 /*yield*/, (new Promise(function (resolve) { require('fs').readFile("../lib/" + '/' + "Storage.clj", 'utf8', function (err, data) { resolve(data); }); }))];
                    case 9:
                        _1.apply(_0, _2.concat([(_6.sent())]));
                        _4 = (_3 = operatorsOf_3).createc95file_4;
                        _5 = [env.filesystem, "JSON.clj"];
                        return [4 /*yield*/, (new Promise(function (resolve) { require('fs').readFile("../lib/" + '/' + "JSON.clj", 'utf8', function (err, data) { resolve(data); }); }))];
                    case 10:
                        _4.apply(_3, _5.concat([(_6.sent())]));
                        operatorsOf_3.createc95file_4(env.filesystem, "hello_world.clj", "\r\n\r\nclass tester {\r\n  static fn main () {\r\n    print \"Hello World!\"\r\n  }\r\n}\r\n\r\n    ");
                        require("fs").writeFileSync("." + "/" + "compileEnv.js", "window._Ranger_compiler_environment_ = " + (JSON.stringify(env.toDictionary())));
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    // typescript static 
    VirtualCompiler.displayCompilerErrors = function (appCtx) {
        var cons = new ColorConsole();
        for (var i = 0; i < appCtx.compilerErrors.length; i++) {
            var e = appCtx.compilerErrors[i];
            var line_index = e.node.getLine();
            cons.out("gray", (e.node.getFilename() + " Line: ") + (1 + line_index));
            cons.out("gray", e.description);
            cons.out("gray", e.node.getLineString(line_index));
            cons.out("", e.node.getColStartString() + "^-------");
        }
        ;
    };
    ;
    // typescript static 
    VirtualCompiler.displayParserErrors = function (appCtx) {
        if ((appCtx.parserErrors.length) == 0) {
            console.log("no language test errors");
            return;
        }
        console.log("LANGUAGE TEST ERRORS:");
        for (var i = 0; i < appCtx.parserErrors.length; i++) {
            var e = appCtx.parserErrors[i];
            var line_index = e.node.getLine();
            console.log((e.node.getFilename() + " Line: ") + (1 + line_index));
            console.log(e.description);
            console.log(e.node.getLineString(line_index));
        }
        ;
    };
    ;
    return VirtualCompiler;
}());
exports.VirtualCompiler = VirtualCompiler;
var CompilerInterface = /** @class */ (function () {
    function CompilerInterface() {
    }
    // typescript static 
    CompilerInterface.create_env = function () {
        var env = new InputEnv();
        env.use_real = true;
        env.commandLine = new CmdParams();
        env.commandLine.collect();
        return env;
    };
    ;
    return CompilerInterface;
}());
exports.CompilerInterface = CompilerInterface;
var operatorsOf = /** @class */ (function () {
    function operatorsOf() {
    }
    // typescript static 
    operatorsOf.forEach_2 = function (__self, cb) {
        for (var i = 0; i < __self.length; i++) {
            var it = __self[i];
            cb(it, i);
        }
        ;
    };
    ;
    // typescript static 
    operatorsOf.filter_6 = function (__self, cb) {
        var res_1 = [];
        for (var i_1 = 0; i_1 < __self.length; i_1++) {
            var it_1 = __self[i_1];
            if (cb(it_1, i_1)) {
                res_1.push(it_1);
            }
        }
        ;
        return res_1;
    };
    ;
    // typescript static 
    operatorsOf.filter_7 = function (__self, cb) {
        var res_2 = [];
        for (var i_2 = 0; i_2 < __self.length; i_2++) {
            var it_2 = __self[i_2];
            if (cb(it_2, i_2)) {
                res_2.push(it_2);
            }
        }
        ;
        return res_2;
    };
    ;
    // typescript static 
    operatorsOf.forEach_10 = function (__self, cb) {
        for (var i_4 = 0; i_4 < __self.length; i_4++) {
            var it_3 = __self[i_4];
            cb(it_3, i_4);
        }
        ;
    };
    ;
    // typescript static 
    operatorsOf.forEach_11 = function (__self, cb) {
        for (var i_5 = 0; i_5 < __self.length; i_5++) {
            var it_4 = __self[i_5];
            cb(it_4, i_5);
        }
        ;
    };
    ;
    // typescript static 
    operatorsOf.forEach_12 = function (__self, cb) {
        return __awaiter(this, void 0, void 0, function () {
            var i_6, it_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i_6 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_6 < __self.length)) return [3 /*break*/, 4];
                        it_5 = __self[i_6];
                        return [4 /*yield*/, cb(it_5, i_6)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i_6++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    // typescript static 
    operatorsOf.forEach_15 = function (__self, cb) {
        return __awaiter(this, void 0, void 0, function () {
            var i_8, it_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i_8 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_8 < __self.length)) return [3 /*break*/, 4];
                        it_6 = __self[i_8];
                        return [4 /*yield*/, cb(it_6, i_8)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i_8++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    // typescript static 
    operatorsOf.forEach_17 = function (__self, cb) {
        return __awaiter(this, void 0, void 0, function () {
            var i_10, it_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i_10 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_10 < __self.length)) return [3 /*break*/, 4];
                        it_7 = __self[i_10];
                        return [4 /*yield*/, cb(it_7, i_10)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i_10++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    // typescript static 
    operatorsOf.clone_18 = function (__self) {
        var res_5 = [];
        for (var i_11 = 0; i_11 < __self.length; i_11++) {
            var it_8 = __self[i_11];
            res_5.push(it_8);
        }
        ;
        return res_5;
    };
    ;
    // typescript static 
    operatorsOf.forEach_29 = function (__self, cb) {
        return __awaiter(this, void 0, void 0, function () {
            var i_15, it_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i_15 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_15 < __self.length)) return [3 /*break*/, 4];
                        it_9 = __self[i_15];
                        return [4 /*yield*/, cb(it_9, i_15)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i_15++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    // typescript static 
    operatorsOf.forEach_31 = function (__self, cb) {
        for (var i_17 = 0; i_17 < __self.length; i_17++) {
            var it_10 = __self[i_17];
            cb(it_10, i_17);
        }
        ;
    };
    ;
    // typescript static 
    operatorsOf.filter_32 = function (__self, cb) {
        var res_6 = [];
        for (var i_18 = 0; i_18 < __self.length; i_18++) {
            var it_11 = __self[i_18];
            if (cb(it_11, i_18)) {
                res_6.push(it_11);
            }
        }
        ;
        return res_6;
    };
    ;
    // typescript static 
    operatorsOf.filter_36 = function (__self, cb) {
        var res_7 = [];
        for (var i_19 = 0; i_19 < __self.length; i_19++) {
            var it_12 = __self[i_19];
            if (cb(it_12, i_19)) {
                res_7.push(it_12);
            }
        }
        ;
        return res_7;
    };
    ;
    // typescript static 
    operatorsOf.forEach_37 = function (__self, cb) {
        for (var i_20 = 0; i_20 < __self.length; i_20++) {
            var it_13 = __self[i_20];
            cb(it_13, i_20);
        }
        ;
    };
    ;
    // typescript static 
    operatorsOf.map_44 = function (__self, cb) {
        /** unused:  const __len : number  = __self.length   **/
        var res_8 = [];
        for (var i_23 = 0; i_23 < __self.length; i_23++) {
            var it_14 = __self[i_23];
            res_8.push(cb(it_14, i_23));
        }
        ;
        return res_8;
    };
    ;
    // typescript static 
    operatorsOf.map_45 = function (__self, cb) {
        /** unused:  const len_1 : number  = __self.length   **/
        var res_9 = [];
        for (var i_24 = 0; i_24 < __self.length; i_24++) {
            var it_15 = __self[i_24];
            res_9.push(cb(it_15, i_24));
        }
        ;
        return res_9;
    };
    ;
    // typescript static 
    operatorsOf.clone_46 = function (__self) {
        var res_10 = [];
        for (var i_25 = 0; i_25 < __self.length; i_25++) {
            var it_16 = __self[i_25];
            res_10.push(it_16);
        }
        ;
        return res_10;
    };
    ;
    // typescript static 
    operatorsOf.map_47 = function (__self, cb) {
        /** unused:  const len_2 : number  = __self.length   **/
        var res_11 = [];
        for (var i_26 = 0; i_26 < __self.length; i_26++) {
            var it_17 = __self[i_26];
            res_11.push(cb(it_17, i_26));
        }
        ;
        return res_11;
    };
    ;
    // typescript static 
    operatorsOf.filter_50 = function (__self, cb) {
        var res_12 = [];
        for (var i_27 = 0; i_27 < __self.length; i_27++) {
            var it_18 = __self[i_27];
            if (cb(it_18, i_27)) {
                res_12.push(it_18);
            }
        }
        ;
        return res_12;
    };
    ;
    // typescript static 
    operatorsOf.filter_52 = function (__self, cb) {
        var res_13 = [];
        for (var i_28 = 0; i_28 < __self.length; i_28++) {
            var it_19 = __self[i_28];
            if (cb(it_19, i_28)) {
                res_13.push(it_19);
            }
        }
        ;
        return res_13;
    };
    ;
    // typescript static 
    operatorsOf.groupBy_53 = function (__self, cb) {
        var res_14 = [];
        var mapper = {};
        for (var i_29 = 0; i_29 < __self.length; i_29++) {
            var it_20 = __self[i_29];
            var key = cb(it_20);
            if (false == ((typeof (mapper[key]) != "undefined" && mapper.hasOwnProperty(key)))) {
                res_14.push(it_20);
                mapper[key] = true;
            }
        }
        ;
        return res_14;
    };
    ;
    // typescript static 
    operatorsOf.clone_56 = function (__self) {
        var res_15 = [];
        for (var i_31 = 0; i_31 < __self.length; i_31++) {
            var it_21 = __self[i_31];
            res_15.push(it_21);
        }
        ;
        return res_15;
    };
    ;
    return operatorsOf;
}());
var operatorsOfInputFSFolder_3 = /** @class */ (function () {
    function operatorsOfInputFSFolder_3() {
    }
    // typescript static 
    operatorsOfInputFSFolder_3.createc95file_4 = function (fs, name, data) {
        var f_1 = operatorsOf_3.createc95file_5(fs, name);
        if ((typeof (f_1) !== "undefined" && f_1 != null)) {
            f_1.data = data;
        }
        return f_1;
    };
    ;
    return operatorsOfInputFSFolder_3;
}());
var operatorsOf_3 = /** @class */ (function () {
    function operatorsOf_3() {
    }
    // typescript static 
    operatorsOf_3.createc95file_5 = function (fs, name) {
        var res;
        var files = operatorsOf.filter_6(fs.files, (function (item, index) {
            return item.name == name;
        }));
        var folders = operatorsOf.filter_7(fs.folders, (function (item, index) {
            return item.name == name;
        }));
        if (false == ((folders.length) > 0)) {
            if ((files.length) > 0) {
                res = files[0];
            }
            else {
                var f = new InputFSFile();
                f.name = name;
                fs.files.push(f);
                res = f;
            }
        }
        return res;
    };
    ;
    // typescript static 
    operatorsOf_3.createc95file_4 = function (fs, name, data) {
        var f_2 = operatorsOf_3.createc95file_5(fs, name);
        if ((typeof (f_2) !== "undefined" && f_2 != null)) {
            f_2.data = data;
        }
        return f_2;
    };
    ;
    // typescript static 
    operatorsOf_3.createc95folder_5 = function (fs, name) {
        var res_3;
        var files_1 = operatorsOf.filter_6(fs.files, (function (item, index) {
            return item.name == name;
        }));
        var folders_1 = operatorsOf.filter_7(fs.folders, (function (item, index) {
            return item.name == name;
        }));
        if (false == ((files_1.length) > 0)) {
            if ((folders_1.length) > 0) {
                res_3 = folders_1[0];
            }
            else {
                var f_3 = new InputFSFolder();
                f_3.name = name;
                fs.folders.push(f_3);
                res_3 = f_3;
            }
        }
        return res_3;
    };
    ;
    return operatorsOf_3;
}());
var operatorsOfInputEnv_8 = /** @class */ (function () {
    function operatorsOfInputEnv_8() {
    }
    // typescript static 
    operatorsOfInputEnv_8.readc95file_9 = function (env, path, name) {
        return __awaiter(this, void 0, void 0, function () {
            var resStr, f_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!env.use_real) return [3 /*break*/, 2];
                        return [4 /*yield*/, (new Promise(function (resolve) { require('fs').readFile(path + '/' + name, 'utf8', function (err, data) { resolve(data); }); }))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        f_4 = operatorsOf_8.findc95file_9(env, path, name);
                        if ((typeof (f_4) !== "undefined" && f_4 != null)) {
                            resStr = f_4.data;
                        }
                        return [2 /*return*/, resStr];
                }
            });
        });
    };
    ;
    return operatorsOfInputEnv_8;
}());
var operatorsOf_8 = /** @class */ (function () {
    function operatorsOf_8() {
    }
    // typescript static 
    operatorsOf_8.findc95file_9 = function (env, path, name) {
        var res_4;
        if (path == "/") {
            var files_2 = operatorsOf.filter_6(env.filesystem.files, (function (item, index) {
                return item.name == name;
            }));
            if ((files_2.length) > 0) {
                res_4 = files_2[0];
            }
            return res_4;
        }
        var parts = path.split("/");
        var fold = env.filesystem;
        var i_3 = 0;
        var _loop_9 = function () {
            var pathName = parts[i_3];
            if ((pathName.length) > 0) {
                var folder = operatorsOf.filter_7(fold.folders, (function (item, index) {
                    return item.name == pathName;
                }));
                if ((folder.length) > 0) {
                    fold = folder[0];
                }
                else {
                    return { value: res_4 };
                }
            }
            i_3 = i_3 + 1;
        };
        while (((parts.length) > i_3) && ((typeof (fold) !== "undefined" && fold != null))) {
            var state_6 = _loop_9();
            if (typeof state_6 === "object")
                return state_6.value;
        }
        ;
        if ((typeof (fold) !== "undefined" && fold != null)) {
            var files_3 = operatorsOf.filter_6(fold.files, (function (item, index) {
                return item.name == name;
            }));
            if ((files_3.length) > 0) {
                res_4 = files_3[0];
            }
        }
        return res_4;
    };
    ;
    // typescript static 
    operatorsOf_8.readc95file_9 = function (env, path, name) {
        return __awaiter(this, void 0, void 0, function () {
            var resStr_1, f_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!env.use_real) return [3 /*break*/, 2];
                        return [4 /*yield*/, (new Promise(function (resolve) { require('fs').readFile(path + '/' + name, 'utf8', function (err, data) { resolve(data); }); }))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        f_5 = operatorsOf_8.findc95file_9(env, path, name);
                        if ((typeof (f_5) !== "undefined" && f_5 != null)) {
                            resStr_1 = f_5.data;
                        }
                        return [2 /*return*/, resStr_1];
                }
            });
        });
    };
    ;
    // typescript static 
    operatorsOf_8.filec95exists_9 = function (env, path, name) {
        if (env.use_real) {
            return require("fs").existsSync(path + "/" + name);
        }
        var fo = operatorsOf_8.findc95file_9(env, path, name);
        return (typeof (fo) !== "undefined" && fo != null);
    };
    ;
    // typescript static 
    operatorsOf_8.installc95directory_51 = function (env) {
        if (env.use_real) {
            return __dirname;
        }
        return "/";
    };
    ;
    // typescript static 
    operatorsOf_8.envc95var_54 = function (env, name) {
        if (env.use_real) {
            if ((typeof (env.envVars[name]) != "undefined" && env.envVars.hasOwnProperty(name))) {
                return (env.envVars[name]);
            }
            var ev = process.env[name];
            if ((typeof (ev) !== "undefined" && ev != null)) {
                return ev;
            }
            return "";
        }
        return ((typeof ((env.envVars[name])) !== "undefined" && (env.envVars[name]) != null)) ? ((env.envVars[name])) : "";
    };
    ;
    // typescript static 
    operatorsOf_8.currentc95directory_51 = function (env) {
        if (env.use_real) {
            return process.cwd();
        }
        return "/";
    };
    ;
    return operatorsOf_8;
}());
var operatorsOf_13 = /** @class */ (function () {
    function operatorsOf_13() {
    }
    // typescript static 
    operatorsOf_13.forEach_14 = function (__self, cb) {
        return __awaiter(this, void 0, void 0, function () {
            var list, i_7, kk, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        list = Object.keys(__self);
                        i_7 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_7 < list.length)) return [3 /*break*/, 4];
                        kk = list[i_7];
                        value = (__self[kk]);
                        return [4 /*yield*/, cb(value, kk)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i_7++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    // typescript static 
    operatorsOf_13.forEach_16 = function (__self, cb) {
        return __awaiter(this, void 0, void 0, function () {
            var list_1, i_9, kk_1, value_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        list_1 = Object.keys(__self);
                        i_9 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_9 < list_1.length)) return [3 /*break*/, 4];
                        kk_1 = list_1[i_9];
                        value_1 = (__self[kk_1]);
                        return [4 /*yield*/, cb(value_1, kk_1)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i_9++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    // typescript static 
    operatorsOf_13.forEach_19 = function (__self, cb) {
        return __awaiter(this, void 0, void 0, function () {
            var list_2, i_12, kk_2, value_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        list_2 = Object.keys(__self);
                        i_12 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_12 < list_2.length)) return [3 /*break*/, 4];
                        kk_2 = list_2[i_12];
                        value_2 = (__self[kk_2]);
                        return [4 /*yield*/, cb(value_2, kk_2)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i_12++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    // typescript static 
    operatorsOf_13.forEach_20 = function (__self, cb) {
        return __awaiter(this, void 0, void 0, function () {
            var list_3, i_13, kk_3, value_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        list_3 = Object.keys(__self);
                        i_13 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_13 < list_3.length)) return [3 /*break*/, 4];
                        kk_3 = list_3[i_13];
                        value_3 = (__self[kk_3]);
                        return [4 /*yield*/, cb(value_3, kk_3)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i_13++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    // typescript static 
    operatorsOf_13.forEach_25 = function (__self, cb) {
        return __awaiter(this, void 0, void 0, function () {
            var list_4, i_14, kk_4, value_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        list_4 = Object.keys(__self);
                        i_14 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_14 < list_4.length)) return [3 /*break*/, 4];
                        kk_4 = list_4[i_14];
                        value_4 = (__self[kk_4]);
                        return [4 /*yield*/, cb(value_4, kk_4)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i_14++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    // typescript static 
    operatorsOf_13.forEach_30 = function (__self, cb) {
        return __awaiter(this, void 0, void 0, function () {
            var list_5, i_16, kk_5, value_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        list_5 = Object.keys(__self);
                        i_16 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i_16 < list_5.length)) return [3 /*break*/, 4];
                        kk_5 = list_5[i_16];
                        value_5 = (__self[kk_5]);
                        return [4 /*yield*/, cb(value_5, kk_5)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i_16++;
                        return [3 /*break*/, 1];
                    case 4:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    // typescript static 
    operatorsOf_13.forEach_40 = function (__self, cb) {
        var list_6 = Object.keys(__self);
        for (var i_22 = 0; i_22 < list_6.length; i_22++) {
            var kk_6 = list_6[i_22];
            var value_6 = (__self[kk_6]);
            cb(value_6, kk_6);
        }
        ;
    };
    ;
    // typescript static 
    operatorsOf_13.forEach_55 = function (__self, cb) {
        var list_7 = Object.keys(__self);
        for (var i_30 = 0; i_30 < list_7.length; i_30++) {
            var kk_7 = list_7[i_30];
            var value_7 = (__self[kk_7]);
            cb(value_7, kk_7);
        }
        ;
    };
    ;
    return operatorsOf_13;
}());
var operatorsOfRangerAppWriterContext_21 = /** @class */ (function () {
    function operatorsOfRangerAppWriterContext_21() {
    }
    // typescript static 
    operatorsOfRangerAppWriterContext_21.getTargetLang_22 = function (__self) {
        if ((__self.targetLangName.length) > 0) {
            return __self.targetLangName;
        }
        if (typeof (__self.parent) != "undefined") {
            return operatorsOf_21.getTargetLang_22((__self.parent));
        }
        return "ranger";
    };
    ;
    return operatorsOfRangerAppWriterContext_21;
}());
var operatorsOf_21 = /** @class */ (function () {
    function operatorsOf_21() {
    }
    // typescript static 
    operatorsOf_21.getTargetLang_22 = function (__self) {
        if ((__self.targetLangName.length) > 0) {
            return __self.targetLangName;
        }
        if (typeof (__self.parent) != "undefined") {
            return operatorsOf_21.getTargetLang_22((__self.parent));
        }
        return "ranger";
    };
    ;
    // typescript static 
    operatorsOf_21.addUsage_28 = function (__self, cn) {
        var ctx = __self;
        var currM = ctx.getCurrentMethod();
        if (ctx.isDefinedClass(cn.type_name)) {
            var cl = ctx.findClass(cn.type_name);
            currM.addClassUsage(cl, ctx);
        }
        if (ctx.isDefinedClass(cn.eval_type_name)) {
            var cl_1 = ctx.findClass(cn.eval_type_name);
            currM.addClassUsage(cl_1, ctx);
        }
        if (ctx.isDefinedClass(cn.eval_array_type)) {
            var cl_2 = ctx.findClass(cn.eval_array_type);
            currM.addClassUsage(cl_2, ctx);
        }
    };
    ;
    // typescript static 
    operatorsOf_21.getActiveTransaction_22 = function (c) {
        var rValue;
        if ((c.activeTransaction.length) > 0) {
            rValue = c.activeTransaction[((c.activeTransaction.length) - 1)];
        }
        else {
            if ((typeof (c.parent) !== "undefined" && c.parent != null)) {
                return operatorsOf_21.getActiveTransaction_22((c.parent));
            }
        }
        return rValue;
    };
    ;
    // typescript static 
    operatorsOf_21.createc95var_48 = function (__self, name, type_name) {
        var fieldNode = CodeNode.vref2(name, type_name);
        fieldNode.value_type = fieldNode.typeNameAsType(__self);
        var p_2 = new RangerAppParamDesc();
        p_2.name = name;
        p_2.value_type = fieldNode.value_type;
        p_2.node = fieldNode;
        p_2.nameNode = fieldNode;
        p_2.is_optional = false;
        __self.defineVariable(p_2.name, p_2);
        return p_2;
    };
    ;
    // typescript static 
    operatorsOf_21.createc95var_49 = function (__self, name, usingNode) {
        /** unused:  const fieldNode_1 : CodeNode  = CodeNode.vref1(name)   **/
        var p_3 = new RangerAppParamDesc();
        p_3.name = name;
        p_3.value_type = usingNode.value_type;
        p_3.node = usingNode;
        p_3.nameNode = usingNode;
        p_3.is_optional = false;
        __self.defineVariable(p_3.name, p_3);
        return p_3;
    };
    ;
    return operatorsOf_21;
}());
var operatorsOfchar_23 = /** @class */ (function () {
    function operatorsOfchar_23() {
    }
    // typescript static 
    operatorsOfchar_23.isc95notc95limiter_24 = function (c) {
        return (((((c > 32) && (c != (59))) && (c != (41))) && (c != (40))) && (c != (125))) && (c != (44));
    };
    ;
    return operatorsOfchar_23;
}());
var operatorsOfRangerFlowParser_26 = /** @class */ (function () {
    function operatorsOfRangerFlowParser_26() {
    }
    // typescript static 
    operatorsOfRangerFlowParser_26.EnterVarDef_27 = function (__self, node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var tName, cn, p, defaultArg, is_immutable, paramDesc, ann, fc, ann_1, fc_1, rr, b1, b2, cn_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!ctx.isInMethod()) return [3 /*break*/, 11];
                        if ((node.children.length) < 2) {
                            ctx.addError(node, "invalid variable definition");
                            return [2 /*return*/];
                        }
                        tName = node.getSecond();
                        return [4 /*yield*/, __self.CheckTypeAnnotationOf(tName, ctx, wr)];
                    case 1:
                        _a.sent();
                        if (!tName.expression) return [3 /*break*/, 3];
                        node.children.splice(1, 1);
                        return [4 /*yield*/, operatorsOf.forEach_15(tName.children, (function (item, index) {
                                if (index == 1) {
                                    if (item.expression) {
                                        node.children.push(((item.children[0])).copy());
                                    }
                                    else {
                                        node.children.push(item.copy());
                                    }
                                }
                                if (index > 1) {
                                    node.children.push(item.copy());
                                }
                            }))];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        if ((node.children.length) > 3) {
                            ctx.addError(node, "invalid variable definition");
                            return [2 /*return*/];
                        }
                        cn = node.children[1];
                        p = new RangerAppParamDesc();
                        defaultArg = void 0;
                        is_immutable = false;
                        cn.definedTypeClass = TFactory.new_def_signature(cn, ctx, wr);
                        if ((node.children.length) == 2) {
                            if ((cn.value_type != 6) && (cn.value_type != 7)) {
                                if (false == cn.hasFlag("unwrap")) {
                                    cn.setFlag("optional");
                                }
                            }
                        }
                        if ((cn.vref.length) == 0) {
                            ctx.addError(node, "invalid variable definition");
                        }
                        if (cn.hasFlag("weak")) {
                            p.changeStrength(0, 1, node);
                        }
                        else {
                            p.changeStrength(1, 1, node);
                        }
                        node.hasVarDef = true;
                        if (!((node.children.length) > 2)) return [3 /*break*/, 5];
                        p.init_cnt = 1;
                        p.def_value = node.children[2];
                        p.is_optional = false;
                        defaultArg = node.children[2];
                        ctx.setInExpr();
                        return [4 /*yield*/, __self.WalkNode(defaultArg, ctx, wr)];
                    case 4:
                        _a.sent();
                        ctx.unsetInExpr();
                        if (defaultArg.hasFlag("optional")) {
                            cn.setFlag("optional");
                        }
                        if (defaultArg.hasFlag("immutable")) {
                            cn.setFlag("immutable");
                        }
                        if (defaultArg.hasParamDesc) {
                            paramDesc = defaultArg.paramDesc;
                            if ((typeof (paramDesc.propertyClass) !== "undefined" && paramDesc.propertyClass != null)) {
                                if (paramDesc.propertyClass.nameNode.hasFlag("immutable")) {
                                    if ((defaultArg.eval_type == 6) || (defaultArg.eval_type == 7)) {
                                        is_immutable = true;
                                    }
                                }
                            }
                            if (paramDesc.is_immutable) {
                                is_immutable = true;
                            }
                        }
                        if (defaultArg.eval_type == 6) {
                            node.op_index = 1;
                        }
                        if (cn.value_type == 13) {
                            cn.eval_type_name = defaultArg.ns[0];
                        }
                        if (cn.value_type == 14) {
                            if ((defaultArg.eval_type != 3) && (defaultArg.eval_type != 14)) {
                                ctx.addError(defaultArg, "Char should be assigned char or integer value --> " + defaultArg.getCode());
                            }
                            else {
                                defaultArg.eval_type = 14;
                            }
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        if (((cn.value_type != 7) && (cn.value_type != 6)) && (false == cn.hasFlag("optional"))) {
                            if (cn.hasFlag("unwrap")) {
                            }
                            else {
                                cn.setFlag("optional");
                            }
                        }
                        _a.label = 6;
                    case 6:
                        if ((node.children.length) > 2) {
                            if (((cn.type_name.length) == 0) && ((cn.array_type.length) == 0)) {
                                cn.inferDefTypeFromValue(node);
                                if (cn.value_type == 17) {
                                    cn.eval_type = 17;
                                }
                            }
                        }
                        ctx.hadValidType(cn);
                        cn.defineNodeTypeTo(cn, ctx);
                        p.name = cn.vref;
                        if (p.value_type == 0) {
                            if ((0 == (cn.type_name.length)) && ((typeof (defaultArg) !== "undefined" && defaultArg != null))) {
                                p.value_type = defaultArg.eval_type;
                                cn.type_name = defaultArg.eval_type_name;
                                cn.eval_type_name = defaultArg.eval_type_name;
                                cn.value_type = defaultArg.eval_type;
                            }
                        }
                        else {
                            p.value_type = cn.value_type;
                        }
                        p.node = node;
                        p.nameNode = cn;
                        p.varType = 5;
                        if (is_immutable) {
                            p.is_immutable = is_immutable;
                        }
                        if (cn.has_vref_annotation) {
                            ctx.log(node, "ann", "At a variable -> Found has_vref_annotation annotated reference ");
                            ann = cn.vref_annotation;
                            if ((ann.children.length) > 0) {
                                fc = ann.children[0];
                                ctx.log(node, "ann", (("value of first annotation " + fc.vref) + " and variable name ") + cn.vref);
                            }
                        }
                        if (cn.has_type_annotation) {
                            ctx.log(node, "ann", "At a variable -> Found annotated reference ");
                            ann_1 = cn.type_annotation;
                            if ((ann_1.children.length) > 0) {
                                fc_1 = ann_1.children[0];
                                ctx.log(node, "ann", (("value of first annotation " + fc_1.vref) + " and variable name ") + cn.vref);
                            }
                        }
                        cn.hasParamDesc = true;
                        cn.ownParamDesc = p;
                        cn.paramDesc = p;
                        node.hasParamDesc = true;
                        node.paramDesc = p;
                        cn.eval_type = cn.typeNameAsType(ctx);
                        cn.eval_type_name = cn.type_name;
                        if (!((node.children.length) > 2)) return [3 /*break*/, 9];
                        if ((defaultArg.register_name.length) > 0) {
                            rr = ctx.getVariableDef(defaultArg.register_name);
                            if ((typeof (rr.nameNode) !== "undefined" && rr.nameNode != null)) {
                                if ((typeof (rr.nameNode.expression_value) !== "undefined" && rr.nameNode.expression_value != null)) {
                                    cn.expression_value = rr.nameNode.expression_value.copy();
                                }
                            }
                        }
                        if (defaultArg.eval_type == 17) {
                            if ((typeof (defaultArg.expression_value) !== "undefined" && defaultArg.expression_value != null)) {
                                cn.expression_value = defaultArg.expression_value.copy();
                            }
                            else {
                                if (defaultArg.hasParamDesc) {
                                    if (((typeof (defaultArg.paramDesc.nameNode) !== "undefined" && defaultArg.paramDesc.nameNode != null)) && ((typeof (defaultArg.paramDesc.nameNode.expression_value) !== "undefined" && defaultArg.paramDesc.nameNode.expression_value != null))) {
                                        cn.eval_type = 17;
                                        cn.expression_value = defaultArg.paramDesc.nameNode.expression_value.copy();
                                    }
                                }
                            }
                        }
                        if (!(typeof (defaultArg) !== "undefined" && defaultArg != null)) return [3 /*break*/, 8];
                        return [4 /*yield*/, __self.convertToUnion(cn.eval_type_name, defaultArg, ctx, wr)];
                    case 7:
                        _a.sent();
                        if ((typeof (defaultArg.evalTypeClass) !== "undefined" && defaultArg.evalTypeClass != null)) {
                            cn.evalTypeClass = defaultArg.evalTypeClass;
                        }
                        _a.label = 8;
                    case 8:
                        if (cn.eval_type != defaultArg.eval_type) {
                            b1 = (cn.eval_type == 14) && (defaultArg.eval_type == 3);
                            b2 = (cn.eval_type == 3) && (defaultArg.eval_type == 14);
                            if (false == (b1 || b2)) {
                                ctx.addError(node, (("Variable was assigned an incompatible type. Types were " + cn.eval_type) + " vs ") + defaultArg.eval_type);
                            }
                        }
                        return [3 /*break*/, 10];
                    case 9:
                        p.is_optional = true;
                        _a.label = 10;
                    case 10:
                        ctx.defineVariable(p.name, p);
                        if ((node.children.length) > 2) {
                            __self.shouldBeEqualTypes(cn, p.def_value, ctx, "Variable was assigned an incompatible type.");
                        }
                        operatorsOf_21.addUsage_28(ctx, cn);
                        return [3 /*break*/, 12];
                    case 11:
                        cn_1 = node.children[1];
                        cn_1.eval_type = cn_1.typeNameAsType(ctx);
                        cn_1.eval_type_name = cn_1.type_name;
                        if ((node.children.length) > 2) {
                            __self.shouldBeEqualTypes(node.children[1], node.children[2], ctx, "Variable was assigned an incompatible type.");
                        }
                        _a.label = 12;
                    case 12: return [2 /*return*/];
                }
            });
        });
    };
    ;
    return operatorsOfRangerFlowParser_26;
}());
var operatorsOf_26 = /** @class */ (function () {
    function operatorsOf_26() {
    }
    // typescript static 
    operatorsOf_26.EnterVarDef_27 = function (__self, node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var tName_1, cn_2, p_1, defaultArg_1, is_immutable_1, paramDesc_1, ann_2, fc_2, ann_3, fc_3, rr_1, b1_1, b2_1, cn_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!ctx.isInMethod()) return [3 /*break*/, 11];
                        if ((node.children.length) < 2) {
                            ctx.addError(node, "invalid variable definition");
                            return [2 /*return*/];
                        }
                        tName_1 = node.getSecond();
                        return [4 /*yield*/, __self.CheckTypeAnnotationOf(tName_1, ctx, wr)];
                    case 1:
                        _a.sent();
                        if (!tName_1.expression) return [3 /*break*/, 3];
                        node.children.splice(1, 1);
                        return [4 /*yield*/, operatorsOf.forEach_15(tName_1.children, (function (item, index) {
                                if (index == 1) {
                                    if (item.expression) {
                                        node.children.push(((item.children[0])).copy());
                                    }
                                    else {
                                        node.children.push(item.copy());
                                    }
                                }
                                if (index > 1) {
                                    node.children.push(item.copy());
                                }
                            }))];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        if ((node.children.length) > 3) {
                            ctx.addError(node, "invalid variable definition");
                            return [2 /*return*/];
                        }
                        cn_2 = node.children[1];
                        p_1 = new RangerAppParamDesc();
                        defaultArg_1 = void 0;
                        is_immutable_1 = false;
                        cn_2.definedTypeClass = TFactory.new_def_signature(cn_2, ctx, wr);
                        if ((node.children.length) == 2) {
                            if ((cn_2.value_type != 6) && (cn_2.value_type != 7)) {
                                if (false == cn_2.hasFlag("unwrap")) {
                                    cn_2.setFlag("optional");
                                }
                            }
                        }
                        if ((cn_2.vref.length) == 0) {
                            ctx.addError(node, "invalid variable definition");
                        }
                        if (cn_2.hasFlag("weak")) {
                            p_1.changeStrength(0, 1, node);
                        }
                        else {
                            p_1.changeStrength(1, 1, node);
                        }
                        node.hasVarDef = true;
                        if (!((node.children.length) > 2)) return [3 /*break*/, 5];
                        p_1.init_cnt = 1;
                        p_1.def_value = node.children[2];
                        p_1.is_optional = false;
                        defaultArg_1 = node.children[2];
                        ctx.setInExpr();
                        return [4 /*yield*/, __self.WalkNode(defaultArg_1, ctx, wr)];
                    case 4:
                        _a.sent();
                        ctx.unsetInExpr();
                        if (defaultArg_1.hasFlag("optional")) {
                            cn_2.setFlag("optional");
                        }
                        if (defaultArg_1.hasFlag("immutable")) {
                            cn_2.setFlag("immutable");
                        }
                        if (defaultArg_1.hasParamDesc) {
                            paramDesc_1 = defaultArg_1.paramDesc;
                            if ((typeof (paramDesc_1.propertyClass) !== "undefined" && paramDesc_1.propertyClass != null)) {
                                if (paramDesc_1.propertyClass.nameNode.hasFlag("immutable")) {
                                    if ((defaultArg_1.eval_type == 6) || (defaultArg_1.eval_type == 7)) {
                                        is_immutable_1 = true;
                                    }
                                }
                            }
                            if (paramDesc_1.is_immutable) {
                                is_immutable_1 = true;
                            }
                        }
                        if (defaultArg_1.eval_type == 6) {
                            node.op_index = 1;
                        }
                        if (cn_2.value_type == 13) {
                            cn_2.eval_type_name = defaultArg_1.ns[0];
                        }
                        if (cn_2.value_type == 14) {
                            if ((defaultArg_1.eval_type != 3) && (defaultArg_1.eval_type != 14)) {
                                ctx.addError(defaultArg_1, "Char should be assigned char or integer value --> " + defaultArg_1.getCode());
                            }
                            else {
                                defaultArg_1.eval_type = 14;
                            }
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        if (((cn_2.value_type != 7) && (cn_2.value_type != 6)) && (false == cn_2.hasFlag("optional"))) {
                            if (cn_2.hasFlag("unwrap")) {
                            }
                            else {
                                cn_2.setFlag("optional");
                            }
                        }
                        _a.label = 6;
                    case 6:
                        if ((node.children.length) > 2) {
                            if (((cn_2.type_name.length) == 0) && ((cn_2.array_type.length) == 0)) {
                                cn_2.inferDefTypeFromValue(node);
                                if (cn_2.value_type == 17) {
                                    cn_2.eval_type = 17;
                                }
                            }
                        }
                        ctx.hadValidType(cn_2);
                        cn_2.defineNodeTypeTo(cn_2, ctx);
                        p_1.name = cn_2.vref;
                        if (p_1.value_type == 0) {
                            if ((0 == (cn_2.type_name.length)) && ((typeof (defaultArg_1) !== "undefined" && defaultArg_1 != null))) {
                                p_1.value_type = defaultArg_1.eval_type;
                                cn_2.type_name = defaultArg_1.eval_type_name;
                                cn_2.eval_type_name = defaultArg_1.eval_type_name;
                                cn_2.value_type = defaultArg_1.eval_type;
                            }
                        }
                        else {
                            p_1.value_type = cn_2.value_type;
                        }
                        p_1.node = node;
                        p_1.nameNode = cn_2;
                        p_1.varType = 5;
                        if (is_immutable_1) {
                            p_1.is_immutable = is_immutable_1;
                        }
                        if (cn_2.has_vref_annotation) {
                            ctx.log(node, "ann", "At a variable -> Found has_vref_annotation annotated reference ");
                            ann_2 = cn_2.vref_annotation;
                            if ((ann_2.children.length) > 0) {
                                fc_2 = ann_2.children[0];
                                ctx.log(node, "ann", (("value of first annotation " + fc_2.vref) + " and variable name ") + cn_2.vref);
                            }
                        }
                        if (cn_2.has_type_annotation) {
                            ctx.log(node, "ann", "At a variable -> Found annotated reference ");
                            ann_3 = cn_2.type_annotation;
                            if ((ann_3.children.length) > 0) {
                                fc_3 = ann_3.children[0];
                                ctx.log(node, "ann", (("value of first annotation " + fc_3.vref) + " and variable name ") + cn_2.vref);
                            }
                        }
                        cn_2.hasParamDesc = true;
                        cn_2.ownParamDesc = p_1;
                        cn_2.paramDesc = p_1;
                        node.hasParamDesc = true;
                        node.paramDesc = p_1;
                        cn_2.eval_type = cn_2.typeNameAsType(ctx);
                        cn_2.eval_type_name = cn_2.type_name;
                        if (!((node.children.length) > 2)) return [3 /*break*/, 9];
                        if ((defaultArg_1.register_name.length) > 0) {
                            rr_1 = ctx.getVariableDef(defaultArg_1.register_name);
                            if ((typeof (rr_1.nameNode) !== "undefined" && rr_1.nameNode != null)) {
                                if ((typeof (rr_1.nameNode.expression_value) !== "undefined" && rr_1.nameNode.expression_value != null)) {
                                    cn_2.expression_value = rr_1.nameNode.expression_value.copy();
                                }
                            }
                        }
                        if (defaultArg_1.eval_type == 17) {
                            if ((typeof (defaultArg_1.expression_value) !== "undefined" && defaultArg_1.expression_value != null)) {
                                cn_2.expression_value = defaultArg_1.expression_value.copy();
                            }
                            else {
                                if (defaultArg_1.hasParamDesc) {
                                    if (((typeof (defaultArg_1.paramDesc.nameNode) !== "undefined" && defaultArg_1.paramDesc.nameNode != null)) && ((typeof (defaultArg_1.paramDesc.nameNode.expression_value) !== "undefined" && defaultArg_1.paramDesc.nameNode.expression_value != null))) {
                                        cn_2.eval_type = 17;
                                        cn_2.expression_value = defaultArg_1.paramDesc.nameNode.expression_value.copy();
                                    }
                                }
                            }
                        }
                        if (!(typeof (defaultArg_1) !== "undefined" && defaultArg_1 != null)) return [3 /*break*/, 8];
                        return [4 /*yield*/, __self.convertToUnion(cn_2.eval_type_name, defaultArg_1, ctx, wr)];
                    case 7:
                        _a.sent();
                        if ((typeof (defaultArg_1.evalTypeClass) !== "undefined" && defaultArg_1.evalTypeClass != null)) {
                            cn_2.evalTypeClass = defaultArg_1.evalTypeClass;
                        }
                        _a.label = 8;
                    case 8:
                        if (cn_2.eval_type != defaultArg_1.eval_type) {
                            b1_1 = (cn_2.eval_type == 14) && (defaultArg_1.eval_type == 3);
                            b2_1 = (cn_2.eval_type == 3) && (defaultArg_1.eval_type == 14);
                            if (false == (b1_1 || b2_1)) {
                                ctx.addError(node, (("Variable was assigned an incompatible type. Types were " + cn_2.eval_type) + " vs ") + defaultArg_1.eval_type);
                            }
                        }
                        return [3 /*break*/, 10];
                    case 9:
                        p_1.is_optional = true;
                        _a.label = 10;
                    case 10:
                        ctx.defineVariable(p_1.name, p_1);
                        if ((node.children.length) > 2) {
                            __self.shouldBeEqualTypes(cn_2, p_1.def_value, ctx, "Variable was assigned an incompatible type.");
                        }
                        operatorsOf_21.addUsage_28(ctx, cn_2);
                        return [3 /*break*/, 12];
                    case 11:
                        cn_3 = node.children[1];
                        cn_3.eval_type = cn_3.typeNameAsType(ctx);
                        cn_3.eval_type_name = cn_3.type_name;
                        if ((node.children.length) > 2) {
                            __self.shouldBeEqualTypes(node.children[1], node.children[2], ctx, "Variable was assigned an incompatible type.");
                        }
                        _a.label = 12;
                    case 12: return [2 /*return*/];
                }
            });
        });
    };
    ;
    return operatorsOf_26;
}());
var operatorsOfstring_33 = /** @class */ (function () {
    function operatorsOfstring_33() {
    }
    // typescript static 
    operatorsOfstring_33.transactionc95depth_34 = function (name, c) {
        var t = operatorsOf_21.getActiveTransaction_22(c);
        var d = 0;
        while ((typeof (t) !== "undefined" && t != null)) {
            if (t.name == name) {
                d = d + 1;
            }
            t = t.parent;
        }
        ;
        return d;
    };
    ;
    return operatorsOfstring_33;
}());
var operatorsOf_33 = /** @class */ (function () {
    function operatorsOf_33() {
    }
    // typescript static 
    operatorsOf_33.startc95transaction_35 = function (name, desc, c) {
        var t_1 = new ContextTransaction();
        t_1.name = name;
        t_1.desc = desc;
        t_1.ctx = c;
        var currC = operatorsOf_21.getActiveTransaction_22(c);
        c.activeTransaction.push(t_1);
        c.transactions.push(t_1);
        if ((typeof (currC) !== "undefined" && currC != null)) {
            currC.children.push(t_1);
            t_1.parent = currC;
        }
        return t_1;
    };
    ;
    // typescript static 
    operatorsOf_33.transactionc95depth_34 = function (name, c) {
        var t_2 = operatorsOf_21.getActiveTransaction_22(c);
        var d_1 = 0;
        while ((typeof (t_2) !== "undefined" && t_2 != null)) {
            if (t_2.name == name) {
                d_1 = d_1 + 1;
            }
            t_2 = t_2.parent;
        }
        ;
        return d_1;
    };
    ;
    return operatorsOf_33;
}());
var operatorsOfContextTransaction_38 = /** @class */ (function () {
    function operatorsOfContextTransaction_38() {
    }
    // typescript static 
    operatorsOfContextTransaction_38.endc95transaction_39 = function (t) {
        var c = t.ctx;
        var i_21 = c.activeTransaction.indexOf(t);
        if (i_21 >= 0) {
            c.activeTransaction.splice(i_21, 1);
        }
        t.ended = true;
    };
    ;
    return operatorsOfContextTransaction_38;
}());
var operatorsOfCodeNode_41 = /** @class */ (function () {
    function operatorsOfCodeNode_41() {
    }
    // typescript static 
    operatorsOfCodeNode_41.rc46funcdesc_42 = function (node, ctx) {
        var m = new RangerAppFunctionDesc();
        var cn_4 = node.getSecond();
        m.name = cn_4.vref;
        m.compiledName = ctx.transformWord(cn_4.vref);
        m.node = node;
        m.nameNode = node.children[1];
        if (node.hasBooleanProperty("strong")) {
            m.refType = 2;
        }
        else {
            m.refType = 1;
        }
        return m;
    };
    ;
    return operatorsOfCodeNode_41;
}());
var operatorsOf_41 = /** @class */ (function () {
    function operatorsOf_41() {
    }
    // typescript static 
    operatorsOf_41.rc46func_43 = function (node, ctx, wr) {
        return __awaiter(this, void 0, void 0, function () {
            var parser;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        parser = new RangerFlowParser();
                        return [4 /*yield*/, parser.CreateFunctionObject(node, ctx, wr)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ;
    return operatorsOf_41;
}());
var operatorsOfJSONArrayObject_57 = /** @class */ (function () {
    function operatorsOfJSONArrayObject_57() {
    }
    // typescript static 
    operatorsOfJSONArrayObject_57.forEach_58 = function (__self, cb) {
        var cnt = __self.length;
        var i_32 = 0;
        while (cnt > 0) {
            var value_8 = __self[i_32];
            cb(value_8, i_32);
            cnt = cnt - 1;
            i_32 = i_32 + 1;
        }
        ;
    };
    ;
    return operatorsOfJSONArrayObject_57;
}());
var operatorsOf_57 = /** @class */ (function () {
    function operatorsOf_57() {
    }
    // typescript static 
    operatorsOf_57.forEach_58 = function (__self, cb) {
        return __awaiter(this, void 0, void 0, function () {
            var cnt_1, i_33, value_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cnt_1 = __self.length;
                        i_33 = 0;
                        _a.label = 1;
                    case 1:
                        if (!(cnt_1 > 0)) return [3 /*break*/, 3];
                        value_9 = __self[i_33];
                        return [4 /*yield*/, cb(value_9, i_33)];
                    case 2:
                        _a.sent();
                        cnt_1 = cnt_1 - 1;
                        i_33 = i_33 + 1;
                        return [3 /*break*/, 1];
                    case 3:
                        ;
                        return [2 /*return*/];
                }
            });
        });
    };
    ;
    return operatorsOf_57;
}());
/* static JavaSript main routine at the end of the JS file */
function __js_main() {
    return __awaiter(this, void 0, void 0, function () {
        var env, o, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    env = CompilerInterface.create_env();
                    o = new VirtualCompiler();
                    return [4 /*yield*/, o.run(env)];
                case 1:
                    res = _a.sent();
                    if ((res.target_dir.length) > 0) {
                        res.fileSystem.saveTo(res.target_dir, false);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
__js_main();
//# sourceMappingURL=compiler.js.map